
/Users/markuskreitzer/code/dean_lab_group/HaybaleSensor/AuburnBales/bin/AuburnBales-photon.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  080a0000  080a0000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003648  080a0018  080a0018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  080a3660  080a3660  00013660  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  080a3668  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000080  20000300  080a366c  00020300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000648  20000380  20000380  00030380  2**2
                  ALLOC
  6 .module_info_suffix 00000028  080a36ec  080a36ec  000236ec  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  080a3714  080a3714  00023714  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000abe15  00000000  00000000  00023718  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010257  00000000  00000000  000cf52d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00013779  00000000  00000000  000df784  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002090  00000000  00000000  000f2efd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000034c8  00000000  00000000  000f4f8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025a89  00000000  00000000  000f8455  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00024028  00000000  00000000  0011dede  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000976d1  00000000  00000000  00141f06  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bba4  00000000  00000000  001d95d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080a0018 <user_part_module>:
 80a0018:	90 32 0a 08                                         .2..

080a001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a001c:	4809      	ldr	r0, [pc, #36]	; (80a0044 <module_user_pre_init+0x28>)
 80a001e:	490a      	ldr	r1, [pc, #40]	; (80a0048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 80a0020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 80a0022:	4288      	cmp	r0, r1
 80a0024:	d005      	beq.n	80a0032 <module_user_pre_init+0x16>
 80a0026:	4a09      	ldr	r2, [pc, #36]	; (80a004c <module_user_pre_init+0x30>)
 80a0028:	4282      	cmp	r2, r0
 80a002a:	d002      	beq.n	80a0032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 80a002c:	1a12      	subs	r2, r2, r0
 80a002e:	f003 f8c7 	bl	80a31c0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 80a0032:	4807      	ldr	r0, [pc, #28]	; (80a0050 <module_user_pre_init+0x34>)
 80a0034:	4a07      	ldr	r2, [pc, #28]	; (80a0054 <module_user_pre_init+0x38>)
 80a0036:	2100      	movs	r1, #0
 80a0038:	1a12      	subs	r2, r2, r0
 80a003a:	f003 f8cc 	bl	80a31d6 <memset>
    return &link_heap_start;
}
 80a003e:	4806      	ldr	r0, [pc, #24]	; (80a0058 <module_user_pre_init+0x3c>)
 80a0040:	bd08      	pop	{r3, pc}
 80a0042:	bf00      	nop
 80a0044:	20000300 	.word	0x20000300
 80a0048:	080a366c 	.word	0x080a366c
 80a004c:	20000380 	.word	0x20000380
 80a0050:	20000380 	.word	0x20000380
 80a0054:	200009c8 	.word	0x200009c8
 80a0058:	200009c8 	.word	0x200009c8

080a005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 80a005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 80a005e:	f001 fd95 	bl	80a1b8c <module_user_init_hook>
 80a0062:	4b07      	ldr	r3, [pc, #28]	; (80a0080 <module_user_init+0x24>)
 80a0064:	4c07      	ldr	r4, [pc, #28]	; (80a0084 <module_user_init+0x28>)
 80a0066:	461e      	mov	r6, r3
 80a0068:	1ae4      	subs	r4, r4, r3
 80a006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a006c:	2500      	movs	r5, #0
 80a006e:	42a5      	cmp	r5, r4
 80a0070:	d004      	beq.n	80a007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 80a0072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80a0076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 80a0078:	3501      	adds	r5, #1
 80a007a:	e7f8      	b.n	80a006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 80a007c:	bd70      	pop	{r4, r5, r6, pc}
 80a007e:	bf00      	nop
 80a0080:	080a3624 	.word	0x080a3624
 80a0084:	080a365c 	.word	0x080a365c

080a0088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 80a0088:	f000 b813 	b.w	80a00b2 <setup>

080a008c <module_user_loop>:
}

void module_user_loop() {
 80a008c:	b508      	push	{r3, lr}
    loop();
 80a008e:	f000 f83f 	bl	80a0110 <loop>
    _post_loop();
}
 80a0092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 80a0096:	f001 bd3b 	b.w	80a1b10 <_post_loop>

080a009a <_Znwj>:
 80a009a:	f000 bd85 	b.w	80a0ba8 <malloc>

080a009e <_ZdlPv>:
 80a009e:	f000 bd8b 	b.w	80a0bb8 <free>

080a00a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80a00a2:	7800      	ldrb	r0, [r0, #0]
 80a00a4:	fab0 f080 	clz	r0, r0
 80a00a8:	0940      	lsrs	r0, r0, #5
 80a00aa:	4770      	bx	lr

080a00ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80a00ac:	2301      	movs	r3, #1
 80a00ae:	7003      	strb	r3, [r0, #0]
 80a00b0:	4770      	bx	lr

080a00b2 <setup>:
//     // EEPROM.put(24, name);
// }

Converter conv(moist_constants,temp_constants);

void setup() {
 80a00b2:	b508      	push	{r3, lr}
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
 80a00b4:	2300      	movs	r3, #0
 80a00b6:	461a      	mov	r2, r3
 80a00b8:	4619      	mov	r1, r3
 80a00ba:	4618      	mov	r0, r3
 80a00bc:	f000 fd6c 	bl	80a0b98 <network_on>
  WiFi.on();
  delay(10);
 80a00c0:	200a      	movs	r0, #10
 80a00c2:	f000 fd99 	bl	80a0bf8 <delay>
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80a00c6:	2300      	movs	r3, #0
 80a00c8:	461a      	mov	r2, r3
 80a00ca:	2101      	movs	r1, #1
 80a00cc:	4618      	mov	r0, r3
 80a00ce:	f000 fd4b 	bl	80a0b68 <network_connect>
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80a00d2:	2200      	movs	r2, #0
 80a00d4:	4611      	mov	r1, r2
 80a00d6:	4610      	mov	r0, r2
 80a00d8:	f000 fd4e 	bl	80a0b78 <network_connecting>
  WiFi.connect(WIFI_CONNECT_SKIP_LISTEN);
  while(WiFi.connecting()){}
 80a00dc:	4602      	mov	r2, r0
 80a00de:	2800      	cmp	r0, #0
 80a00e0:	d1f7      	bne.n	80a00d2 <setup+0x20>
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a00e2:	4601      	mov	r1, r0
 80a00e4:	f000 fd50 	bl	80a0b88 <network_ready>
  if(WiFi.ready()){
 80a00e8:	b938      	cbnz	r0, 80a00fa <setup+0x48>
    if(Particle.connected() == false){
      Particle.connect();
      while(!Particle.connected() == false){}
    }
  }
    Serial.begin(9600);
 80a00ea:	f001 fc2d 	bl	80a1948 <_Z16_fetch_usbserialv>
}
 80a00ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    if(Particle.connected() == false){
      Particle.connect();
      while(!Particle.connected() == false){}
    }
  }
    Serial.begin(9600);
 80a00f2:	f44f 5116 	mov.w	r1, #9600	; 0x2580
 80a00f6:	f001 bc09 	b.w	80a190c <_ZN9USBSerial5beginEl>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a00fa:	f000 fd15 	bl	80a0b28 <spark_cloud_flag_connected>
  WiFi.on();
  delay(10);
  WiFi.connect(WIFI_CONNECT_SKIP_LISTEN);
  while(WiFi.connecting()){}
  if(WiFi.ready()){
    if(Particle.connected() == false){
 80a00fe:	2800      	cmp	r0, #0
 80a0100:	d1f3      	bne.n	80a00ea <setup+0x38>
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a0102:	f000 fd09 	bl	80a0b18 <spark_cloud_flag_connect>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80a0106:	f000 fd0f 	bl	80a0b28 <spark_cloud_flag_connected>
      Particle.connect();
      while(!Particle.connected() == false){}
 80a010a:	2800      	cmp	r0, #0
 80a010c:	d1fb      	bne.n	80a0106 <setup+0x54>
 80a010e:	e7ec      	b.n	80a00ea <setup+0x38>

080a0110 <loop>:
    }
  }
    Serial.begin(9600);
}

void loop() {
 80a0110:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80a0114:	b0a2      	sub	sp, #136	; 0x88
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80a0116:	f000 fb99 	bl	80a084c <HAL_Timer_Get_Milli_Seconds>
    unsigned long now = millis();
    if ((now - lastPublish) < publish_delay) {
 80a011a:	4d71      	ldr	r5, [pc, #452]	; (80a02e0 <loop+0x1d0>)
 80a011c:	4606      	mov	r6, r0
 80a011e:	682b      	ldr	r3, [r5, #0]
 80a0120:	1ac3      	subs	r3, r0, r3
 80a0122:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80a0126:	f0c0 80d8 	bcc.w	80a02da <loop+0x1ca>
        return;
    }
    float temp_hz = hs.get_temperature_freq();
 80a012a:	486e      	ldr	r0, [pc, #440]	; (80a02e4 <loop+0x1d4>)
 80a012c:	f000 fa04 	bl	80a0538 <_ZN8HaySense20get_temperature_freqEv>
 80a0130:	4604      	mov	r4, r0
    float moist_hz = hs.get_moisture_freq();
 80a0132:	486c      	ldr	r0, [pc, #432]	; (80a02e4 <loop+0x1d4>)
 80a0134:	f000 fa2e 	bl	80a0594 <_ZN8HaySense17get_moisture_freqEv>
    float temp = conv.GetTemperature(temp_hz);
 80a0138:	4621      	mov	r1, r4
    unsigned long now = millis();
    if ((now - lastPublish) < publish_delay) {
        return;
    }
    float temp_hz = hs.get_temperature_freq();
    float moist_hz = hs.get_moisture_freq();
 80a013a:	4607      	mov	r7, r0
    float temp = conv.GetTemperature(temp_hz);
 80a013c:	486a      	ldr	r0, [pc, #424]	; (80a02e8 <loop+0x1d8>)
 80a013e:	f000 faa7 	bl	80a0690 <_ZN9Converter14GetTemperatureEf>
    float moist = conv.GetMoisture(moist_hz, temp_hz);
 80a0142:	4622      	mov	r2, r4
 80a0144:	4639      	mov	r1, r7
    if ((now - lastPublish) < publish_delay) {
        return;
    }
    float temp_hz = hs.get_temperature_freq();
    float moist_hz = hs.get_moisture_freq();
    float temp = conv.GetTemperature(temp_hz);
 80a0146:	4681      	mov	r9, r0
    float moist = conv.GetMoisture(moist_hz, temp_hz);
 80a0148:	4867      	ldr	r0, [pc, #412]	; (80a02e8 <loop+0x1d8>)
 80a014a:	f000 fb2d 	bl	80a07a8 <_ZN9Converter11GetMoistureEff>
 80a014e:	4682      	mov	sl, r0
    float battery = hs.get_battery_voltage();
 80a0150:	4864      	ldr	r0, [pc, #400]	; (80a02e4 <loop+0x1d4>)
 80a0152:	f000 fa7d 	bl	80a0650 <_ZN8HaySense19get_battery_voltageEv>

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
	StringSumHelper(const char *p) : String(p) {}
 80a0156:	4965      	ldr	r1, [pc, #404]	; (80a02ec <loop+0x1dc>)
 80a0158:	4680      	mov	r8, r0
 80a015a:	a80a      	add	r0, sp, #40	; 0x28
 80a015c:	f001 fa49 	bl	80a15f2 <_ZN6StringC1EPK19__FlashStringHelper>
    String sensor_data = "{\"1\": \"" + String(temp) + "\", \"2\": \"" + String(temp_hz) + "\", \"3\": \"" + String(moist/6.0) + "\", \"4\": \"" + String(moist_hz) + "\", \"5\": \"" + String(battery) + "\", \"6\": \"" + System.deviceID() + "\", \"7\": \"" + name + "\", \"k\": \"" + api_key + "\"}";
 80a0160:	2206      	movs	r2, #6
 80a0162:	4649      	mov	r1, r9
 80a0164:	a806      	add	r0, sp, #24
 80a0166:	f001 fa82 	bl	80a166e <_ZN6StringC1Efi>
 80a016a:	a906      	add	r1, sp, #24
 80a016c:	a80a      	add	r0, sp, #40	; 0x28
 80a016e:	f001 fac2 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a0172:	495f      	ldr	r1, [pc, #380]	; (80a02f0 <loop+0x1e0>)
 80a0174:	f001 facb 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a0178:	4681      	mov	r9, r0
 80a017a:	2206      	movs	r2, #6
 80a017c:	4621      	mov	r1, r4
 80a017e:	a80e      	add	r0, sp, #56	; 0x38
 80a0180:	f001 fa75 	bl	80a166e <_ZN6StringC1Efi>
 80a0184:	a90e      	add	r1, sp, #56	; 0x38
 80a0186:	4648      	mov	r0, r9
 80a0188:	f001 fab5 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a018c:	4959      	ldr	r1, [pc, #356]	; (80a02f4 <loop+0x1e4>)
 80a018e:	f001 fabe 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a0192:	4681      	mov	r9, r0
 80a0194:	4650      	mov	r0, sl
 80a0196:	f002 f895 	bl	80a22c4 <__aeabi_f2d>
 80a019a:	2200      	movs	r2, #0
 80a019c:	4b56      	ldr	r3, [pc, #344]	; (80a02f8 <loop+0x1e8>)
 80a019e:	f002 fa0f 	bl	80a25c0 <__aeabi_ddiv>
 80a01a2:	2406      	movs	r4, #6
 80a01a4:	460b      	mov	r3, r1
 80a01a6:	4602      	mov	r2, r0
 80a01a8:	9400      	str	r4, [sp, #0]
 80a01aa:	a812      	add	r0, sp, #72	; 0x48
 80a01ac:	f001 fa76 	bl	80a169c <_ZN6StringC1Edi>
 80a01b0:	a912      	add	r1, sp, #72	; 0x48
 80a01b2:	4648      	mov	r0, r9
 80a01b4:	f001 fa9f 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a01b8:	4950      	ldr	r1, [pc, #320]	; (80a02fc <loop+0x1ec>)
 80a01ba:	f001 faa8 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a01be:	4681      	mov	r9, r0
 80a01c0:	4622      	mov	r2, r4
 80a01c2:	4639      	mov	r1, r7
 80a01c4:	a816      	add	r0, sp, #88	; 0x58
 80a01c6:	f001 fa52 	bl	80a166e <_ZN6StringC1Efi>
 80a01ca:	a916      	add	r1, sp, #88	; 0x58
 80a01cc:	4648      	mov	r0, r9
 80a01ce:	f001 fa92 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a01d2:	494b      	ldr	r1, [pc, #300]	; (80a0300 <loop+0x1f0>)
 80a01d4:	f001 fa9b 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a01d8:	4607      	mov	r7, r0
 80a01da:	4622      	mov	r2, r4
 80a01dc:	4641      	mov	r1, r8
 80a01de:	a81a      	add	r0, sp, #104	; 0x68
 80a01e0:	f001 fa45 	bl	80a166e <_ZN6StringC1Efi>
 80a01e4:	a91a      	add	r1, sp, #104	; 0x68
 80a01e6:	4638      	mov	r0, r7
 80a01e8:	f001 fa85 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a01ec:	4945      	ldr	r1, [pc, #276]	; (80a0304 <loop+0x1f4>)
 80a01ee:	f001 fa8e 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a01f2:	4604      	mov	r4, r0
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80a01f4:	a81e      	add	r0, sp, #120	; 0x78
 80a01f6:	f000 fc9f 	bl	80a0b38 <spark_deviceID>
 80a01fa:	a91e      	add	r1, sp, #120	; 0x78
 80a01fc:	4620      	mov	r0, r4
 80a01fe:	f001 fa7a 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a0202:	4941      	ldr	r1, [pc, #260]	; (80a0308 <loop+0x1f8>)
 80a0204:	f001 fa83 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a0208:	4940      	ldr	r1, [pc, #256]	; (80a030c <loop+0x1fc>)
 80a020a:	f001 fa74 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a020e:	4940      	ldr	r1, [pc, #256]	; (80a0310 <loop+0x200>)
 80a0210:	f001 fa7d 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a0214:	493f      	ldr	r1, [pc, #252]	; (80a0314 <loop+0x204>)
 80a0216:	f001 fa6e 	bl	80a16f6 <_ZplRK15StringSumHelperRK6String>
 80a021a:	493f      	ldr	r1, [pc, #252]	; (80a0318 <loop+0x208>)
 80a021c:	f001 fa77 	bl	80a170e <_ZplRK15StringSumHelperPKc>
 80a0220:	4601      	mov	r1, r0
 80a0222:	a802      	add	r0, sp, #8
 80a0224:	f001 fa07 	bl	80a1636 <_ZN6StringC1ERKS_>
 80a0228:	a81e      	add	r0, sp, #120	; 0x78
 80a022a:	f001 f99b 	bl	80a1564 <_ZN6StringD1Ev>
 80a022e:	a81a      	add	r0, sp, #104	; 0x68
 80a0230:	f001 f998 	bl	80a1564 <_ZN6StringD1Ev>
 80a0234:	a816      	add	r0, sp, #88	; 0x58
 80a0236:	f001 f995 	bl	80a1564 <_ZN6StringD1Ev>
 80a023a:	a812      	add	r0, sp, #72	; 0x48
 80a023c:	f001 f992 	bl	80a1564 <_ZN6StringD1Ev>
 80a0240:	a80e      	add	r0, sp, #56	; 0x38
 80a0242:	f001 f98f 	bl	80a1564 <_ZN6StringD1Ev>
 80a0246:	a806      	add	r0, sp, #24
 80a0248:	f001 f98c 	bl	80a1564 <_ZN6StringD1Ev>

        friend class StringPrintableHelper;

};

class StringSumHelper : public String
 80a024c:	a80a      	add	r0, sp, #40	; 0x28
 80a024e:	f001 f989 	bl	80a1564 <_ZN6StringD1Ev>
 80a0252:	f000 fc69 	bl	80a0b28 <spark_cloud_flag_connected>
    if(Particle.connected()){
 80a0256:	b318      	cbz	r0, 80a02a0 <loop+0x190>
 80a0258:	4b30      	ldr	r3, [pc, #192]	; (80a031c <loop+0x20c>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80a025a:	9a02      	ldr	r2, [sp, #8]
 80a025c:	781b      	ldrb	r3, [r3, #0]
 80a025e:	4930      	ldr	r1, [pc, #192]	; (80a0320 <loop+0x210>)
 80a0260:	f88d 3000 	strb.w	r3, [sp]
 80a0264:	a81e      	add	r0, sp, #120	; 0x78
 80a0266:	233c      	movs	r3, #60	; 0x3c
 80a0268:	f000 fe30 	bl	80a0ecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80a026c:	9c1f      	ldr	r4, [sp, #124]	; 0x7c
 80a026e:	b17c      	cbz	r4, 80a0290 <loop+0x180>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0270:	6863      	ldr	r3, [r4, #4]
 80a0272:	3b01      	subs	r3, #1
 80a0274:	6063      	str	r3, [r4, #4]
 80a0276:	b95b      	cbnz	r3, 80a0290 <loop+0x180>
        {
          _M_dispose();
 80a0278:	6823      	ldr	r3, [r4, #0]
 80a027a:	4620      	mov	r0, r4
 80a027c:	689b      	ldr	r3, [r3, #8]
 80a027e:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0280:	68a3      	ldr	r3, [r4, #8]
 80a0282:	3b01      	subs	r3, #1
 80a0284:	60a3      	str	r3, [r4, #8]
 80a0286:	b91b      	cbnz	r3, 80a0290 <loop+0x180>
            _M_destroy();
 80a0288:	6823      	ldr	r3, [r4, #0]
 80a028a:	4620      	mov	r0, r4
 80a028c:	68db      	ldr	r3, [r3, #12]
 80a028e:	4798      	blx	r3
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a0290:	f000 fadc 	bl	80a084c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a0294:	4b23      	ldr	r3, [pc, #140]	; (80a0324 <loop+0x214>)
 80a0296:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80a0298:	f000 fc36 	bl	80a0b08 <spark_process>
      Particle.publish("thingSpeakWrite_hb", sensor_data, 60, PRIVATE);
      Particle.process();
      lastPublish = now;
 80a029c:	602e      	str	r6, [r5, #0]
 80a029e:	e001      	b.n	80a02a4 <loop+0x194>
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80a02a0:	f000 fc3a 	bl	80a0b18 <spark_cloud_flag_connect>
    }else{
      Particle.connect();
    }
    if(Serial.isConnected()){
 80a02a4:	f001 fb50 	bl	80a1948 <_Z16_fetch_usbserialv>
 80a02a8:	f001 fb34 	bl	80a1914 <_ZN9USBSerial11isConnectedEv>
 80a02ac:	b150      	cbz	r0, 80a02c4 <loop+0x1b4>
      Serial.println("Publishing:");
 80a02ae:	f001 fb4b 	bl	80a1948 <_Z16_fetch_usbserialv>
 80a02b2:	491d      	ldr	r1, [pc, #116]	; (80a0328 <loop+0x218>)
 80a02b4:	f001 f889 	bl	80a13ca <_ZN5Print7printlnEPKc>
      Serial.println(sensor_data);
 80a02b8:	f001 fb46 	bl	80a1948 <_Z16_fetch_usbserialv>
 80a02bc:	9902      	ldr	r1, [sp, #8]
 80a02be:	f001 f884 	bl	80a13ca <_ZN5Print7printlnEPKc>
 80a02c2:	e007      	b.n	80a02d4 <loop+0x1c4>
    }else{
      System.sleep(SLEEP_MODE_DEEP, 300);
 80a02c4:	4b19      	ldr	r3, [pc, #100]	; (80a032c <loop+0x21c>)
 80a02c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80a02ca:	681b      	ldr	r3, [r3, #0]
 80a02cc:	2101      	movs	r1, #1
 80a02ce:	a81e      	add	r0, sp, #120	; 0x78
 80a02d0:	f001 fa30 	bl	80a1734 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    float temp_hz = hs.get_temperature_freq();
    float moist_hz = hs.get_moisture_freq();
    float temp = conv.GetTemperature(temp_hz);
    float moist = conv.GetMoisture(moist_hz, temp_hz);
    float battery = hs.get_battery_voltage();
    String sensor_data = "{\"1\": \"" + String(temp) + "\", \"2\": \"" + String(temp_hz) + "\", \"3\": \"" + String(moist/6.0) + "\", \"4\": \"" + String(moist_hz) + "\", \"5\": \"" + String(battery) + "\", \"6\": \"" + System.deviceID() + "\", \"7\": \"" + name + "\", \"k\": \"" + api_key + "\"}";
 80a02d4:	a802      	add	r0, sp, #8
 80a02d6:	f001 f945 	bl	80a1564 <_ZN6StringD1Ev>
      Serial.println("Publishing:");
      Serial.println(sensor_data);
    }else{
      System.sleep(SLEEP_MODE_DEEP, 300);
    }
}
 80a02da:	b022      	add	sp, #136	; 0x88
 80a02dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80a02e0:	20000384 	.word	0x20000384
 80a02e4:	20000388 	.word	0x20000388
 80a02e8:	20000390 	.word	0x20000390
 80a02ec:	080a32a4 	.word	0x080a32a4
 80a02f0:	080a32ac 	.word	0x080a32ac
 80a02f4:	080a32b6 	.word	0x080a32b6
 80a02f8:	40180000 	.word	0x40180000
 80a02fc:	080a32c0 	.word	0x080a32c0
 80a0300:	080a32ca 	.word	0x080a32ca
 80a0304:	080a32d4 	.word	0x080a32d4
 80a0308:	080a32de 	.word	0x080a32de
 80a030c:	200003b0 	.word	0x200003b0
 80a0310:	080a32e8 	.word	0x080a32e8
 80a0314:	20000398 	.word	0x20000398
 80a0318:	080a32f2 	.word	0x080a32f2
 80a031c:	20000389 	.word	0x20000389
 80a0320:	080a32f5 	.word	0x080a32f5
 80a0324:	200008d4 	.word	0x200008d4
 80a0328:	080a3308 	.word	0x080a3308
 80a032c:	2000038c 	.word	0x2000038c

080a0330 <_GLOBAL__sub_I_name>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80a0330:	4b1f      	ldr	r3, [pc, #124]	; (80a03b0 <_GLOBAL__sub_I_name+0x80>)
 80a0332:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a0334:	2500      	movs	r5, #0
 80a0336:	601d      	str	r5, [r3, #0]
 80a0338:	4b1e      	ldr	r3, [pc, #120]	; (80a03b4 <_GLOBAL__sub_I_name+0x84>)
 80a033a:	2201      	movs	r2, #1
 80a033c:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a033e:	f000 fa8d 	bl	80a085c <HAL_Pin_Map>
// String api_key = "8CSZJGWGJQFTRTN9";

// HB_02
// String api_key = "QM0ZYJCSC2LVJRLM";

String name = "HB_03";
 80a0342:	491d      	ldr	r1, [pc, #116]	; (80a03b8 <_GLOBAL__sub_I_name+0x88>)
 80a0344:	481d      	ldr	r0, [pc, #116]	; (80a03bc <_GLOBAL__sub_I_name+0x8c>)
 80a0346:	f001 f954 	bl	80a15f2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a034a:	4a1d      	ldr	r2, [pc, #116]	; (80a03c0 <_GLOBAL__sub_I_name+0x90>)
 80a034c:	491d      	ldr	r1, [pc, #116]	; (80a03c4 <_GLOBAL__sub_I_name+0x94>)
 80a034e:	481b      	ldr	r0, [pc, #108]	; (80a03bc <_GLOBAL__sub_I_name+0x8c>)
 80a0350:	f001 fd04 	bl	80a1d5c <__aeabi_atexit>
String api_key = "3WK9XQIQZ0SZ7ESB";
 80a0354:	491c      	ldr	r1, [pc, #112]	; (80a03c8 <_GLOBAL__sub_I_name+0x98>)
 80a0356:	481d      	ldr	r0, [pc, #116]	; (80a03cc <_GLOBAL__sub_I_name+0x9c>)
 80a0358:	f001 f94b 	bl	80a15f2 <_ZN6StringC1EPK19__FlashStringHelper>
 80a035c:	4a18      	ldr	r2, [pc, #96]	; (80a03c0 <_GLOBAL__sub_I_name+0x90>)
 80a035e:	4919      	ldr	r1, [pc, #100]	; (80a03c4 <_GLOBAL__sub_I_name+0x94>)
 80a0360:	481a      	ldr	r0, [pc, #104]	; (80a03cc <_GLOBAL__sub_I_name+0x9c>)
 80a0362:	f001 fcfb 	bl	80a1d5c <__aeabi_atexit>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a0366:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a036a:	4c19      	ldr	r4, [pc, #100]	; (80a03d0 <_GLOBAL__sub_I_name+0xa0>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a036c:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a036e:	8063      	strh	r3, [r4, #2]
 80a0370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80a0374:	7025      	strb	r5, [r4, #0]
 80a0376:	80a3      	strh	r3, [r4, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a0378:	f000 fb8a 	bl	80a0a90 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a037c:	a802      	add	r0, sp, #8
 80a037e:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a0382:	462a      	mov	r2, r5
 80a0384:	4629      	mov	r1, r5
 80a0386:	f000 fa49 	bl	80a081c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a038a:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a038c:	2b1e      	cmp	r3, #30
 80a038e:	d104      	bne.n	80a039a <_GLOBAL__sub_I_name+0x6a>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a0390:	2303      	movs	r3, #3
 80a0392:	7023      	strb	r3, [r4, #0]
 80a0394:	2311      	movs	r3, #17
 80a0396:	8065      	strh	r5, [r4, #2]
 80a0398:	80a3      	strh	r3, [r4, #4]

unsigned int lastPublish = 0;
// Delay between each loop publishing data.
#define publish_delay 1000

HaySense hs;
 80a039a:	480e      	ldr	r0, [pc, #56]	; (80a03d4 <_GLOBAL__sub_I_name+0xa4>)
 80a039c:	f000 f91e 	bl	80a05dc <_ZN8HaySenseC1Ev>
//     // char name[24];
//     // strcpy(name, data);
//     // EEPROM.put(24, name);
// }

Converter conv(moist_constants,temp_constants);
 80a03a0:	4a0d      	ldr	r2, [pc, #52]	; (80a03d8 <_GLOBAL__sub_I_name+0xa8>)
 80a03a2:	490e      	ldr	r1, [pc, #56]	; (80a03dc <_GLOBAL__sub_I_name+0xac>)
 80a03a4:	480e      	ldr	r0, [pc, #56]	; (80a03e0 <_GLOBAL__sub_I_name+0xb0>)
 80a03a6:	f000 f96f 	bl	80a0688 <_ZN9ConverterC1EPfS0_>
      Serial.println("Publishing:");
      Serial.println(sensor_data);
    }else{
      System.sleep(SLEEP_MODE_DEEP, 300);
    }
}
 80a03aa:	b003      	add	sp, #12
 80a03ac:	bd30      	pop	{r4, r5, pc}
 80a03ae:	bf00      	nop
 80a03b0:	2000038c 	.word	0x2000038c
 80a03b4:	20000389 	.word	0x20000389
 80a03b8:	080a3314 	.word	0x080a3314
 80a03bc:	200003b0 	.word	0x200003b0
 80a03c0:	20000380 	.word	0x20000380
 80a03c4:	080a1565 	.word	0x080a1565
 80a03c8:	080a331a 	.word	0x080a331a
 80a03cc:	20000398 	.word	0x20000398
 80a03d0:	200003a8 	.word	0x200003a8
 80a03d4:	20000388 	.word	0x20000388
 80a03d8:	20000310 	.word	0x20000310
 80a03dc:	20000300 	.word	0x20000300
 80a03e0:	20000390 	.word	0x20000390

080a03e4 <micros>:
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
 80a03e4:	f000 ba2a 	b.w	80a083c <HAL_Timer_Get_Micro_Seconds>

080a03e8 <_ZN17FreqPeriodCounterC1EhPFmvEj>:
																<- elapsedTime ->
*/

#include "FreqPeriodCounter.h"

FreqPeriodCounter::FreqPeriodCounter(byte pin, unsigned long (*timeFunctionPtr)(), unsigned debounceTime):
 80a03e8:	b510      	push	{r4, lr}
pin(pin), debounceTime(debounceTime), timeFunctionPtr(timeFunctionPtr)
 80a03ea:	61c3      	str	r3, [r0, #28]
		return (unsigned long)precision*1000/period;
}

void FreqPeriodCounter::synchronize()
{
	transientCount = -2; // skip first two invalid measurements
 80a03ec:	23fe      	movs	r3, #254	; 0xfe
*/

#include "FreqPeriodCounter.h"

FreqPeriodCounter::FreqPeriodCounter(byte pin, unsigned long (*timeFunctionPtr)(), unsigned debounceTime):
pin(pin), debounceTime(debounceTime), timeFunctionPtr(timeFunctionPtr)
 80a03ee:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
 80a03f2:	6242      	str	r2, [r0, #36]	; 0x24
		return (unsigned long)precision*1000/period;
}

void FreqPeriodCounter::synchronize()
{
	transientCount = -2; // skip first two invalid measurements
 80a03f4:	f880 3020 	strb.w	r3, [r0, #32]

FreqPeriodCounter::FreqPeriodCounter(byte pin, unsigned long (*timeFunctionPtr)(), unsigned debounceTime):
pin(pin), debounceTime(debounceTime), timeFunctionPtr(timeFunctionPtr)
{
	synchronize();
}
 80a03f8:	bd10      	pop	{r4, pc}

080a03fa <_ZN17FreqPeriodCounter4pollEv>:

boolean FreqPeriodCounter::poll()
{
 80a03fa:	b510      	push	{r4, lr}
	time = timeFunctionPtr();
 80a03fc:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
	synchronize();
}

boolean FreqPeriodCounter::poll()
{
 80a03fe:	4604      	mov	r4, r0
	time = timeFunctionPtr();
 80a0400:	4798      	blx	r3
 80a0402:	6160      	str	r0, [r4, #20]
	elapsedTime = time - transientTime;
 80a0404:	6963      	ldr	r3, [r4, #20]
 80a0406:	69a2      	ldr	r2, [r4, #24]
	level = digitalRead(pin);
 80a0408:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
}

boolean FreqPeriodCounter::poll()
{
	time = timeFunctionPtr();
	elapsedTime = time - transientTime;
 80a040c:	1a9b      	subs	r3, r3, r2
 80a040e:	60e3      	str	r3, [r4, #12]
	level = digitalRead(pin);
 80a0410:	f001 fc1d 	bl	80a1c4e <digitalRead>
 80a0414:	3000      	adds	r0, #0
 80a0416:	bf18      	it	ne
 80a0418:	2001      	movne	r0, #1
 80a041a:	7420      	strb	r0, [r4, #16]
	boolean returnVal = false;
	if((level != lastLevel) && (elapsedTime > debounceTime)) // if transient
 80a041c:	7c22      	ldrb	r2, [r4, #16]
 80a041e:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
 80a0422:	429a      	cmp	r2, r3
 80a0424:	d101      	bne.n	80a042a <_ZN17FreqPeriodCounter4pollEv+0x30>
boolean FreqPeriodCounter::poll()
{
	time = timeFunctionPtr();
	elapsedTime = time - transientTime;
	level = digitalRead(pin);
	boolean returnVal = false;
 80a0426:	2000      	movs	r0, #0
 80a0428:	bd10      	pop	{r4, pc}
	if((level != lastLevel) && (elapsedTime > debounceTime)) // if transient
 80a042a:	68e2      	ldr	r2, [r4, #12]
 80a042c:	69e3      	ldr	r3, [r4, #28]
 80a042e:	429a      	cmp	r2, r3
 80a0430:	d9f9      	bls.n	80a0426 <_ZN17FreqPeriodCounter4pollEv+0x2c>
	{
		transientCount++;
 80a0432:	f894 3020 	ldrb.w	r3, [r4, #32]
 80a0436:	3301      	adds	r3, #1
 80a0438:	b2db      	uxtb	r3, r3
 80a043a:	f884 3020 	strb.w	r3, [r4, #32]
		lastLevel = level;
 80a043e:	7c23      	ldrb	r3, [r4, #16]
 80a0440:	b2db      	uxtb	r3, r3
 80a0442:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
		transientTime = time;
 80a0446:	6963      	ldr	r3, [r4, #20]
 80a0448:	61a3      	str	r3, [r4, #24]
		if(level == HIGH)
 80a044a:	7c23      	ldrb	r3, [r4, #16]
 80a044c:	b113      	cbz	r3, 80a0454 <_ZN17FreqPeriodCounter4pollEv+0x5a>
			pulseWidthLow = elapsedTime;
 80a044e:	68e3      	ldr	r3, [r4, #12]
 80a0450:	60a3      	str	r3, [r4, #8]
 80a0452:	e001      	b.n	80a0458 <_ZN17FreqPeriodCounter4pollEv+0x5e>
		else
			pulseWidth = elapsedTime;
 80a0454:	68e3      	ldr	r3, [r4, #12]
 80a0456:	6063      	str	r3, [r4, #4]
		if(transientCount >= 2)
 80a0458:	f894 3020 	ldrb.w	r3, [r4, #32]
 80a045c:	2b01      	cmp	r3, #1
 80a045e:	d9e2      	bls.n	80a0426 <_ZN17FreqPeriodCounter4pollEv+0x2c>
		{
			period = pulseWidth + pulseWidthLow;
 80a0460:	6862      	ldr	r2, [r4, #4]
 80a0462:	68a3      	ldr	r3, [r4, #8]
			transientCount = 0;
			readyVal = true;
 80a0464:	2001      	movs	r0, #1
			pulseWidthLow = elapsedTime;
		else
			pulseWidth = elapsedTime;
		if(transientCount >= 2)
		{
			period = pulseWidth + pulseWidthLow;
 80a0466:	4413      	add	r3, r2
 80a0468:	6023      	str	r3, [r4, #0]
			transientCount = 0;
 80a046a:	2300      	movs	r3, #0
 80a046c:	f884 3020 	strb.w	r3, [r4, #32]
			readyVal = true;
 80a0470:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
			returnVal = true; // return true if a complete period is measured
		}
	}
	return returnVal;
 80a0474:	bd10      	pop	{r4, pc}

080a0476 <_ZN17FreqPeriodCounter5readyEv>:
}

boolean FreqPeriodCounter::ready()
{
 80a0476:	4603      	mov	r3, r0
	boolean returnVal = readyVal;
	readyVal = false; // reset after read
 80a0478:	2200      	movs	r2, #0
	return returnVal;
}

boolean FreqPeriodCounter::ready()
{
	boolean returnVal = readyVal;
 80a047a:	f890 0023 	ldrb.w	r0, [r0, #35]	; 0x23
	readyVal = false; // reset after read
 80a047e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	return returnVal;
}
 80a0482:	4770      	bx	lr

080a0484 <_ZN17FreqPeriodCounter5hertzEj>:

unsigned long FreqPeriodCounter::hertz(unsigned int precision)
{
	if (timeFunctionPtr == micros)
 80a0484:	4b05      	ldr	r3, [pc, #20]	; (80a049c <_ZN17FreqPeriodCounter5hertzEj+0x18>)
 80a0486:	6a42      	ldr	r2, [r0, #36]	; 0x24
		return (unsigned long)precision*1000000/period;
 80a0488:	6800      	ldr	r0, [r0, #0]
	return returnVal;
}

unsigned long FreqPeriodCounter::hertz(unsigned int precision)
{
	if (timeFunctionPtr == micros)
 80a048a:	429a      	cmp	r2, r3
		return (unsigned long)precision*1000000/period;
 80a048c:	bf0c      	ite	eq
 80a048e:	4b04      	ldreq	r3, [pc, #16]	; (80a04a0 <_ZN17FreqPeriodCounter5hertzEj+0x1c>)
	else
		return (unsigned long)precision*1000/period;
 80a0490:	f44f 737a 	movne.w	r3, #1000	; 0x3e8
 80a0494:	4359      	muls	r1, r3
 80a0496:	fbb1 f0f0 	udiv	r0, r1, r0
}
 80a049a:	4770      	bx	lr
 80a049c:	080a03e5 	.word	0x080a03e5
 80a04a0:	000f4240 	.word	0x000f4240

080a04a4 <_GLOBAL__sub_I__ZN17FreqPeriodCounterC2EhPFmvEj>:
 80a04a4:	f000 b9da 	b.w	80a085c <HAL_Pin_Map>

080a04a8 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE9_M_invokeERKSt9_Any_data>:
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a04a8:	6803      	ldr	r3, [r0, #0]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a04aa:	685a      	ldr	r2, [r3, #4]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a04ac:	6898      	ldr	r0, [r3, #8]
      template<typename... _Args, typename _Req
               = _Require<typename _Traits::__lvalue,
                          _CheckArgs<_Pack<_Args...>>>>
	result_type
	operator()(_Class* __object, _Args&&... __args) const
	{ return (__object->*_M_pmf)(std::forward<_Args>(__args)...); }
 80a04ae:	f012 0f01 	tst.w	r2, #1
 80a04b2:	ea4f 0262 	mov.w	r2, r2, asr #1
 80a04b6:	bf18      	it	ne
 80a04b8:	5881      	ldrne	r1, [r0, r2]
 80a04ba:	681b      	ldr	r3, [r3, #0]
 80a04bc:	4410      	add	r0, r2
 80a04be:	bf18      	it	ne
 80a04c0:	58cb      	ldrne	r3, [r1, r3]
 80a04c2:	4718      	bx	r3

080a04c4 <_ZN8HaySense10counterISREv>:
    // proper battery voltage value.
    return (float)analogRead(BATTERY_PIN) * ((3.3*2.0)/(4095.0*0.914));
}

void HaySense::counterISR(){
	mycounter.poll();
 80a04c4:	4801      	ldr	r0, [pc, #4]	; (80a04cc <_ZN8HaySense10counterISREv+0x8>)
 80a04c6:	f7ff bf98 	b.w	80a03fa <_ZN17FreqPeriodCounter4pollEv>
 80a04ca:	bf00      	nop
 80a04cc:	200003c4 	.word	0x200003c4

080a04d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04d0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a04d2:	b538      	push	{r3, r4, r5, lr}
 80a04d4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a04d6:	d005      	beq.n	80a04e4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x14>
 80a04d8:	2a03      	cmp	r2, #3
 80a04da:	d00f      	beq.n	80a04fc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x2c>
 80a04dc:	2a01      	cmp	r2, #1
 80a04de:	d110      	bne.n	80a0502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a04e0:	680b      	ldr	r3, [r1, #0]
 80a04e2:	e009      	b.n	80a04f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a04e4:	200c      	movs	r0, #12
 80a04e6:	680d      	ldr	r5, [r1, #0]
 80a04e8:	f7ff fdd7 	bl	80a009a <_Znwj>
 80a04ec:	4603      	mov	r3, r0
 80a04ee:	b118      	cbz	r0, 80a04f8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x28>
 80a04f0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80a04f4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80a04f8:	6023      	str	r3, [r4, #0]
 80a04fa:	e002      	b.n	80a0502 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt7_Mem_fnIM8HaySenseFvvEEPS3_EEE10_M_managerERSt9_Any_dataRKSB_St18_Manager_operation+0x32>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a04fc:	6800      	ldr	r0, [r0, #0]
 80a04fe:	f7ff fdce 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a0502:	2000      	movs	r0, #0
 80a0504:	bd38      	pop	{r3, r4, r5, pc}

080a0506 <_ZNK5spark6Logger5traceEPKcz>:
// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
 80a0506:	b40e      	push	{r1, r2, r3}
 80a0508:	b500      	push	{lr}
 80a050a:	b08c      	sub	sp, #48	; 0x30
 80a050c:	aa0d      	add	r2, sp, #52	; 0x34
 80a050e:	f852 1b04 	ldr.w	r1, [r2], #4
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a0512:	2320      	movs	r3, #32
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0514:	e88d 0006 	stmia.w	sp, {r1, r2}
        name_(name) {
}

inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
 80a0518:	9203      	str	r2, [sp, #12]
    va_end(args);
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
 80a051a:	9304      	str	r3, [sp, #16]
    attr.flags = 0;
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a051c:	6801      	ldr	r1, [r0, #0]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a051e:	2300      	movs	r3, #0
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0520:	aa04      	add	r2, sp, #16
 80a0522:	2001      	movs	r0, #1
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
 80a0524:	9305      	str	r3, [sp, #20]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
 80a0526:	f000 faab 	bl	80a0a80 <log_message_v>
inline void spark::Logger::trace(const char *fmt, ...) const {
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}
 80a052a:	b00c      	add	sp, #48	; 0x30
 80a052c:	f85d eb04 	ldr.w	lr, [sp], #4
 80a0530:	b003      	add	sp, #12
 80a0532:	4770      	bx	lr
 80a0534:	0000      	movs	r0, r0
	...

080a0538 <_ZN8HaySense20get_temperature_freqEv>:
    // be sure not to call anything that requires hardware be initialized here,
    // put those in begin()
}

// Public
float HaySense::get_temperature_freq(void){
 80a0538:	b510      	push	{r4, lr}
    Log.trace("Getting temperature frequency.");
 80a053a:	4913      	ldr	r1, [pc, #76]	; (80a0588 <_ZN8HaySense20get_temperature_freqEv+0x50>)
 80a053c:	4813      	ldr	r0, [pc, #76]	; (80a058c <_ZN8HaySense20get_temperature_freqEv+0x54>)
 80a053e:	f7ff ffe2 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    unsigned long temp_period_low = pulseIn(TEMPERATURE_PIN, LOW);
 80a0542:	2100      	movs	r1, #0
 80a0544:	2005      	movs	r0, #5
 80a0546:	f001 fbac 	bl	80a1ca2 <pulseIn>
    unsigned long temp_period_high = pulseIn(TEMPERATURE_PIN, HIGH);
 80a054a:	2101      	movs	r1, #1
}

// Public
float HaySense::get_temperature_freq(void){
    Log.trace("Getting temperature frequency.");
    unsigned long temp_period_low = pulseIn(TEMPERATURE_PIN, LOW);
 80a054c:	4604      	mov	r4, r0
    unsigned long temp_period_high = pulseIn(TEMPERATURE_PIN, HIGH);
 80a054e:	2005      	movs	r0, #5
 80a0550:	f001 fba7 	bl	80a1ca2 <pulseIn>
    return (1000000.0 * (1.0/(float)(temp_period_low + temp_period_high)));
 80a0554:	4420      	add	r0, r4
 80a0556:	f002 fac9 	bl	80a2aec <__aeabi_ui2f>
 80a055a:	f001 feb3 	bl	80a22c4 <__aeabi_f2d>
 80a055e:	4602      	mov	r2, r0
 80a0560:	460b      	mov	r3, r1
 80a0562:	2000      	movs	r0, #0
 80a0564:	490a      	ldr	r1, [pc, #40]	; (80a0590 <_ZN8HaySense20get_temperature_freqEv+0x58>)
 80a0566:	f002 f82b 	bl	80a25c0 <__aeabi_ddiv>
 80a056a:	a305      	add	r3, pc, #20	; (adr r3, 80a0580 <_ZN8HaySense20get_temperature_freqEv+0x48>)
 80a056c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a0570:	f001 fefc 	bl	80a236c <__aeabi_dmul>
 80a0574:	f002 f9b4 	bl	80a28e0 <__aeabi_d2f>
}
 80a0578:	bd10      	pop	{r4, pc}
 80a057a:	bf00      	nop
 80a057c:	f3af 8000 	nop.w
 80a0580:	00000000 	.word	0x00000000
 80a0584:	412e8480 	.word	0x412e8480
 80a0588:	080a332b 	.word	0x080a332b
 80a058c:	2000044c 	.word	0x2000044c
 80a0590:	3ff00000 	.word	0x3ff00000

080a0594 <_ZN8HaySense17get_moisture_freqEv>:

float HaySense::get_moisture_freq(void){
 80a0594:	b508      	push	{r3, lr}
    while(!mycounter.ready());
 80a0596:	4806      	ldr	r0, [pc, #24]	; (80a05b0 <_ZN8HaySense17get_moisture_freqEv+0x1c>)
 80a0598:	f7ff ff6d 	bl	80a0476 <_ZN17FreqPeriodCounter5readyEv>
 80a059c:	2800      	cmp	r0, #0
 80a059e:	d0fa      	beq.n	80a0596 <_ZN8HaySense17get_moisture_freqEv+0x2>
    return mycounter.hertz();
 80a05a0:	2101      	movs	r1, #1
 80a05a2:	4803      	ldr	r0, [pc, #12]	; (80a05b0 <_ZN8HaySense17get_moisture_freqEv+0x1c>)
 80a05a4:	f7ff ff6e 	bl	80a0484 <_ZN17FreqPeriodCounter5hertzEj>
 80a05a8:	f002 faa0 	bl	80a2aec <__aeabi_ui2f>
}
 80a05ac:	bd08      	pop	{r3, pc}
 80a05ae:	bf00      	nop
 80a05b0:	200003c4 	.word	0x200003c4

080a05b4 <_ZN8HaySense16power_on_sensorsEv>:

void HaySense::power_on_sensors(){
 80a05b4:	b508      	push	{r3, lr}
    Log.trace("Powering on sensors");
 80a05b6:	4906      	ldr	r1, [pc, #24]	; (80a05d0 <_ZN8HaySense16power_on_sensorsEv+0x1c>)
 80a05b8:	4806      	ldr	r0, [pc, #24]	; (80a05d4 <_ZN8HaySense16power_on_sensorsEv+0x20>)
 80a05ba:	f7ff ffa4 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80a05be:	4b06      	ldr	r3, [pc, #24]	; (80a05d8 <_ZN8HaySense16power_on_sensorsEv+0x24>)
 80a05c0:	681b      	ldr	r3, [r3, #0]
 80a05c2:	f8d3 20a8 	ldr.w	r2, [r3, #168]	; 0xa8
 80a05c6:	f8b3 30ac 	ldrh.w	r3, [r3, #172]	; 0xac
 80a05ca:	8353      	strh	r3, [r2, #26]
 80a05cc:	bd08      	pop	{r3, pc}
 80a05ce:	bf00      	nop
 80a05d0:	080a334a 	.word	0x080a334a
 80a05d4:	2000044c 	.word	0x2000044c
 80a05d8:	200003c0 	.word	0x200003c0

080a05dc <_ZN8HaySenseC1Ev>:
#include "HaySense.h"
#include "Particle.h"

FreqPeriodCounter mycounter(MOISTURE_PIN, micros, 0);

HaySense::HaySense()
 80a05dc:	b530      	push	{r4, r5, lr}
{
    pinMode(MOISTURE_PIN, INPUT_PULLDOWN);
 80a05de:	2103      	movs	r1, #3
#include "HaySense.h"
#include "Particle.h"

FreqPeriodCounter mycounter(MOISTURE_PIN, micros, 0);

HaySense::HaySense()
 80a05e0:	b087      	sub	sp, #28
 80a05e2:	4604      	mov	r4, r0
{
    pinMode(MOISTURE_PIN, INPUT_PULLDOWN);
 80a05e4:	2004      	movs	r0, #4
 80a05e6:	f001 fb21 	bl	80a1c2c <pinMode>
    pinMode(TEMPERATURE_PIN, INPUT_PULLDOWN);
 80a05ea:	2103      	movs	r1, #3
 80a05ec:	2005      	movs	r0, #5
 80a05ee:	f001 fb1d 	bl	80a1c2c <pinMode>
    pinMode(SENSOR_POWER_PIN, OUTPUT);
 80a05f2:	2006      	movs	r0, #6
 80a05f4:	2101      	movs	r1, #1
 80a05f6:	f001 fb19 	bl	80a1c2c <pinMode>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a05fa:	2500      	movs	r5, #0
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a05fc:	200c      	movs	r0, #12
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a05fe:	9504      	str	r5, [sp, #16]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0600:	f7ff fd4b 	bl	80a009a <_Znwj>
 80a0604:	b118      	cbz	r0, 80a060e <_ZN8HaySenseC1Ev+0x32>
	{ }

      _Bind(const _Bind&) = default;

      _Bind(_Bind&& __b)
      : _M_f(std::move(__b._M_f)), _M_bound_args(std::move(__b._M_bound_args))
 80a0606:	4b0e      	ldr	r3, [pc, #56]	; (80a0640 <_ZN8HaySenseC1Ev+0x64>)
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 80a0608:	6084      	str	r4, [r0, #8]
 80a060a:	e880 0028 	stmia.w	r0, {r3, r5}
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a060e:	4b0d      	ldr	r3, [pc, #52]	; (80a0644 <_ZN8HaySenseC1Ev+0x68>)
bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0);
template <typename T>
bool attachInterrupt(uint16_t pin, void (T::*handler)(), T *instance, InterruptMode mode, int8_t priority = -1, uint8_t subpriority = 0) {
    using namespace std::placeholders;
    return attachInterrupt(pin, std::bind(handler, instance), mode, priority, subpriority);
 80a0610:	2200      	movs	r2, #0
 80a0612:	9305      	str	r3, [sp, #20]
	    _M_manager = &_My_handler::_M_manager;
 80a0614:	4b0c      	ldr	r3, [pc, #48]	; (80a0648 <_ZN8HaySenseC1Ev+0x6c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0616:	9002      	str	r0, [sp, #8]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
 80a0618:	9304      	str	r3, [sp, #16]
 80a061a:	9200      	str	r2, [sp, #0]
 80a061c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80a0620:	a902      	add	r1, sp, #8
 80a0622:	2004      	movs	r0, #4
 80a0624:	f000 fe2c 	bl	80a1280 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0628:	9b04      	ldr	r3, [sp, #16]
 80a062a:	b11b      	cbz	r3, 80a0634 <_ZN8HaySenseC1Ev+0x58>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a062c:	a902      	add	r1, sp, #8
 80a062e:	2203      	movs	r2, #3
 80a0630:	4608      	mov	r0, r1
 80a0632:	4798      	blx	r3
    attachInterrupt(MOISTURE_PIN, &HaySense::counterISR, this, CHANGE);
    power_on_sensors();
 80a0634:	4620      	mov	r0, r4
 80a0636:	f7ff ffbd 	bl	80a05b4 <_ZN8HaySense16power_on_sensorsEv>
    // be sure not to call anything that requires hardware be initialized here,
    // put those in begin()
}
 80a063a:	4620      	mov	r0, r4
 80a063c:	b007      	add	sp, #28
 80a063e:	bd30      	pop	{r4, r5, pc}
 80a0640:	080a04c5 	.word	0x080a04c5
 80a0644:	080a04a9 	.word	0x080a04a9
 80a0648:	080a04d1 	.word	0x080a04d1
 80a064c:	00000000 	.word	0x00000000

080a0650 <_ZN8HaySense19get_battery_voltageEv>:

void HaySense::power_off_sensors(){
    pinSetFast(SENSOR_POWER_PIN); //turn off sensors
}

float HaySense::get_battery_voltage(void){
 80a0650:	b508      	push	{r3, lr}
    Log.trace("Getting battery voltage.");
 80a0652:	490b      	ldr	r1, [pc, #44]	; (80a0680 <_ZN8HaySense19get_battery_voltageEv+0x30>)
 80a0654:	480b      	ldr	r0, [pc, #44]	; (80a0684 <_ZN8HaySense19get_battery_voltageEv+0x34>)
 80a0656:	f7ff ff56 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    // Funky math Andrew M. worked out to convert the analogRead value to the
    // proper battery voltage value.
    return (float)analogRead(BATTERY_PIN) * ((3.3*2.0)/(4095.0*0.914));
 80a065a:	200f      	movs	r0, #15
 80a065c:	f001 fb0a 	bl	80a1c74 <analogRead>
 80a0660:	f002 fa48 	bl	80a2af4 <__aeabi_i2f>
 80a0664:	f001 fe2e 	bl	80a22c4 <__aeabi_f2d>
 80a0668:	a303      	add	r3, pc, #12	; (adr r3, 80a0678 <_ZN8HaySense19get_battery_voltageEv+0x28>)
 80a066a:	e9d3 2300 	ldrd	r2, r3, [r3]
 80a066e:	f001 fe7d 	bl	80a236c <__aeabi_dmul>
 80a0672:	f002 f935 	bl	80a28e0 <__aeabi_d2f>
}
 80a0676:	bd08      	pop	{r3, pc}
 80a0678:	cd58a201 	.word	0xcd58a201
 80a067c:	3f5ce41d 	.word	0x3f5ce41d
 80a0680:	080a335e 	.word	0x080a335e
 80a0684:	2000044c 	.word	0x2000044c

080a0688 <_ZN9ConverterC1EPfS0_>:
	mycounter.poll();
}

Converter::Converter(float *moist_constants, float *temp_constants){
    moisture_constants = moist_constants;
    temperature_constants = temp_constants;
 80a0688:	e880 0006 	stmia.w	r0, {r1, r2}
}
 80a068c:	4770      	bx	lr
	...

080a0690 <_ZN9Converter14GetTemperatureEf>:

float Converter::GetTemperature(float temp_hz){
 80a0690:	b538      	push	{r3, r4, r5, lr}
 80a0692:	4604      	mov	r4, r0
 80a0694:	460d      	mov	r5, r1
  Log.trace("Converting temperature.");
 80a0696:	4806      	ldr	r0, [pc, #24]	; (80a06b0 <_ZN9Converter14GetTemperatureEf+0x20>)
 80a0698:	4906      	ldr	r1, [pc, #24]	; (80a06b4 <_ZN9Converter14GetTemperatureEf+0x24>)
 80a069a:	f7ff ff34 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
  //temperature_hz = temp_hz;
  return temperature_constants[0] * temp_hz + temperature_constants[1];
 80a069e:	6864      	ldr	r4, [r4, #4]
 80a06a0:	4628      	mov	r0, r5
 80a06a2:	6821      	ldr	r1, [r4, #0]
 80a06a4:	f002 fa7a 	bl	80a2b9c <__aeabi_fmul>
 80a06a8:	6861      	ldr	r1, [r4, #4]
 80a06aa:	f002 f96f 	bl	80a298c <__addsf3>
}
 80a06ae:	bd38      	pop	{r3, r4, r5, pc}
 80a06b0:	2000044c 	.word	0x2000044c
 80a06b4:	080a3377 	.word	0x080a3377

080a06b8 <_ZN9Converter5y_100Ef>:
float Converter::slope_prime(float temperature_hz){
    float sp = 100/(y_0(temperature_hz) - y_100(temperature_hz));
    Log.trace("slope_prime: %f", sp);
    return sp;
}
float Converter::y_100(float temperature_hz){
 80a06b8:	460b      	mov	r3, r1
 80a06ba:	b510      	push	{r4, lr}
	float y100 = moisture_constants[2] * temperature_hz + moisture_constants[3];
 80a06bc:	6804      	ldr	r4, [r0, #0]
 80a06be:	4618      	mov	r0, r3
 80a06c0:	68a1      	ldr	r1, [r4, #8]
 80a06c2:	f002 fa6b 	bl	80a2b9c <__aeabi_fmul>
 80a06c6:	68e1      	ldr	r1, [r4, #12]
 80a06c8:	f002 f960 	bl	80a298c <__addsf3>
 80a06cc:	4604      	mov	r4, r0
    Log.trace("y_100: %f", y100);
 80a06ce:	f001 fdf9 	bl	80a22c4 <__aeabi_f2d>
 80a06d2:	4602      	mov	r2, r0
 80a06d4:	460b      	mov	r3, r1
 80a06d6:	4803      	ldr	r0, [pc, #12]	; (80a06e4 <_ZN9Converter5y_100Ef+0x2c>)
 80a06d8:	4903      	ldr	r1, [pc, #12]	; (80a06e8 <_ZN9Converter5y_100Ef+0x30>)
 80a06da:	f7ff ff14 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    return y100;
}
 80a06de:	4620      	mov	r0, r4
 80a06e0:	bd10      	pop	{r4, pc}
 80a06e2:	bf00      	nop
 80a06e4:	2000044c 	.word	0x2000044c
 80a06e8:	080a338f 	.word	0x080a338f

080a06ec <_ZN9Converter3y_0Ef>:

float Converter::y_0(float temperature_hz){
 80a06ec:	460b      	mov	r3, r1
 80a06ee:	b510      	push	{r4, lr}
  float y0 = moisture_constants[0] * temperature_hz + moisture_constants[1];
 80a06f0:	6804      	ldr	r4, [r0, #0]
 80a06f2:	4618      	mov	r0, r3
 80a06f4:	6821      	ldr	r1, [r4, #0]
 80a06f6:	f002 fa51 	bl	80a2b9c <__aeabi_fmul>
 80a06fa:	6861      	ldr	r1, [r4, #4]
 80a06fc:	f002 f946 	bl	80a298c <__addsf3>
 80a0700:	4604      	mov	r4, r0
  Log.trace("y_0: %f", y0);
 80a0702:	f001 fddf 	bl	80a22c4 <__aeabi_f2d>
 80a0706:	4602      	mov	r2, r0
 80a0708:	460b      	mov	r3, r1
 80a070a:	4803      	ldr	r0, [pc, #12]	; (80a0718 <_ZN9Converter3y_0Ef+0x2c>)
 80a070c:	4903      	ldr	r1, [pc, #12]	; (80a071c <_ZN9Converter3y_0Ef+0x30>)
 80a070e:	f7ff fefa 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
  return y0;
}
 80a0712:	4620      	mov	r0, r4
 80a0714:	bd10      	pop	{r4, pc}
 80a0716:	bf00      	nop
 80a0718:	2000044c 	.word	0x2000044c
 80a071c:	080a3399 	.word	0x080a3399

080a0720 <_ZN9Converter11slope_primeEf>:
    float ip = -slope_prime(temperature_hz) * y_0(temperature_hz);
    Log.trace("intercept_prime: %f", ip);
    return ip;
}

float Converter::slope_prime(float temperature_hz){
 80a0720:	b570      	push	{r4, r5, r6, lr}
 80a0722:	4605      	mov	r5, r0
 80a0724:	460e      	mov	r6, r1
    float sp = 100/(y_0(temperature_hz) - y_100(temperature_hz));
 80a0726:	f7ff ffe1 	bl	80a06ec <_ZN9Converter3y_0Ef>
 80a072a:	4631      	mov	r1, r6
 80a072c:	4604      	mov	r4, r0
 80a072e:	4628      	mov	r0, r5
 80a0730:	f7ff ffc2 	bl	80a06b8 <_ZN9Converter5y_100Ef>
 80a0734:	4601      	mov	r1, r0
 80a0736:	4620      	mov	r0, r4
 80a0738:	f002 f926 	bl	80a2988 <__aeabi_fsub>
 80a073c:	4601      	mov	r1, r0
 80a073e:	4807      	ldr	r0, [pc, #28]	; (80a075c <_ZN9Converter11slope_primeEf+0x3c>)
 80a0740:	f002 fae0 	bl	80a2d04 <__aeabi_fdiv>
 80a0744:	4604      	mov	r4, r0
    Log.trace("slope_prime: %f", sp);
 80a0746:	f001 fdbd 	bl	80a22c4 <__aeabi_f2d>
 80a074a:	4602      	mov	r2, r0
 80a074c:	460b      	mov	r3, r1
 80a074e:	4804      	ldr	r0, [pc, #16]	; (80a0760 <_ZN9Converter11slope_primeEf+0x40>)
 80a0750:	4904      	ldr	r1, [pc, #16]	; (80a0764 <_ZN9Converter11slope_primeEf+0x44>)
 80a0752:	f7ff fed8 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    return sp;
}
 80a0756:	4620      	mov	r0, r4
 80a0758:	bd70      	pop	{r4, r5, r6, pc}
 80a075a:	bf00      	nop
 80a075c:	42c80000 	.word	0x42c80000
 80a0760:	2000044c 	.word	0x2000044c
 80a0764:	080a33a1 	.word	0x080a33a1

080a0768 <_ZN9Converter15intercept_primeEf>:
  Log.trace("Converting moisture.");
  //float temperature_hz = temp_hz;
  return moist_hz * slope_prime(temp_hz) + intercept_prime(temp_hz);
}

float Converter::intercept_prime(float temperature_hz){
 80a0768:	b570      	push	{r4, r5, r6, lr}
 80a076a:	4605      	mov	r5, r0
 80a076c:	460e      	mov	r6, r1
    float ip = -slope_prime(temperature_hz) * y_0(temperature_hz);
 80a076e:	f7ff ffd7 	bl	80a0720 <_ZN9Converter11slope_primeEf>
 80a0772:	4631      	mov	r1, r6
 80a0774:	4604      	mov	r4, r0
 80a0776:	4628      	mov	r0, r5
 80a0778:	f7ff ffb8 	bl	80a06ec <_ZN9Converter3y_0Ef>
 80a077c:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80a0780:	4601      	mov	r1, r0
 80a0782:	4620      	mov	r0, r4
 80a0784:	f002 fa0a 	bl	80a2b9c <__aeabi_fmul>
 80a0788:	4604      	mov	r4, r0
    Log.trace("intercept_prime: %f", ip);
 80a078a:	f001 fd9b 	bl	80a22c4 <__aeabi_f2d>
 80a078e:	4602      	mov	r2, r0
 80a0790:	460b      	mov	r3, r1
 80a0792:	4803      	ldr	r0, [pc, #12]	; (80a07a0 <_ZN9Converter15intercept_primeEf+0x38>)
 80a0794:	4903      	ldr	r1, [pc, #12]	; (80a07a4 <_ZN9Converter15intercept_primeEf+0x3c>)
 80a0796:	f7ff feb6 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
    return ip;
}
 80a079a:	4620      	mov	r0, r4
 80a079c:	bd70      	pop	{r4, r5, r6, pc}
 80a079e:	bf00      	nop
 80a07a0:	2000044c 	.word	0x2000044c
 80a07a4:	080a33b1 	.word	0x080a33b1

080a07a8 <_ZN9Converter11GetMoistureEff>:
  Log.trace("Converting temperature.");
  //temperature_hz = temp_hz;
  return temperature_constants[0] * temp_hz + temperature_constants[1];
}

float Converter::GetMoisture(float temp_hz, float moist_hz){
 80a07a8:	b570      	push	{r4, r5, r6, lr}
 80a07aa:	4604      	mov	r4, r0
 80a07ac:	460d      	mov	r5, r1
 80a07ae:	4616      	mov	r6, r2
  Log.trace("Converting moisture.");
 80a07b0:	490a      	ldr	r1, [pc, #40]	; (80a07dc <_ZN9Converter11GetMoistureEff+0x34>)
 80a07b2:	480b      	ldr	r0, [pc, #44]	; (80a07e0 <_ZN9Converter11GetMoistureEff+0x38>)
 80a07b4:	f7ff fea7 	bl	80a0506 <_ZNK5spark6Logger5traceEPKcz>
  //float temperature_hz = temp_hz;
  return moist_hz * slope_prime(temp_hz) + intercept_prime(temp_hz);
 80a07b8:	4629      	mov	r1, r5
 80a07ba:	4620      	mov	r0, r4
 80a07bc:	f7ff ffb0 	bl	80a0720 <_ZN9Converter11slope_primeEf>
 80a07c0:	4631      	mov	r1, r6
 80a07c2:	f002 f9eb 	bl	80a2b9c <__aeabi_fmul>
 80a07c6:	4629      	mov	r1, r5
 80a07c8:	4606      	mov	r6, r0
 80a07ca:	4620      	mov	r0, r4
 80a07cc:	f7ff ffcc 	bl	80a0768 <_ZN9Converter15intercept_primeEf>
 80a07d0:	4601      	mov	r1, r0
 80a07d2:	4630      	mov	r0, r6
 80a07d4:	f002 f8da 	bl	80a298c <__addsf3>
}
 80a07d8:	bd70      	pop	{r4, r5, r6, pc}
 80a07da:	bf00      	nop
 80a07dc:	080a33c5 	.word	0x080a33c5
 80a07e0:	2000044c 	.word	0x2000044c

080a07e4 <_GLOBAL__sub_I_mycounter>:

float Converter::y_0(float temperature_hz){
  float y0 = moisture_constants[0] * temperature_hz + moisture_constants[1];
  Log.trace("y_0: %f", y0);
  return y0;
}
 80a07e4:	b510      	push	{r4, lr}
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80a07e6:	f000 f839 	bl	80a085c <HAL_Pin_Map>
 80a07ea:	4b05      	ldr	r3, [pc, #20]	; (80a0800 <_GLOBAL__sub_I_mycounter+0x1c>)
 */

#include "HaySense.h"
#include "Particle.h"

FreqPeriodCounter mycounter(MOISTURE_PIN, micros, 0);
 80a07ec:	4a05      	ldr	r2, [pc, #20]	; (80a0804 <_GLOBAL__sub_I_mycounter+0x20>)
 80a07ee:	6018      	str	r0, [r3, #0]
 80a07f0:	2104      	movs	r1, #4
 80a07f2:	2300      	movs	r3, #0
 80a07f4:	4804      	ldr	r0, [pc, #16]	; (80a0808 <_GLOBAL__sub_I_mycounter+0x24>)

float Converter::y_0(float temperature_hz){
  float y0 = moisture_constants[0] * temperature_hz + moisture_constants[1];
  Log.trace("y_0: %f", y0);
  return y0;
}
 80a07f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 */

#include "HaySense.h"
#include "Particle.h"

FreqPeriodCounter mycounter(MOISTURE_PIN, micros, 0);
 80a07fa:	f7ff bdf5 	b.w	80a03e8 <_ZN17FreqPeriodCounterC1EhPFmvEj>
 80a07fe:	bf00      	nop
 80a0800:	200003c0 	.word	0x200003c0
 80a0804:	080a03e5 	.word	0x080a03e5
 80a0808:	200003c4 	.word	0x200003c4

080a080c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80a080c:	b508      	push	{r3, lr}
 80a080e:	4b02      	ldr	r3, [pc, #8]	; (80a0818 <os_mutex_create+0xc>)
 80a0810:	681b      	ldr	r3, [r3, #0]
 80a0812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0814:	9301      	str	r3, [sp, #4]
 80a0816:	bd08      	pop	{r3, pc}
 80a0818:	080601d0 	.word	0x080601d0

080a081c <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 80a081c:	b508      	push	{r3, lr}
 80a081e:	4b02      	ldr	r3, [pc, #8]	; (80a0828 <HAL_Core_Get_Last_Reset_Info+0xc>)
 80a0820:	681b      	ldr	r3, [r3, #0]
 80a0822:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0824:	9301      	str	r3, [sp, #4]
 80a0826:	bd08      	pop	{r3, pc}
 80a0828:	080601b8 	.word	0x080601b8

080a082c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80a082c:	b508      	push	{r3, lr}
 80a082e:	4b02      	ldr	r3, [pc, #8]	; (80a0838 <HAL_RNG_GetRandomNumber+0xc>)
 80a0830:	681b      	ldr	r3, [r3, #0]
 80a0832:	685b      	ldr	r3, [r3, #4]
 80a0834:	9301      	str	r3, [sp, #4]
 80a0836:	bd08      	pop	{r3, pc}
 80a0838:	0806019c 	.word	0x0806019c

080a083c <HAL_Timer_Get_Micro_Seconds>:
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
 80a083c:	b508      	push	{r3, lr}
 80a083e:	4b02      	ldr	r3, [pc, #8]	; (80a0848 <HAL_Timer_Get_Micro_Seconds+0xc>)
 80a0840:	681b      	ldr	r3, [r3, #0]
 80a0842:	691b      	ldr	r3, [r3, #16]
 80a0844:	9301      	str	r3, [sp, #4]
 80a0846:	bd08      	pop	{r3, pc}
 80a0848:	0806019c 	.word	0x0806019c

080a084c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80a084c:	b508      	push	{r3, lr}
 80a084e:	4b02      	ldr	r3, [pc, #8]	; (80a0858 <HAL_Timer_Get_Milli_Seconds+0xc>)
 80a0850:	681b      	ldr	r3, [r3, #0]
 80a0852:	695b      	ldr	r3, [r3, #20]
 80a0854:	9301      	str	r3, [sp, #4]
 80a0856:	bd08      	pop	{r3, pc}
 80a0858:	0806019c 	.word	0x0806019c

080a085c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 80a085c:	b508      	push	{r3, lr}
 80a085e:	4b02      	ldr	r3, [pc, #8]	; (80a0868 <HAL_Pin_Map+0xc>)
 80a0860:	681b      	ldr	r3, [r3, #0]
 80a0862:	681b      	ldr	r3, [r3, #0]
 80a0864:	9301      	str	r3, [sp, #4]
 80a0866:	bd08      	pop	{r3, pc}
 80a0868:	080601b0 	.word	0x080601b0

080a086c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 80a086c:	b508      	push	{r3, lr}
 80a086e:	4b02      	ldr	r3, [pc, #8]	; (80a0878 <HAL_Validate_Pin_Function+0xc>)
 80a0870:	681b      	ldr	r3, [r3, #0]
 80a0872:	685b      	ldr	r3, [r3, #4]
 80a0874:	9301      	str	r3, [sp, #4]
 80a0876:	bd08      	pop	{r3, pc}
 80a0878:	080601b0 	.word	0x080601b0

080a087c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 80a087c:	b508      	push	{r3, lr}
 80a087e:	4b02      	ldr	r3, [pc, #8]	; (80a0888 <HAL_Pin_Mode+0xc>)
 80a0880:	681b      	ldr	r3, [r3, #0]
 80a0882:	689b      	ldr	r3, [r3, #8]
 80a0884:	9301      	str	r3, [sp, #4]
 80a0886:	bd08      	pop	{r3, pc}
 80a0888:	080601b0 	.word	0x080601b0

080a088c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 80a088c:	b508      	push	{r3, lr}
 80a088e:	4b02      	ldr	r3, [pc, #8]	; (80a0898 <HAL_Get_Pin_Mode+0xc>)
 80a0890:	681b      	ldr	r3, [r3, #0]
 80a0892:	68db      	ldr	r3, [r3, #12]
 80a0894:	9301      	str	r3, [sp, #4]
 80a0896:	bd08      	pop	{r3, pc}
 80a0898:	080601b0 	.word	0x080601b0

080a089c <HAL_GPIO_Read>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 80a089c:	b508      	push	{r3, lr}
 80a089e:	4b02      	ldr	r3, [pc, #8]	; (80a08a8 <HAL_GPIO_Read+0xc>)
 80a08a0:	681b      	ldr	r3, [r3, #0]
 80a08a2:	695b      	ldr	r3, [r3, #20]
 80a08a4:	9301      	str	r3, [sp, #4]
 80a08a6:	bd08      	pop	{r3, pc}
 80a08a8:	080601b0 	.word	0x080601b0

080a08ac <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 80a08ac:	b508      	push	{r3, lr}
 80a08ae:	4b02      	ldr	r3, [pc, #8]	; (80a08b8 <HAL_Interrupts_Attach+0xc>)
 80a08b0:	681b      	ldr	r3, [r3, #0]
 80a08b2:	699b      	ldr	r3, [r3, #24]
 80a08b4:	9301      	str	r3, [sp, #4]
 80a08b6:	bd08      	pop	{r3, pc}
 80a08b8:	080601b0 	.word	0x080601b0

080a08bc <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 80a08bc:	b508      	push	{r3, lr}
 80a08be:	4b02      	ldr	r3, [pc, #8]	; (80a08c8 <HAL_Interrupts_Detach+0xc>)
 80a08c0:	681b      	ldr	r3, [r3, #0]
 80a08c2:	69db      	ldr	r3, [r3, #28]
 80a08c4:	9301      	str	r3, [sp, #4]
 80a08c6:	bd08      	pop	{r3, pc}
 80a08c8:	080601b0 	.word	0x080601b0

080a08cc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 80a08cc:	b508      	push	{r3, lr}
 80a08ce:	4b02      	ldr	r3, [pc, #8]	; (80a08d8 <HAL_ADC_Read+0xc>)
 80a08d0:	681b      	ldr	r3, [r3, #0]
 80a08d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a08d4:	9301      	str	r3, [sp, #4]
 80a08d6:	bd08      	pop	{r3, pc}
 80a08d8:	080601b0 	.word	0x080601b0

080a08dc <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 80a08dc:	b508      	push	{r3, lr}
 80a08de:	4b02      	ldr	r3, [pc, #8]	; (80a08e8 <HAL_Pulse_In+0xc>)
 80a08e0:	681b      	ldr	r3, [r3, #0]
 80a08e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a08e4:	9301      	str	r3, [sp, #4]
 80a08e6:	bd08      	pop	{r3, pc}
 80a08e8:	080601b0 	.word	0x080601b0

080a08ec <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80a08ec:	b508      	push	{r3, lr}
 80a08ee:	4b02      	ldr	r3, [pc, #8]	; (80a08f8 <HAL_I2C_Write_Data+0xc>)
 80a08f0:	681b      	ldr	r3, [r3, #0]
 80a08f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80a08f4:	9301      	str	r3, [sp, #4]
 80a08f6:	bd08      	pop	{r3, pc}
 80a08f8:	080601ac 	.word	0x080601ac

080a08fc <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80a08fc:	b508      	push	{r3, lr}
 80a08fe:	4b02      	ldr	r3, [pc, #8]	; (80a0908 <HAL_I2C_Available_Data+0xc>)
 80a0900:	681b      	ldr	r3, [r3, #0]
 80a0902:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80a0904:	9301      	str	r3, [sp, #4]
 80a0906:	bd08      	pop	{r3, pc}
 80a0908:	080601ac 	.word	0x080601ac

080a090c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 80a090c:	b508      	push	{r3, lr}
 80a090e:	4b02      	ldr	r3, [pc, #8]	; (80a0918 <HAL_I2C_Read_Data+0xc>)
 80a0910:	681b      	ldr	r3, [r3, #0]
 80a0912:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80a0914:	9301      	str	r3, [sp, #4]
 80a0916:	bd08      	pop	{r3, pc}
 80a0918:	080601ac 	.word	0x080601ac

080a091c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80a091c:	b508      	push	{r3, lr}
 80a091e:	4b02      	ldr	r3, [pc, #8]	; (80a0928 <HAL_I2C_Peek_Data+0xc>)
 80a0920:	681b      	ldr	r3, [r3, #0]
 80a0922:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80a0924:	9301      	str	r3, [sp, #4]
 80a0926:	bd08      	pop	{r3, pc}
 80a0928:	080601ac 	.word	0x080601ac

080a092c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80a092c:	b508      	push	{r3, lr}
 80a092e:	4b02      	ldr	r3, [pc, #8]	; (80a0938 <HAL_I2C_Flush_Data+0xc>)
 80a0930:	681b      	ldr	r3, [r3, #0]
 80a0932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80a0934:	9301      	str	r3, [sp, #4]
 80a0936:	bd08      	pop	{r3, pc}
 80a0938:	080601ac 	.word	0x080601ac

080a093c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80a093c:	b508      	push	{r3, lr}
 80a093e:	4b02      	ldr	r3, [pc, #8]	; (80a0948 <HAL_I2C_Is_Enabled+0xc>)
 80a0940:	681b      	ldr	r3, [r3, #0]
 80a0942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80a0944:	9301      	str	r3, [sp, #4]
 80a0946:	bd08      	pop	{r3, pc}
 80a0948:	080601ac 	.word	0x080601ac

080a094c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80a094c:	b508      	push	{r3, lr}
 80a094e:	4b03      	ldr	r3, [pc, #12]	; (80a095c <HAL_I2C_Init+0x10>)
 80a0950:	681b      	ldr	r3, [r3, #0]
 80a0952:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80a0956:	9301      	str	r3, [sp, #4]
 80a0958:	bd08      	pop	{r3, pc}
 80a095a:	0000      	.short	0x0000
 80a095c:	080601ac 	.word	0x080601ac

080a0960 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 80a0960:	b508      	push	{r3, lr}
 80a0962:	4b02      	ldr	r3, [pc, #8]	; (80a096c <HAL_SPI_Init+0xc>)
 80a0964:	681b      	ldr	r3, [r3, #0]
 80a0966:	69db      	ldr	r3, [r3, #28]
 80a0968:	9301      	str	r3, [sp, #4]
 80a096a:	bd08      	pop	{r3, pc}
 80a096c:	080601b4 	.word	0x080601b4

080a0970 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 80a0970:	b508      	push	{r3, lr}
 80a0972:	4b02      	ldr	r3, [pc, #8]	; (80a097c <HAL_SPI_Is_Enabled+0xc>)
 80a0974:	681b      	ldr	r3, [r3, #0]
 80a0976:	6a1b      	ldr	r3, [r3, #32]
 80a0978:	9301      	str	r3, [sp, #4]
 80a097a:	bd08      	pop	{r3, pc}
 80a097c:	080601b4 	.word	0x080601b4

080a0980 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 80a0980:	b508      	push	{r3, lr}
 80a0982:	4b02      	ldr	r3, [pc, #8]	; (80a098c <HAL_USART_Init+0xc>)
 80a0984:	681b      	ldr	r3, [r3, #0]
 80a0986:	699b      	ldr	r3, [r3, #24]
 80a0988:	9301      	str	r3, [sp, #4]
 80a098a:	bd08      	pop	{r3, pc}
 80a098c:	080601c4 	.word	0x080601c4

080a0990 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80a0990:	b508      	push	{r3, lr}
 80a0992:	4b02      	ldr	r3, [pc, #8]	; (80a099c <HAL_USART_Write_Data+0xc>)
 80a0994:	681b      	ldr	r3, [r3, #0]
 80a0996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80a0998:	9301      	str	r3, [sp, #4]
 80a099a:	bd08      	pop	{r3, pc}
 80a099c:	080601c4 	.word	0x080601c4

080a09a0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80a09a0:	b508      	push	{r3, lr}
 80a09a2:	4b02      	ldr	r3, [pc, #8]	; (80a09ac <HAL_USART_Available_Data+0xc>)
 80a09a4:	681b      	ldr	r3, [r3, #0]
 80a09a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a09a8:	9301      	str	r3, [sp, #4]
 80a09aa:	bd08      	pop	{r3, pc}
 80a09ac:	080601c4 	.word	0x080601c4

080a09b0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80a09b0:	b508      	push	{r3, lr}
 80a09b2:	4b02      	ldr	r3, [pc, #8]	; (80a09bc <HAL_USART_Read_Data+0xc>)
 80a09b4:	681b      	ldr	r3, [r3, #0]
 80a09b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a09b8:	9301      	str	r3, [sp, #4]
 80a09ba:	bd08      	pop	{r3, pc}
 80a09bc:	080601c4 	.word	0x080601c4

080a09c0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80a09c0:	b508      	push	{r3, lr}
 80a09c2:	4b02      	ldr	r3, [pc, #8]	; (80a09cc <HAL_USART_Peek_Data+0xc>)
 80a09c4:	681b      	ldr	r3, [r3, #0]
 80a09c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a09c8:	9301      	str	r3, [sp, #4]
 80a09ca:	bd08      	pop	{r3, pc}
 80a09cc:	080601c4 	.word	0x080601c4

080a09d0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80a09d0:	b508      	push	{r3, lr}
 80a09d2:	4b02      	ldr	r3, [pc, #8]	; (80a09dc <HAL_USART_Flush_Data+0xc>)
 80a09d4:	681b      	ldr	r3, [r3, #0]
 80a09d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80a09d8:	9301      	str	r3, [sp, #4]
 80a09da:	bd08      	pop	{r3, pc}
 80a09dc:	080601c4 	.word	0x080601c4

080a09e0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80a09e0:	b508      	push	{r3, lr}
 80a09e2:	4b02      	ldr	r3, [pc, #8]	; (80a09ec <HAL_USART_Is_Enabled+0xc>)
 80a09e4:	681b      	ldr	r3, [r3, #0]
 80a09e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80a09e8:	9301      	str	r3, [sp, #4]
 80a09ea:	bd08      	pop	{r3, pc}
 80a09ec:	080601c4 	.word	0x080601c4

080a09f0 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80a09f0:	b508      	push	{r3, lr}
 80a09f2:	4b02      	ldr	r3, [pc, #8]	; (80a09fc <HAL_USART_Available_Data_For_Write+0xc>)
 80a09f4:	681b      	ldr	r3, [r3, #0]
 80a09f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80a09f8:	9301      	str	r3, [sp, #4]
 80a09fa:	bd08      	pop	{r3, pc}
 80a09fc:	080601c4 	.word	0x080601c4

080a0a00 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 80a0a00:	b508      	push	{r3, lr}
 80a0a02:	4b02      	ldr	r3, [pc, #8]	; (80a0a0c <HAL_USB_USART_Init+0xc>)
 80a0a04:	681b      	ldr	r3, [r3, #0]
 80a0a06:	681b      	ldr	r3, [r3, #0]
 80a0a08:	9301      	str	r3, [sp, #4]
 80a0a0a:	bd08      	pop	{r3, pc}
 80a0a0c:	080601d8 	.word	0x080601d8

080a0a10 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
 80a0a10:	b508      	push	{r3, lr}
 80a0a12:	4b02      	ldr	r3, [pc, #8]	; (80a0a1c <HAL_USB_USART_Begin+0xc>)
 80a0a14:	681b      	ldr	r3, [r3, #0]
 80a0a16:	685b      	ldr	r3, [r3, #4]
 80a0a18:	9301      	str	r3, [sp, #4]
 80a0a1a:	bd08      	pop	{r3, pc}
 80a0a1c:	080601d8 	.word	0x080601d8

080a0a20 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 80a0a20:	b508      	push	{r3, lr}
 80a0a22:	4b02      	ldr	r3, [pc, #8]	; (80a0a2c <HAL_USB_USART_Available_Data+0xc>)
 80a0a24:	681b      	ldr	r3, [r3, #0]
 80a0a26:	691b      	ldr	r3, [r3, #16]
 80a0a28:	9301      	str	r3, [sp, #4]
 80a0a2a:	bd08      	pop	{r3, pc}
 80a0a2c:	080601d8 	.word	0x080601d8

080a0a30 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 80a0a30:	b508      	push	{r3, lr}
 80a0a32:	4b02      	ldr	r3, [pc, #8]	; (80a0a3c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 80a0a34:	681b      	ldr	r3, [r3, #0]
 80a0a36:	695b      	ldr	r3, [r3, #20]
 80a0a38:	9301      	str	r3, [sp, #4]
 80a0a3a:	bd08      	pop	{r3, pc}
 80a0a3c:	080601d8 	.word	0x080601d8

080a0a40 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a40:	b508      	push	{r3, lr}
 80a0a42:	4b02      	ldr	r3, [pc, #8]	; (80a0a4c <HAL_USB_USART_Receive_Data+0xc>)
 80a0a44:	681b      	ldr	r3, [r3, #0]
 80a0a46:	699b      	ldr	r3, [r3, #24]
 80a0a48:	9301      	str	r3, [sp, #4]
 80a0a4a:	bd08      	pop	{r3, pc}
 80a0a4c:	080601d8 	.word	0x080601d8

080a0a50 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 80a0a50:	b508      	push	{r3, lr}
 80a0a52:	4b02      	ldr	r3, [pc, #8]	; (80a0a5c <HAL_USB_USART_Send_Data+0xc>)
 80a0a54:	681b      	ldr	r3, [r3, #0]
 80a0a56:	69db      	ldr	r3, [r3, #28]
 80a0a58:	9301      	str	r3, [sp, #4]
 80a0a5a:	bd08      	pop	{r3, pc}
 80a0a5c:	080601d8 	.word	0x080601d8

080a0a60 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 80a0a60:	b508      	push	{r3, lr}
 80a0a62:	4b02      	ldr	r3, [pc, #8]	; (80a0a6c <HAL_USB_USART_Flush_Data+0xc>)
 80a0a64:	681b      	ldr	r3, [r3, #0]
 80a0a66:	6a1b      	ldr	r3, [r3, #32]
 80a0a68:	9301      	str	r3, [sp, #4]
 80a0a6a:	bd08      	pop	{r3, pc}
 80a0a6c:	080601d8 	.word	0x080601d8

080a0a70 <HAL_USB_USART_Is_Connected>:
DYNALIB_FN(9, hal_usb, HAL_USB_USART_Is_Enabled, bool(HAL_USB_USART_Serial))
DYNALIB_FN(10, hal_usb, HAL_USB_USART_Is_Connected, bool(HAL_USB_USART_Serial))
 80a0a70:	b508      	push	{r3, lr}
 80a0a72:	4b02      	ldr	r3, [pc, #8]	; (80a0a7c <HAL_USB_USART_Is_Connected+0xc>)
 80a0a74:	681b      	ldr	r3, [r3, #0]
 80a0a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80a0a78:	9301      	str	r3, [sp, #4]
 80a0a7a:	bd08      	pop	{r3, pc}
 80a0a7c:	080601d8 	.word	0x080601d8

080a0a80 <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
 80a0a80:	b508      	push	{r3, lr}
 80a0a82:	4b02      	ldr	r3, [pc, #8]	; (80a0a8c <log_message_v+0xc>)
 80a0a84:	681b      	ldr	r3, [r3, #0]
 80a0a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0a88:	9301      	str	r3, [sp, #4]
 80a0a8a:	bd08      	pop	{r3, pc}
 80a0a8c:	080201a8 	.word	0x080201a8

080a0a90 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 80a0a90:	b508      	push	{r3, lr}
 80a0a92:	4b02      	ldr	r3, [pc, #8]	; (80a0a9c <set_system_mode+0xc>)
 80a0a94:	681b      	ldr	r3, [r3, #0]
 80a0a96:	685b      	ldr	r3, [r3, #4]
 80a0a98:	9301      	str	r3, [sp, #4]
 80a0a9a:	bd08      	pop	{r3, pc}
 80a0a9c:	080601a4 	.word	0x080601a4

080a0aa0 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 80a0aa0:	b508      	push	{r3, lr}
 80a0aa2:	4b02      	ldr	r3, [pc, #8]	; (80a0aac <system_delay_ms+0xc>)
 80a0aa4:	681b      	ldr	r3, [r3, #0]
 80a0aa6:	695b      	ldr	r3, [r3, #20]
 80a0aa8:	9301      	str	r3, [sp, #4]
 80a0aaa:	bd08      	pop	{r3, pc}
 80a0aac:	080601a4 	.word	0x080601a4

080a0ab0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, void(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80a0ab0:	b508      	push	{r3, lr}
 80a0ab2:	4b02      	ldr	r3, [pc, #8]	; (80a0abc <system_sleep+0xc>)
 80a0ab4:	681b      	ldr	r3, [r3, #0]
 80a0ab6:	699b      	ldr	r3, [r3, #24]
 80a0ab8:	9301      	str	r3, [sp, #4]
 80a0aba:	bd08      	pop	{r3, pc}
 80a0abc:	080601a4 	.word	0x080601a4

080a0ac0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80a0ac0:	b508      	push	{r3, lr}
 80a0ac2:	4b02      	ldr	r3, [pc, #8]	; (80a0acc <application_thread_current+0xc>)
 80a0ac4:	681b      	ldr	r3, [r3, #0]
 80a0ac6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80a0ac8:	9301      	str	r3, [sp, #4]
 80a0aca:	bd08      	pop	{r3, pc}
 80a0acc:	080601a4 	.word	0x080601a4

080a0ad0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80a0ad0:	b508      	push	{r3, lr}
 80a0ad2:	4b02      	ldr	r3, [pc, #8]	; (80a0adc <application_thread_invoke+0xc>)
 80a0ad4:	681b      	ldr	r3, [r3, #0]
 80a0ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80a0ad8:	9301      	str	r3, [sp, #4]
 80a0ada:	bd08      	pop	{r3, pc}
 80a0adc:	080601a4 	.word	0x080601a4

080a0ae0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80a0ae0:	b508      	push	{r3, lr}
 80a0ae2:	4b03      	ldr	r3, [pc, #12]	; (80a0af0 <system_ctrl_set_app_request_handler+0x10>)
 80a0ae4:	681b      	ldr	r3, [r3, #0]
 80a0ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80a0aea:	9301      	str	r3, [sp, #4]
 80a0aec:	bd08      	pop	{r3, pc}
 80a0aee:	0000      	.short	0x0000
 80a0af0:	080601a4 	.word	0x080601a4

080a0af4 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80a0af4:	b508      	push	{r3, lr}
 80a0af6:	4b03      	ldr	r3, [pc, #12]	; (80a0b04 <system_ctrl_set_result+0x10>)
 80a0af8:	681b      	ldr	r3, [r3, #0]
 80a0afa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80a0afe:	9301      	str	r3, [sp, #4]
 80a0b00:	bd08      	pop	{r3, pc}
 80a0b02:	0000      	.short	0x0000
 80a0b04:	080601a4 	.word	0x080601a4

080a0b08 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 80a0b08:	b508      	push	{r3, lr}
 80a0b0a:	4b02      	ldr	r3, [pc, #8]	; (80a0b14 <spark_process+0xc>)
 80a0b0c:	681b      	ldr	r3, [r3, #0]
 80a0b0e:	689b      	ldr	r3, [r3, #8]
 80a0b10:	9301      	str	r3, [sp, #4]
 80a0b12:	bd08      	pop	{r3, pc}
 80a0b14:	080601cc 	.word	0x080601cc

080a0b18 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 80a0b18:	b508      	push	{r3, lr}
 80a0b1a:	4b02      	ldr	r3, [pc, #8]	; (80a0b24 <spark_cloud_flag_connect+0xc>)
 80a0b1c:	681b      	ldr	r3, [r3, #0]
 80a0b1e:	68db      	ldr	r3, [r3, #12]
 80a0b20:	9301      	str	r3, [sp, #4]
 80a0b22:	bd08      	pop	{r3, pc}
 80a0b24:	080601cc 	.word	0x080601cc

080a0b28 <spark_cloud_flag_connected>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 80a0b28:	b508      	push	{r3, lr}
 80a0b2a:	4b02      	ldr	r3, [pc, #8]	; (80a0b34 <spark_cloud_flag_connected+0xc>)
 80a0b2c:	681b      	ldr	r3, [r3, #0]
 80a0b2e:	695b      	ldr	r3, [r3, #20]
 80a0b30:	9301      	str	r3, [sp, #4]
 80a0b32:	bd08      	pop	{r3, pc}
 80a0b34:	080601cc 	.word	0x080601cc

080a0b38 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80a0b38:	b508      	push	{r3, lr}
 80a0b3a:	4b02      	ldr	r3, [pc, #8]	; (80a0b44 <spark_deviceID+0xc>)
 80a0b3c:	681b      	ldr	r3, [r3, #0]
 80a0b3e:	69db      	ldr	r3, [r3, #28]
 80a0b40:	9301      	str	r3, [sp, #4]
 80a0b42:	bd08      	pop	{r3, pc}
 80a0b44:	080601cc 	.word	0x080601cc

080a0b48 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80a0b48:	b508      	push	{r3, lr}
 80a0b4a:	4b02      	ldr	r3, [pc, #8]	; (80a0b54 <spark_send_event+0xc>)
 80a0b4c:	681b      	ldr	r3, [r3, #0]
 80a0b4e:	6a1b      	ldr	r3, [r3, #32]
 80a0b50:	9301      	str	r3, [sp, #4]
 80a0b52:	bd08      	pop	{r3, pc}
 80a0b54:	080601cc 	.word	0x080601cc

080a0b58 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 80a0b58:	b508      	push	{r3, lr}
 80a0b5a:	4b02      	ldr	r3, [pc, #8]	; (80a0b64 <spark_set_random_seed_from_cloud_handler+0xc>)
 80a0b5c:	681b      	ldr	r3, [r3, #0]
 80a0b5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80a0b60:	9301      	str	r3, [sp, #4]
 80a0b62:	bd08      	pop	{r3, pc}
 80a0b64:	080601cc 	.word	0x080601cc

080a0b68 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b68:	b508      	push	{r3, lr}
 80a0b6a:	4b02      	ldr	r3, [pc, #8]	; (80a0b74 <network_connect+0xc>)
 80a0b6c:	681b      	ldr	r3, [r3, #0]
 80a0b6e:	685b      	ldr	r3, [r3, #4]
 80a0b70:	9301      	str	r3, [sp, #4]
 80a0b72:	bd08      	pop	{r3, pc}
 80a0b74:	080601c8 	.word	0x080601c8

080a0b78 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 80a0b78:	b508      	push	{r3, lr}
 80a0b7a:	4b02      	ldr	r3, [pc, #8]	; (80a0b84 <network_connecting+0xc>)
 80a0b7c:	681b      	ldr	r3, [r3, #0]
 80a0b7e:	689b      	ldr	r3, [r3, #8]
 80a0b80:	9301      	str	r3, [sp, #4]
 80a0b82:	bd08      	pop	{r3, pc}
 80a0b84:	080601c8 	.word	0x080601c8

080a0b88 <network_ready>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 80a0b88:	b508      	push	{r3, lr}
 80a0b8a:	4b02      	ldr	r3, [pc, #8]	; (80a0b94 <network_ready+0xc>)
 80a0b8c:	681b      	ldr	r3, [r3, #0]
 80a0b8e:	691b      	ldr	r3, [r3, #16]
 80a0b90:	9301      	str	r3, [sp, #4]
 80a0b92:	bd08      	pop	{r3, pc}
 80a0b94:	080601c8 	.word	0x080601c8

080a0b98 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 80a0b98:	b508      	push	{r3, lr}
 80a0b9a:	4b02      	ldr	r3, [pc, #8]	; (80a0ba4 <network_on+0xc>)
 80a0b9c:	681b      	ldr	r3, [r3, #0]
 80a0b9e:	695b      	ldr	r3, [r3, #20]
 80a0ba0:	9301      	str	r3, [sp, #4]
 80a0ba2:	bd08      	pop	{r3, pc}
 80a0ba4:	080601c8 	.word	0x080601c8

080a0ba8 <malloc>:

#include "dynalib.h"

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80a0ba8:	b508      	push	{r3, lr}
 80a0baa:	4b02      	ldr	r3, [pc, #8]	; (80a0bb4 <malloc+0xc>)
 80a0bac:	681b      	ldr	r3, [r3, #0]
 80a0bae:	681b      	ldr	r3, [r3, #0]
 80a0bb0:	9301      	str	r3, [sp, #4]
 80a0bb2:	bd08      	pop	{r3, pc}
 80a0bb4:	080601a0 	.word	0x080601a0

080a0bb8 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80a0bb8:	b508      	push	{r3, lr}
 80a0bba:	4b02      	ldr	r3, [pc, #8]	; (80a0bc4 <free+0xc>)
 80a0bbc:	681b      	ldr	r3, [r3, #0]
 80a0bbe:	685b      	ldr	r3, [r3, #4]
 80a0bc0:	9301      	str	r3, [sp, #4]
 80a0bc2:	bd08      	pop	{r3, pc}
 80a0bc4:	080601a0 	.word	0x080601a0

080a0bc8 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80a0bc8:	b508      	push	{r3, lr}
 80a0bca:	4b02      	ldr	r3, [pc, #8]	; (80a0bd4 <realloc+0xc>)
 80a0bcc:	681b      	ldr	r3, [r3, #0]
 80a0bce:	689b      	ldr	r3, [r3, #8]
 80a0bd0:	9301      	str	r3, [sp, #4]
 80a0bd2:	bd08      	pop	{r3, pc}
 80a0bd4:	080601a0 	.word	0x080601a0

080a0bd8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80a0bd8:	b508      	push	{r3, lr}
 80a0bda:	4b02      	ldr	r3, [pc, #8]	; (80a0be4 <abort+0xc>)
 80a0bdc:	681b      	ldr	r3, [r3, #0]
 80a0bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80a0be0:	9301      	str	r3, [sp, #4]
 80a0be2:	bd08      	pop	{r3, pc}
 80a0be4:	080601a0 	.word	0x080601a0

080a0be8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 80a0be8:	b508      	push	{r3, lr}
 80a0bea:	4b02      	ldr	r3, [pc, #8]	; (80a0bf4 <_malloc_r+0xc>)
 80a0bec:	681b      	ldr	r3, [r3, #0]
 80a0bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80a0bf0:	9301      	str	r3, [sp, #4]
 80a0bf2:	bd08      	pop	{r3, pc}
 80a0bf4:	080601a0 	.word	0x080601a0

080a0bf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 80a0bf8:	2100      	movs	r1, #0
 80a0bfa:	f7ff bf51 	b.w	80a0aa0 <system_delay_ms>

080a0bfe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 80a0bfe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0c00:	6883      	ldr	r3, [r0, #8]
 80a0c02:	4604      	mov	r4, r0
 80a0c04:	b90b      	cbnz	r3, 80a0c0a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 80a0c06:	f001 f8ae 	bl	80a1d66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0c0a:	68c3      	ldr	r3, [r0, #12]
 80a0c0c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 80a0c0e:	68a3      	ldr	r3, [r4, #8]
 80a0c10:	b11b      	cbz	r3, 80a0c1a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0c12:	2203      	movs	r2, #3
 80a0c14:	4621      	mov	r1, r4
 80a0c16:	4620      	mov	r0, r4
 80a0c18:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0c1a:	4620      	mov	r0, r4
}
 80a0c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 80a0c20:	f7ff ba3d 	b.w	80a009e <_ZdlPv>

080a0c24 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0c24:	4770      	bx	lr

080a0c26 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 80a0c26:	2000      	movs	r0, #0
 80a0c28:	4770      	bx	lr

080a0c2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 80a0c2a:	b510      	push	{r4, lr}
 80a0c2c:	4604      	mov	r4, r0
 80a0c2e:	f7ff fa36 	bl	80a009e <_ZdlPv>
 80a0c32:	4620      	mov	r0, r4
 80a0c34:	bd10      	pop	{r4, pc}

080a0c36 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 80a0c36:	b508      	push	{r3, lr}
      { delete this; }
 80a0c38:	b108      	cbz	r0, 80a0c3e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 80a0c3a:	f7ff fff6 	bl	80a0c2a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 80a0c3e:	bd08      	pop	{r3, pc}

080a0c40 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0c40:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 80a0c42:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 80a0c44:	4604      	mov	r4, r0
    {
      if (_M_manager)
 80a0c46:	b113      	cbz	r3, 80a0c4e <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 80a0c48:	2203      	movs	r2, #3
 80a0c4a:	4601      	mov	r1, r0
 80a0c4c:	4798      	blx	r3
    }
 80a0c4e:	4620      	mov	r0, r4
 80a0c50:	bd10      	pop	{r4, pc}

080a0c52 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 80a0c52:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 80a0c54:	68c4      	ldr	r4, [r0, #12]
 80a0c56:	b1d4      	cbz	r4, 80a0c8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 80a0c58:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 80a0c5a:	2b02      	cmp	r3, #2
 80a0c5c:	d102      	bne.n	80a0c64 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0c5e:	68e0      	ldr	r0, [r4, #12]
 80a0c60:	f7ff ffaa 	bl	80a0bb8 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 80a0c64:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 80a0c66:	b12d      	cbz	r5, 80a0c74 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0c68:	4628      	mov	r0, r5
 80a0c6a:	f7ff ffe9 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
 80a0c6e:	4628      	mov	r0, r5
 80a0c70:	f7ff fa15 	bl	80a009e <_ZdlPv>
 80a0c74:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 80a0c76:	b12d      	cbz	r5, 80a0c84 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 80a0c78:	4628      	mov	r0, r5
 80a0c7a:	f7ff ffe1 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
 80a0c7e:	4628      	mov	r0, r5
 80a0c80:	f7ff fa0d 	bl	80a009e <_ZdlPv>
 80a0c84:	4620      	mov	r0, r4
 80a0c86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80a0c8a:	f7ff ba08 	b.w	80a009e <_ZdlPv>
 80a0c8e:	bd38      	pop	{r3, r4, r5, pc}

080a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0c90:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80a0c92:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80a0c94:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80a0c96:	b17c      	cbz	r4, 80a0cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80a0c98:	6863      	ldr	r3, [r4, #4]
 80a0c9a:	3b01      	subs	r3, #1
 80a0c9c:	6063      	str	r3, [r4, #4]
 80a0c9e:	b95b      	cbnz	r3, 80a0cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80a0ca0:	6823      	ldr	r3, [r4, #0]
 80a0ca2:	4620      	mov	r0, r4
 80a0ca4:	689b      	ldr	r3, [r3, #8]
 80a0ca6:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80a0ca8:	68a3      	ldr	r3, [r4, #8]
 80a0caa:	3b01      	subs	r3, #1
 80a0cac:	60a3      	str	r3, [r4, #8]
 80a0cae:	b91b      	cbnz	r3, 80a0cb8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80a0cb0:	6823      	ldr	r3, [r4, #0]
 80a0cb2:	4620      	mov	r0, r4
 80a0cb4:	68db      	ldr	r3, [r3, #12]
 80a0cb6:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80a0cb8:	4628      	mov	r0, r5
 80a0cba:	bd38      	pop	{r3, r4, r5, pc}

080a0cbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80a0cbc:	b513      	push	{r0, r1, r4, lr}
 80a0cbe:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80a0cc0:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80a0cc4:	2300      	movs	r3, #0
 80a0cc6:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0cc8:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80a0cca:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80a0ccc:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0cce:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80a0cd0:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80a0cd2:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0cd4:	f7ff ffdc 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0cd8:	4620      	mov	r0, r4
 80a0cda:	b002      	add	sp, #8
 80a0cdc:	bd10      	pop	{r4, pc}

080a0cde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80a0cde:	680b      	ldr	r3, [r1, #0]
 80a0ce0:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80a0ce2:	b113      	cbz	r3, 80a0cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80a0ce4:	685a      	ldr	r2, [r3, #4]
 80a0ce6:	3201      	adds	r2, #1
 80a0ce8:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80a0cea:	4770      	bx	lr

080a0cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80a0cec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0cee:	460c      	mov	r4, r1
 80a0cf0:	4606      	mov	r6, r0
 80a0cf2:	460f      	mov	r7, r1
 80a0cf4:	f854 3b04 	ldr.w	r3, [r4], #4
 80a0cf8:	ad02      	add	r5, sp, #8
 80a0cfa:	f845 3d08 	str.w	r3, [r5, #-8]!
 80a0cfe:	4621      	mov	r1, r4
 80a0d00:	a801      	add	r0, sp, #4
 80a0d02:	f7ff ffec 	bl	80a0cde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80a0d06:	4629      	mov	r1, r5
 80a0d08:	4630      	mov	r0, r6
 80a0d0a:	f7ff ffd7 	bl	80a0cbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0d0e:	a801      	add	r0, sp, #4
 80a0d10:	f7ff ffbe 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0d14:	4620      	mov	r0, r4
 80a0d16:	f7ff ffbb 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80a0d1a:	4638      	mov	r0, r7
 80a0d1c:	f7ff f9bf 	bl	80a009e <_ZdlPv>
        return p;
    }
 80a0d20:	4630      	mov	r0, r6
 80a0d22:	b003      	add	sp, #12
 80a0d24:	bdf0      	pop	{r4, r5, r6, r7, pc}

080a0d26 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80a0d26:	b513      	push	{r0, r1, r4, lr}
 80a0d28:	460b      	mov	r3, r1
 80a0d2a:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0d2c:	c803      	ldmia	r0, {r0, r1}
 80a0d2e:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80a0d32:	e893 0003 	ldmia.w	r3, {r0, r1}
 80a0d36:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80a0d3a:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80a0d3e:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80a0d42:	b002      	add	sp, #8
 80a0d44:	bd10      	pop	{r4, pc}

080a0d46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d46:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0d48:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d4a:	b90a      	cbnz	r2, 80a0d50 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80a0d4c:	f001 f80b 	bl	80a1d66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d50:	68c3      	ldr	r3, [r0, #12]
    }
 80a0d52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d56:	4718      	bx	r3

080a0d58 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d58:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0d5a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0d5c:	f100 0110 	add.w	r1, r0, #16
 80a0d60:	f7ff fff1 	bl	80a0d46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0d64:	bd08      	pop	{r3, pc}

080a0d66 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d66:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80a0d68:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a0d6a:	b90a      	cbnz	r2, 80a0d70 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 80a0d6c:	f000 fffb 	bl	80a1d66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d70:	68c3      	ldr	r3, [r0, #12]
    }
 80a0d72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a0d76:	4718      	bx	r3

080a0d78 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80a0d78:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0d7a:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80a0d7c:	f100 0110 	add.w	r1, r0, #16
 80a0d80:	f7ff fff1 	bl	80a0d66 <_ZNKSt8functionIFvRKbEEclES1_>
 80a0d84:	bd08      	pop	{r3, pc}

080a0d86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0d86:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0d88:	2300      	movs	r3, #0
 80a0d8a:	6083      	str	r3, [r0, #8]
 80a0d8c:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a0d8e:	4604      	mov	r4, r0
 80a0d90:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a0d92:	b12b      	cbz	r3, 80a0da0 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a0d94:	2202      	movs	r2, #2
 80a0d96:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a0d98:	68eb      	ldr	r3, [r5, #12]
 80a0d9a:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a0d9c:	68ab      	ldr	r3, [r5, #8]
 80a0d9e:	60a3      	str	r3, [r4, #8]
	}
    }
 80a0da0:	4620      	mov	r0, r4
 80a0da2:	bd38      	pop	{r3, r4, r5, pc}

080a0da4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80a0da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80a0da8:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0dac:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a0dae:	f04f 0002 	mov.w	r0, #2
 80a0db2:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0db4:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0db8:	808b      	strh	r3, [r1, #4]
 80a0dba:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0dbc:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a0dbe:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0dc2:	600b      	str	r3, [r1, #0]
 80a0dc4:	e8d4 1f4f 	ldrexb	r1, [r4]
 80a0dc8:	4299      	cmp	r1, r3
 80a0dca:	d103      	bne.n	80a0dd4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80a0dcc:	e8c4 0f45 	strexb	r5, r0, [r4]
 80a0dd0:	2d00      	cmp	r5, #0
 80a0dd2:	d1f7      	bne.n	80a0dc4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80a0dd4:	d002      	beq.n	80a0ddc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80a0dd6:	f88d 1000 	strb.w	r1, [sp]
 80a0dda:	e06b      	b.n	80a0eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80a0ddc:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0de0:	bf1c      	itt	ne
 80a0de2:	60e7      	strne	r7, [r4, #12]
 80a0de4:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a0de6:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80a0dea:	bf18      	it	ne
 80a0dec:	461f      	movne	r7, r3
 80a0dee:	2301      	movs	r3, #1
 80a0df0:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a0df2:	f3bf 8f5f 	dmb	sy
 80a0df6:	f104 0308 	add.w	r3, r4, #8
 80a0dfa:	2000      	movs	r0, #0
 80a0dfc:	e853 6f00 	ldrex	r6, [r3]
 80a0e00:	e843 0200 	strex	r2, r0, [r3]
 80a0e04:	2a00      	cmp	r2, #0
 80a0e06:	d1f9      	bne.n	80a0dfc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80a0e08:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a0e0c:	2e00      	cmp	r6, #0
 80a0e0e:	d051      	beq.n	80a0eb4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a0e10:	f7ff fe56 	bl	80a0ac0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a0e14:	b120      	cbz	r0, 80a0e20 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a0e16:	4629      	mov	r1, r5
 80a0e18:	4630      	mov	r0, r6
 80a0e1a:	f7ff ff94 	bl	80a0d46 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80a0e1e:	e043      	b.n	80a0ea8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a0e20:	4631      	mov	r1, r6
 80a0e22:	4668      	mov	r0, sp
 80a0e24:	f7ff ffaf 	bl	80a0d86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0e28:	68e0      	ldr	r0, [r4, #12]
 80a0e2a:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0e2e:	b108      	cbz	r0, 80a0e34 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80a0e30:	f002 fa0a 	bl	80a3248 <strdup>
 80a0e34:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a0e36:	2010      	movs	r0, #16
 80a0e38:	f8ad 5014 	strh.w	r5, [sp, #20]
 80a0e3c:	f7ff f92d 	bl	80a009a <_Znwj>
 80a0e40:	4605      	mov	r5, r0
 80a0e42:	b330      	cbz	r0, 80a0e92 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e44:	f04f 0800 	mov.w	r8, #0
 80a0e48:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e4c:	2018      	movs	r0, #24
 80a0e4e:	f7ff f924 	bl	80a009a <_Znwj>
 80a0e52:	4604      	mov	r4, r0
 80a0e54:	b1c0      	cbz	r0, 80a0e88 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a0e56:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a0e5a:	4601      	mov	r1, r0
 80a0e5c:	4668      	mov	r0, sp
 80a0e5e:	f7ff ff62 	bl	80a0d26 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e62:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80a0e64:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e66:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a0e68:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a0e6a:	9202      	str	r2, [sp, #8]
 80a0e6c:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e6e:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e70:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 80a0e74:	9203      	str	r2, [sp, #12]
 80a0e76:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e78:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80a0e7c:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e80:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 80a0e82:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a0e86:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e88:	4b0d      	ldr	r3, [pc, #52]	; (80a0ec0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a0e8a:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a0e8c:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a0e8e:	4b0d      	ldr	r3, [pc, #52]	; (80a0ec4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 80a0e90:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0e92:	9804      	ldr	r0, [sp, #16]
 80a0e94:	f7ff fe90 	bl	80a0bb8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0e98:	4668      	mov	r0, sp
 80a0e9a:	f7ff fed1 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a0e9e:	2200      	movs	r2, #0
 80a0ea0:	4629      	mov	r1, r5
 80a0ea2:	4809      	ldr	r0, [pc, #36]	; (80a0ec8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80a0ea4:	f7ff fe14 	bl	80a0ad0 <application_thread_invoke>
 80a0ea8:	4630      	mov	r0, r6
 80a0eaa:	f7ff fec9 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a0eae:	4630      	mov	r0, r6
 80a0eb0:	f7ff f8f5 	bl	80a009e <_ZdlPv>
 80a0eb4:	4638      	mov	r0, r7
 80a0eb6:	f7ff fe7f 	bl	80a0bb8 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80a0eba:	b006      	add	sp, #24
 80a0ebc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80a0ec0:	080a0d59 	.word	0x080a0d59
 80a0ec4:	080a0fb5 	.word	0x080a0fb5
 80a0ec8:	080a0bff 	.word	0x080a0bff

080a0ecc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0ecc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a0ed0:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0ed2:	ad07      	add	r5, sp, #28
 80a0ed4:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0ed8:	4606      	mov	r6, r0
 80a0eda:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80a0edc:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0ede:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80a0ee0:	460f      	mov	r7, r1
 80a0ee2:	4690      	mov	r8, r2
 80a0ee4:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80a0ee8:	f8c5 b004 	str.w	fp, [r5, #4]
 80a0eec:	f8c5 b008 	str.w	fp, [r5, #8]
 80a0ef0:	9307      	str	r3, [sp, #28]
 80a0ef2:	f7ff f8d2 	bl	80a009a <_Znwj>
 80a0ef6:	4604      	mov	r4, r0
 80a0ef8:	b138      	cbz	r0, 80a0f0a <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80a0efa:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 80a0efe:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 80a0f02:	f8c0 b004 	str.w	fp, [r0, #4]
 80a0f06:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0f0a:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0f0c:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80a0f0e:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80a0f10:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0f12:	f7ff f8c2 	bl	80a009a <_Znwj>
 80a0f16:	b128      	cbz	r0, 80a0f24 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80a0f18:	2301      	movs	r3, #1
 80a0f1a:	6043      	str	r3, [r0, #4]
 80a0f1c:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80a0f1e:	4b23      	ldr	r3, [pc, #140]	; (80a0fac <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80a0f20:	60c4      	str	r4, [r0, #12]
 80a0f22:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80a0f24:	4b22      	ldr	r3, [pc, #136]	; (80a0fb0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80a0f26:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80a0f28:	2008      	movs	r0, #8
 80a0f2a:	9308      	str	r3, [sp, #32]
 80a0f2c:	f7ff f8b5 	bl	80a009a <_Znwj>
 80a0f30:	4604      	mov	r4, r0
 80a0f32:	b128      	cbz	r0, 80a0f40 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f34:	9b03      	ldr	r3, [sp, #12]
 80a0f36:	a904      	add	r1, sp, #16
 80a0f38:	f840 3b04 	str.w	r3, [r0], #4
 80a0f3c:	f7ff fecf 	bl	80a0cde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0f40:	9500      	str	r5, [sp, #0]
 80a0f42:	fa5f f38a 	uxtb.w	r3, sl
 80a0f46:	464a      	mov	r2, r9
 80a0f48:	4641      	mov	r1, r8
 80a0f4a:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80a0f4c:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80a0f4e:	f7ff fdfb 	bl	80a0b48 <spark_send_event>
 80a0f52:	b9b8      	cbnz	r0, 80a0f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80a0f54:	9b03      	ldr	r3, [sp, #12]
 80a0f56:	785b      	ldrb	r3, [r3, #1]
 80a0f58:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80a0f5c:	b993      	cbnz	r3, 80a0f84 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80a0f5e:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80a0f62:	a905      	add	r1, sp, #20
 80a0f64:	a803      	add	r0, sp, #12
 80a0f66:	9205      	str	r2, [sp, #20]
 80a0f68:	f8ad 3018 	strh.w	r3, [sp, #24]
 80a0f6c:	f7ff ff1a 	bl	80a0da4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0f70:	9805      	ldr	r0, [sp, #20]
 80a0f72:	f7ff fe21 	bl	80a0bb8 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 80a0f76:	a805      	add	r0, sp, #20
 80a0f78:	9909      	ldr	r1, [sp, #36]	; 0x24
 80a0f7a:	f7ff feb7 	bl	80a0cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f7e:	a806      	add	r0, sp, #24
 80a0f80:	f7ff fe86 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80a0f84:	9b03      	ldr	r3, [sp, #12]
 80a0f86:	a904      	add	r1, sp, #16
 80a0f88:	a806      	add	r0, sp, #24
 80a0f8a:	9305      	str	r3, [sp, #20]
 80a0f8c:	f7ff fea7 	bl	80a0cde <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 80a0f90:	a905      	add	r1, sp, #20
 80a0f92:	4630      	mov	r0, r6
 80a0f94:	f7ff fe92 	bl	80a0cbc <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80a0f98:	a806      	add	r0, sp, #24
 80a0f9a:	f7ff fe79 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80a0f9e:	a804      	add	r0, sp, #16
 80a0fa0:	f7ff fe76 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80a0fa4:	4630      	mov	r0, r6
 80a0fa6:	b00b      	add	sp, #44	; 0x2c
 80a0fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a0fac:	080a33e4 	.word	0x080a33e4
 80a0fb0:	080a111d 	.word	0x080a111d

080a0fb4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0fb4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a0fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a0fb8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a0fba:	d006      	beq.n	80a0fca <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80a0fbc:	2a03      	cmp	r2, #3
 80a0fbe:	d017      	beq.n	80a0ff0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80a0fc0:	2a01      	cmp	r2, #1
 80a0fc2:	d120      	bne.n	80a1006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a0fc4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a0fc6:	6003      	str	r3, [r0, #0]
	      break;
 80a0fc8:	e01d      	b.n	80a1006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0fca:	2018      	movs	r0, #24
 80a0fcc:	680e      	ldr	r6, [r1, #0]
 80a0fce:	f7ff f864 	bl	80a009a <_Znwj>
 80a0fd2:	4605      	mov	r5, r0
 80a0fd4:	b150      	cbz	r0, 80a0fec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a0fd6:	4631      	mov	r1, r6
 80a0fd8:	f7ff fed5 	bl	80a0d86 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80a0fdc:	6930      	ldr	r0, [r6, #16]
 80a0fde:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a0fe2:	b108      	cbz	r0, 80a0fe8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80a0fe4:	f002 f930 	bl	80a3248 <strdup>
 80a0fe8:	6128      	str	r0, [r5, #16]
 80a0fea:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a0fec:	6025      	str	r5, [r4, #0]
 80a0fee:	e00a      	b.n	80a1006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a0ff0:	6804      	ldr	r4, [r0, #0]
 80a0ff2:	b144      	cbz	r4, 80a1006 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a0ff4:	6920      	ldr	r0, [r4, #16]
 80a0ff6:	f7ff fddf 	bl	80a0bb8 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a0ffa:	4620      	mov	r0, r4
 80a0ffc:	f7ff fe20 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1000:	4620      	mov	r0, r4
 80a1002:	f7ff f84c 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1006:	2000      	movs	r0, #0
 80a1008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a100a <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a100a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a100c:	2300      	movs	r3, #0
 80a100e:	6083      	str	r3, [r0, #8]
 80a1010:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1012:	4604      	mov	r4, r0
 80a1014:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1016:	b12b      	cbz	r3, 80a1024 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1018:	2202      	movs	r2, #2
 80a101a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a101c:	68eb      	ldr	r3, [r5, #12]
 80a101e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1020:	68ab      	ldr	r3, [r5, #8]
 80a1022:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1024:	4620      	mov	r0, r4
 80a1026:	bd38      	pop	{r3, r4, r5, pc}

080a1028 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80a1028:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80a102a:	b570      	push	{r4, r5, r6, lr}
 80a102c:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80a102e:	d006      	beq.n	80a103e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80a1030:	2a03      	cmp	r2, #3
 80a1032:	d011      	beq.n	80a1058 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80a1034:	2a01      	cmp	r2, #1
 80a1036:	d117      	bne.n	80a1068 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80a1038:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80a103a:	6003      	str	r3, [r0, #0]
	      break;
 80a103c:	e014      	b.n	80a1068 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a103e:	2014      	movs	r0, #20
 80a1040:	680e      	ldr	r6, [r1, #0]
 80a1042:	f7ff f82a 	bl	80a009a <_Znwj>
 80a1046:	4605      	mov	r5, r0
 80a1048:	b120      	cbz	r0, 80a1054 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80a104a:	4631      	mov	r1, r6
 80a104c:	f7ff ffdd 	bl	80a100a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a1050:	7c33      	ldrb	r3, [r6, #16]
 80a1052:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80a1054:	6025      	str	r5, [r4, #0]
 80a1056:	e007      	b.n	80a1068 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1058:	6804      	ldr	r4, [r0, #0]
 80a105a:	b12c      	cbz	r4, 80a1068 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a105c:	4620      	mov	r0, r4
 80a105e:	f7ff fdef 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80a1062:	4620      	mov	r0, r4
 80a1064:	f7ff f81b 	bl	80a009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80a1068:	2000      	movs	r0, #0
 80a106a:	bd70      	pop	{r4, r5, r6, pc}

080a106c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 80a106c:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a106e:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80a1070:	f3bf 8f5f 	dmb	sy
 80a1074:	b087      	sub	sp, #28
 80a1076:	2300      	movs	r3, #0
 80a1078:	e850 6f00 	ldrex	r6, [r0]
 80a107c:	e840 3200 	strex	r2, r3, [r0]
 80a1080:	2a00      	cmp	r2, #0
 80a1082:	d1f9      	bne.n	80a1078 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 80a1084:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80a1088:	2e00      	cmp	r6, #0
 80a108a:	d03e      	beq.n	80a110a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80a108c:	4618      	mov	r0, r3
 80a108e:	f7ff fd17 	bl	80a0ac0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80a1092:	4607      	mov	r7, r0
 80a1094:	b120      	cbz	r0, 80a10a0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80a1096:	4621      	mov	r1, r4
 80a1098:	4630      	mov	r0, r6
 80a109a:	f7ff fe64 	bl	80a0d66 <_ZNKSt8functionIFvRKbEEclES1_>
 80a109e:	e02e      	b.n	80a10fe <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80a10a0:	4631      	mov	r1, r6
 80a10a2:	a801      	add	r0, sp, #4
 80a10a4:	f7ff ffb1 	bl	80a100a <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80a10a8:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80a10aa:	2010      	movs	r0, #16
 80a10ac:	f88d 3014 	strb.w	r3, [sp, #20]
 80a10b0:	f7fe fff3 	bl	80a009a <_Znwj>
 80a10b4:	4605      	mov	r5, r0
 80a10b6:	b1d0      	cbz	r0, 80a10ee <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a10b8:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a10ba:	2014      	movs	r0, #20
 80a10bc:	f7fe ffed 	bl	80a009a <_Znwj>
 80a10c0:	4604      	mov	r4, r0
 80a10c2:	b178      	cbz	r0, 80a10e4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a10c4:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80a10c6:	4601      	mov	r1, r0
 80a10c8:	a801      	add	r0, sp, #4
 80a10ca:	f7ff fe2c 	bl	80a0d26 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10ce:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 80a10d0:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10d2:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80a10d4:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 80a10d6:	9203      	str	r2, [sp, #12]
 80a10d8:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 80a10da:	60e3      	str	r3, [r4, #12]
 80a10dc:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80a10e0:	9204      	str	r2, [sp, #16]
 80a10e2:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a10e4:	4b0a      	ldr	r3, [pc, #40]	; (80a1110 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80a10e6:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 80a10e8:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 80a10ea:	4b0a      	ldr	r3, [pc, #40]	; (80a1114 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 80a10ec:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a10ee:	a801      	add	r0, sp, #4
 80a10f0:	f7ff fda6 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80a10f4:	2200      	movs	r2, #0
 80a10f6:	4629      	mov	r1, r5
 80a10f8:	4807      	ldr	r0, [pc, #28]	; (80a1118 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 80a10fa:	f7ff fce9 	bl	80a0ad0 <application_thread_invoke>
 80a10fe:	4630      	mov	r0, r6
 80a1100:	f7ff fd9e 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80a1104:	4630      	mov	r0, r6
 80a1106:	f7fe ffca 	bl	80a009e <_ZdlPv>
        }
    }
 80a110a:	b007      	add	sp, #28
 80a110c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a110e:	bf00      	nop
 80a1110:	080a0d79 	.word	0x080a0d79
 80a1114:	080a1029 	.word	0x080a1029
 80a1118:	080a0bff 	.word	0x080a0bff

080a111c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80a111c:	b530      	push	{r4, r5, lr}
 80a111e:	4604      	mov	r4, r0
 80a1120:	b085      	sub	sp, #20
 80a1122:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80a1124:	4668      	mov	r0, sp
 80a1126:	4611      	mov	r1, r2
 80a1128:	f7ff fde0 	bl	80a0cec <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80a112c:	b17c      	cbz	r4, 80a114e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80a112e:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80a1130:	4628      	mov	r0, r5
 80a1132:	b10d      	cbz	r5, 80a1138 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80a1134:	f002 f888 	bl	80a3248 <strdup>
 80a1138:	9002      	str	r0, [sp, #8]
 80a113a:	a902      	add	r1, sp, #8
 80a113c:	4668      	mov	r0, sp
 80a113e:	f8ad 400c 	strh.w	r4, [sp, #12]
 80a1142:	f7ff fe2f 	bl	80a0da4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80a1146:	9802      	ldr	r0, [sp, #8]
 80a1148:	f7ff fd36 	bl	80a0bb8 <free>
 80a114c:	e01d      	b.n	80a118a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80a114e:	f04f 0201 	mov.w	r2, #1
 80a1152:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80a1154:	f88d 4008 	strb.w	r4, [sp, #8]
 80a1158:	e8d0 3f4f 	ldrexb	r3, [r0]
 80a115c:	42a3      	cmp	r3, r4
 80a115e:	d103      	bne.n	80a1168 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80a1160:	e8c0 2f41 	strexb	r1, r2, [r0]
 80a1164:	2900      	cmp	r1, #0
 80a1166:	d1f7      	bne.n	80a1158 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 80a1168:	d002      	beq.n	80a1170 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 80a116a:	f88d 3008 	strb.w	r3, [sp, #8]
 80a116e:	e00c      	b.n	80a118a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 80a1170:	f110 010c 	adds.w	r1, r0, #12
 80a1174:	f04f 0301 	mov.w	r3, #1
 80a1178:	bf18      	it	ne
 80a117a:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80a117c:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 80a1180:	3004      	adds	r0, #4
 80a1182:	f800 3c03 	strb.w	r3, [r0, #-3]
 80a1186:	f7ff ff71 	bl	80a106c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 80a118a:	a801      	add	r0, sp, #4
 80a118c:	f7ff fd80 	bl	80a0c90 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 80a1190:	b005      	add	sp, #20
 80a1192:	bd30      	pop	{r4, r5, pc}

080a1194 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 80a1194:	4770      	bx	lr

080a1196 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 80a1196:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1198:	4606      	mov	r6, r0
 80a119a:	4615      	mov	r5, r2
 80a119c:	460c      	mov	r4, r1
 80a119e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a11a0:	42bc      	cmp	r4, r7
 80a11a2:	d006      	beq.n	80a11b2 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 80a11a4:	6833      	ldr	r3, [r6, #0]
 80a11a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80a11aa:	689b      	ldr	r3, [r3, #8]
 80a11ac:	4630      	mov	r0, r6
 80a11ae:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 80a11b0:	e7f6      	b.n	80a11a0 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 80a11b2:	4628      	mov	r0, r5
 80a11b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a11b6 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 80a11b6:	2200      	movs	r2, #0
 80a11b8:	7c00      	ldrb	r0, [r0, #16]
 80a11ba:	f7ff bb97 	b.w	80a08ec <HAL_I2C_Write_Data>

080a11be <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 80a11be:	2100      	movs	r1, #0
 80a11c0:	7c00      	ldrb	r0, [r0, #16]
 80a11c2:	f7ff bb9b 	b.w	80a08fc <HAL_I2C_Available_Data>

080a11c6 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 80a11c6:	2100      	movs	r1, #0
 80a11c8:	7c00      	ldrb	r0, [r0, #16]
 80a11ca:	f7ff bb9f 	b.w	80a090c <HAL_I2C_Read_Data>

080a11ce <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 80a11ce:	2100      	movs	r1, #0
 80a11d0:	7c00      	ldrb	r0, [r0, #16]
 80a11d2:	f7ff bba3 	b.w	80a091c <HAL_I2C_Peek_Data>

080a11d6 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 80a11d6:	2100      	movs	r1, #0
 80a11d8:	7c00      	ldrb	r0, [r0, #16]
 80a11da:	f7ff bba7 	b.w	80a092c <HAL_I2C_Flush_Data>

080a11de <_ZN7TwoWireD0Ev>:
 80a11de:	b510      	push	{r4, lr}
 80a11e0:	4604      	mov	r4, r0
 80a11e2:	f7fe ff5c 	bl	80a009e <_ZdlPv>
 80a11e6:	4620      	mov	r0, r4
 80a11e8:	bd10      	pop	{r4, pc}
	...

080a11ec <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a11ec:	b510      	push	{r4, lr}
 80a11ee:	4604      	mov	r4, r0
 80a11f0:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 80a11f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a11f6:	60a3      	str	r3, [r4, #8]
 80a11f8:	4b04      	ldr	r3, [pc, #16]	; (80a120c <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a11fa:	2100      	movs	r1, #0
{
  _i2c = i2c;
 80a11fc:	7420      	strb	r0, [r4, #16]
 80a11fe:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 80a1200:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 80a1202:	f7ff fba3 	bl	80a094c <HAL_I2C_Init>

}
 80a1206:	4620      	mov	r0, r4
 80a1208:	bd10      	pop	{r4, pc}
 80a120a:	bf00      	nop
 80a120c:	080a3400 	.word	0x080a3400

080a1210 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80a1210:	2100      	movs	r1, #0
 80a1212:	7c00      	ldrb	r0, [r0, #16]
 80a1214:	f7ff bb92 	b.w	80a093c <HAL_I2C_Is_Enabled>

080a1218 <_Z29call_wiring_interrupt_handlerPv>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80a1218:	6882      	ldr	r2, [r0, #8]
    delete handlers[pin];
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
}

void call_wiring_interrupt_handler(void* data)
{
 80a121a:	b510      	push	{r4, lr}
 80a121c:	b90a      	cbnz	r2, 80a1222 <_Z29call_wiring_interrupt_handlerPv+0xa>
	__throw_bad_function_call();
 80a121e:	f000 fda2 	bl	80a1d66 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80a1222:	68c3      	ldr	r3, [r0, #12]
    wiring_interrupt_handler_t* handler = (wiring_interrupt_handler_t*)data;
    (*handler)();
}
 80a1224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1228:	4718      	bx	r3

080a122a <_ZNSt8functionIFvvEEC1ERKS1_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a122a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a122c:	2300      	movs	r3, #0
 80a122e:	6083      	str	r3, [r0, #8]
 80a1230:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80a1232:	4604      	mov	r4, r0
 80a1234:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80a1236:	b12b      	cbz	r3, 80a1244 <_ZNSt8functionIFvvEEC1ERKS1_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80a1238:	2202      	movs	r2, #2
 80a123a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80a123c:	68eb      	ldr	r3, [r5, #12]
 80a123e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80a1240:	68ab      	ldr	r3, [r5, #8]
 80a1242:	60a3      	str	r3, [r4, #8]
	}
    }
 80a1244:	4620      	mov	r0, r4
 80a1246:	bd38      	pop	{r3, r4, r5, pc}

080a1248 <_Z16allocate_handlertRSt8functionIFvvEE>:
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    delete handlers[pin];
 80a124a:	4b0c      	ldr	r3, [pc, #48]	; (80a127c <_Z16allocate_handlertRSt8functionIFvvEE+0x34>)
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a124c:	4606      	mov	r6, r0
    delete handlers[pin];
 80a124e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
#include "spark_wiring_platform.h"

static wiring_interrupt_handler_t* handlers[TOTAL_PINS];

wiring_interrupt_handler_t* allocate_handler(uint16_t pin, wiring_interrupt_handler_t& fn)
{
 80a1252:	460f      	mov	r7, r1
 80a1254:	461c      	mov	r4, r3
    delete handlers[pin];
 80a1256:	b12d      	cbz	r5, 80a1264 <_Z16allocate_handlertRSt8functionIFvvEE+0x1c>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80a1258:	4628      	mov	r0, r5
 80a125a:	f7ff fcf1 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
 80a125e:	4628      	mov	r0, r5
 80a1260:	f7fe ff1d 	bl	80a009e <_ZdlPv>
    return handlers[pin] = new wiring_interrupt_handler_t(fn);
 80a1264:	2010      	movs	r0, #16
 80a1266:	f7fe ff18 	bl	80a009a <_Znwj>
 80a126a:	4605      	mov	r5, r0
 80a126c:	b110      	cbz	r0, 80a1274 <_Z16allocate_handlertRSt8functionIFvvEE+0x2c>
 80a126e:	4639      	mov	r1, r7
 80a1270:	f7ff ffdb 	bl	80a122a <_ZNSt8functionIFvvEEC1ERKS1_>
 80a1274:	f844 5026 	str.w	r5, [r4, r6, lsl #2]
}
 80a1278:	4628      	mov	r0, r5
 80a127a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80a127c:	200003ec 	.word	0x200003ec

080a1280 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah>:
  }
  return nullptr;
}

bool attachInterrupt(uint16_t pin, wiring_interrupt_handler_t fn, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80a1280:	b5f0      	push	{r4, r5, r6, r7, lr}
 80a1282:	460c      	mov	r4, r1
 80a1284:	4605      	mov	r5, r0
 80a1286:	b085      	sub	sp, #20
 80a1288:	4617      	mov	r7, r2
 80a128a:	461e      	mov	r6, r3
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
 80a128c:	f7ff fb16 	bl	80a08bc <HAL_Interrupts_Detach>
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
 80a1290:	4621      	mov	r1, r4
 80a1292:	4628      	mov	r0, r5
 80a1294:	f7ff ffd8 	bl	80a1248 <_Z16allocate_handlertRSt8functionIFvvEE>
    if (handler) {
 80a1298:	4604      	mov	r4, r0
 80a129a:	b1b8      	cbz	r0, 80a12cc <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x4c>
        HAL_InterruptExtraConfiguration extra = {0};
 80a129c:	2100      	movs	r1, #0
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a129e:	2304      	movs	r3, #4
  if (priority >= 0) {
 80a12a0:	428e      	cmp	r6, r1
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
 80a12a2:	9103      	str	r1, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 80a12a4:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
    return &extra;
  }
  return nullptr;
 80a12a8:	bfb4      	ite	lt
 80a12aa:	460b      	movlt	r3, r1
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a12ac:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a12b0:	4602      	mov	r2, r0
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 80a12b2:	bfa4      	itt	ge
 80a12b4:	f88d 300e 	strbge.w	r3, [sp, #14]
    return &extra;
 80a12b8:	ab03      	addge	r3, sp, #12
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a12ba:	9300      	str	r3, [sp, #0]
 80a12bc:	4906      	ldr	r1, [pc, #24]	; (80a12d8 <_Z15attachInterrupttSt8functionIFvvEE13InterruptModeah+0x58>)
 80a12be:	463b      	mov	r3, r7
 80a12c0:	4628      	mov	r0, r5

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 80a12c2:	bfa8      	it	ge
 80a12c4:	f88d 600d 	strbge.w	r6, [sp, #13]
#endif
    HAL_Interrupts_Detach(pin);
    wiring_interrupt_handler_t* handler = allocate_handler(pin, fn);
    if (handler) {
        HAL_InterruptExtraConfiguration extra = {0};
        HAL_Interrupts_Attach(pin, call_wiring_interrupt_handler, handler, mode, configure_interrupt(extra, priority, subpriority));
 80a12c8:	f7ff faf0 	bl	80a08ac <HAL_Interrupts_Attach>
    }
    return handler!=NULL;
}
 80a12cc:	1c20      	adds	r0, r4, #0
 80a12ce:	bf18      	it	ne
 80a12d0:	2001      	movne	r0, #1
 80a12d2:	b005      	add	sp, #20
 80a12d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80a12d6:	bf00      	nop
 80a12d8:	080a1219 	.word	0x080a1219

080a12dc <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 80a12dc:	4770      	bx	lr

080a12de <_ZN9IPAddressD0Ev>:
 80a12de:	b510      	push	{r4, lr}
 80a12e0:	4604      	mov	r4, r0
 80a12e2:	f7fe fedc 	bl	80a009e <_ZdlPv>
 80a12e6:	4620      	mov	r0, r4
 80a12e8:	bd10      	pop	{r4, pc}

080a12ea <_ZNK9IPAddress7printToER5Print>:
#endif
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 80a12ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a12ec:	460f      	mov	r7, r1
 80a12ee:	f100 0608 	add.w	r6, r0, #8
 80a12f2:	1d05      	adds	r5, r0, #4
 80a12f4:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a12f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80a12fa:	220a      	movs	r2, #10
 80a12fc:	4638      	mov	r0, r7
 80a12fe:	f000 f898 	bl	80a1432 <_ZN5Print5printEhi>
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1302:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 80a1304:	4404      	add	r4, r0
}

size_t IPAddress::printTo(Print& p) const
{
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 80a1306:	d007      	beq.n	80a1318 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 80a1308:	2c00      	cmp	r4, #0
 80a130a:	d0f4      	beq.n	80a12f6 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 80a130c:	212e      	movs	r1, #46	; 0x2e
 80a130e:	4638      	mov	r0, r7
 80a1310:	f000 f84c 	bl	80a13ac <_ZN5Print5printEc>
 80a1314:	4404      	add	r4, r0
 80a1316:	e7ee      	b.n	80a12f6 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 80a1318:	4620      	mov	r0, r4
 80a131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a131c <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80a131c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80a131e:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80a1322:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80a1326:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80a132a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
 80a132e:	2304      	movs	r3, #4
 80a1330:	6041      	str	r1, [r0, #4]
 80a1332:	7503      	strb	r3, [r0, #20]
 80a1334:	bd10      	pop	{r4, pc}
	...

080a1338 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80a1338:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a133a:	4d04      	ldr	r5, [pc, #16]	; (80a134c <_ZN9IPAddressC1Ehhhh+0x14>)
 80a133c:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80a133e:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80a1342:	9500      	str	r5, [sp, #0]
 80a1344:	f7ff ffea 	bl	80a131c <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80a1348:	b003      	add	sp, #12
 80a134a:	bd30      	pop	{r4, r5, pc}
 80a134c:	080a3428 	.word	0x080a3428

080a1350 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80a1350:	4a01      	ldr	r2, [pc, #4]	; (80a1358 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80a1352:	4b02      	ldr	r3, [pc, #8]	; (80a135c <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80a1354:	601a      	str	r2, [r3, #0]
 80a1356:	4770      	bx	lr
 80a1358:	080a34ed 	.word	0x080a34ed
 80a135c:	2000044c 	.word	0x2000044c

080a1360 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 80a1360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80a1362:	4606      	mov	r6, r0
 80a1364:	460d      	mov	r5, r1
 80a1366:	188f      	adds	r7, r1, r2
  size_t n = 0;
 80a1368:	2400      	movs	r4, #0
  while (size--) {
 80a136a:	42bd      	cmp	r5, r7
 80a136c:	d00c      	beq.n	80a1388 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 80a136e:	6833      	ldr	r3, [r6, #0]
 80a1370:	f815 1b01 	ldrb.w	r1, [r5], #1
 80a1374:	689b      	ldr	r3, [r3, #8]
 80a1376:	4630      	mov	r0, r6
 80a1378:	4798      	blx	r3
     if (chunk>=0)
 80a137a:	2800      	cmp	r0, #0
 80a137c:	db01      	blt.n	80a1382 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 80a137e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 80a1380:	e7f3      	b.n	80a136a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 80a1382:	2c00      	cmp	r4, #0
 80a1384:	bf08      	it	eq
 80a1386:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 80a1388:	4620      	mov	r0, r4
 80a138a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080a138c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 80a138c:	b570      	push	{r4, r5, r6, lr}
 80a138e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 80a1390:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 80a1392:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 80a1394:	b149      	cbz	r1, 80a13aa <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 80a1396:	f001 ff72 	bl	80a327e <strlen>
 80a139a:	682b      	ldr	r3, [r5, #0]
 80a139c:	4602      	mov	r2, r0
 80a139e:	4621      	mov	r1, r4
 80a13a0:	4628      	mov	r0, r5
    }
 80a13a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 80a13a6:	68db      	ldr	r3, [r3, #12]
 80a13a8:	4718      	bx	r3
    }
 80a13aa:	bd70      	pop	{r4, r5, r6, pc}

080a13ac <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 80a13ac:	6803      	ldr	r3, [r0, #0]
 80a13ae:	689b      	ldr	r3, [r3, #8]
 80a13b0:	4718      	bx	r3

080a13b2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a13b2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 80a13b4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 80a13b6:	4605      	mov	r5, r0
  size_t n = print('\r');
 80a13b8:	f7ff fff8 	bl	80a13ac <_ZN5Print5printEc>
  n += print('\n');
 80a13bc:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 80a13be:	4604      	mov	r4, r0
  n += print('\n');
 80a13c0:	4628      	mov	r0, r5
 80a13c2:	f7ff fff3 	bl	80a13ac <_ZN5Print5printEc>
  return n;
}
 80a13c6:	4420      	add	r0, r4
 80a13c8:	bd38      	pop	{r3, r4, r5, pc}

080a13ca <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 80a13ca:	b538      	push	{r3, r4, r5, lr}
 80a13cc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 80a13ce:	f7ff ffdd 	bl	80a138c <_ZN5Print5writeEPKc>
 80a13d2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 80a13d4:	4628      	mov	r0, r5
 80a13d6:	f7ff ffec 	bl	80a13b2 <_ZN5Print7printlnEv>
  return n;
}
 80a13da:	4420      	add	r0, r4
 80a13dc:	bd38      	pop	{r3, r4, r5, pc}

080a13de <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 80a13de:	2a01      	cmp	r2, #1
 80a13e0:	bf98      	it	ls
 80a13e2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 80a13e4:	b530      	push	{r4, r5, lr}
 80a13e6:	460b      	mov	r3, r1
 80a13e8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 80a13ea:	2100      	movs	r1, #0
 80a13ec:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 80a13f0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 80a13f4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 80a13f8:	fb05 3312 	mls	r3, r5, r2, r3
 80a13fc:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 80a13fe:	2b09      	cmp	r3, #9
 80a1400:	bf94      	ite	ls
 80a1402:	3330      	addls	r3, #48	; 0x30
 80a1404:	3337      	addhi	r3, #55	; 0x37
 80a1406:	b2db      	uxtb	r3, r3
 80a1408:	4621      	mov	r1, r4
 80a140a:	f804 3901 	strb.w	r3, [r4], #-1
 80a140e:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 80a1410:	2d00      	cmp	r5, #0
 80a1412:	d1ef      	bne.n	80a13f4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 80a1414:	f7ff ffba 	bl	80a138c <_ZN5Print5writeEPKc>
}
 80a1418:	b00b      	add	sp, #44	; 0x2c
 80a141a:	bd30      	pop	{r4, r5, pc}

080a141c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 80a141c:	b410      	push	{r4}
  if (base == 0) return write(n);
 80a141e:	b922      	cbnz	r2, 80a142a <_ZN5Print5printEmi+0xe>
 80a1420:	6803      	ldr	r3, [r0, #0]
 80a1422:	b2c9      	uxtb	r1, r1
 80a1424:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 80a1426:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 80a1428:	4718      	bx	r3
  else return printNumber(n, base);
 80a142a:	b2d2      	uxtb	r2, r2
}
 80a142c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 80a142e:	f7ff bfd6 	b.w	80a13de <_ZN5Print11printNumberEmh>

080a1432 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 80a1432:	f7ff bff3 	b.w	80a141c <_ZN5Print5printEmi>

080a1436 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 80a1436:	b510      	push	{r4, lr}
 80a1438:	4604      	mov	r4, r0
 80a143a:	f7ff fc01 	bl	80a0c40 <_ZNSt14_Function_baseD1Ev>
 80a143e:	4620      	mov	r0, r4
 80a1440:	bd10      	pop	{r4, pc}
	...

080a1444 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80a1444:	4803      	ldr	r0, [pc, #12]	; (80a1454 <_GLOBAL__sub_I_RGB+0x10>)
 80a1446:	2300      	movs	r3, #0
 80a1448:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 80a144a:	4a03      	ldr	r2, [pc, #12]	; (80a1458 <_GLOBAL__sub_I_RGB+0x14>)
 80a144c:	4903      	ldr	r1, [pc, #12]	; (80a145c <_GLOBAL__sub_I_RGB+0x18>)
 80a144e:	f000 bc85 	b.w	80a1d5c <__aeabi_atexit>
 80a1452:	bf00      	nop
 80a1454:	20000450 	.word	0x20000450
 80a1458:	20000380 	.word	0x20000380
 80a145c:	080a1437 	.word	0x080a1437

080a1460 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 80a1460:	4770      	bx	lr

080a1462 <_ZN8SPIClassD0Ev>:
 80a1462:	b510      	push	{r4, lr}
 80a1464:	4604      	mov	r4, r0
 80a1466:	f7fe fe1a 	bl	80a009e <_ZdlPv>
 80a146a:	4620      	mov	r0, r4
 80a146c:	bd10      	pop	{r4, pc}
	...

080a1470 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 80a1470:	b570      	push	{r4, r5, r6, lr}
 80a1472:	4604      	mov	r4, r0
 80a1474:	460e      	mov	r6, r1
 80a1476:	4b07      	ldr	r3, [pc, #28]	; (80a1494 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 80a1478:	2500      	movs	r5, #0
 80a147a:	6003      	str	r3, [r0, #0]
 80a147c:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 80a1480:	f7ff f9c4 	bl	80a080c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 80a1484:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 80a1486:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 80a1488:	f7ff fa6a 	bl	80a0960 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 80a148c:	60a5      	str	r5, [r4, #8]
}
 80a148e:	4620      	mov	r0, r4
 80a1490:	bd70      	pop	{r4, r5, r6, pc}
 80a1492:	bf00      	nop
 80a1494:	080a3520 	.word	0x080a3520

080a1498 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 80a1498:	7900      	ldrb	r0, [r0, #4]
 80a149a:	f7ff ba69 	b.w	80a0970 <HAL_SPI_Is_Enabled>
	...

080a14a0 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
 80a14a0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a14a4:	4680      	mov	r8, r0
 80a14a6:	460d      	mov	r5, r1
 80a14a8:	4617      	mov	r7, r2
 80a14aa:	461e      	mov	r6, r3
    bool negative = val<0;
    if (negative) {
 80a14ac:	2200      	movs	r2, #0
 80a14ae:	2300      	movs	r3, #0
 80a14b0:	4640      	mov	r0, r8
 80a14b2:	4629      	mov	r1, r5
 80a14b4:	f001 f9cc 	bl	80a2850 <__aeabi_dcmplt>
 80a14b8:	b120      	cbz	r0, 80a14c4 <_Z4dtoadhPc+0x24>
        val = -val;
        *sout++ = '-';
 80a14ba:	232d      	movs	r3, #45	; 0x2d
 80a14bc:	7033      	strb	r3, [r6, #0]
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
    bool negative = val<0;
    if (negative) {
        val = -val;
 80a14be:	f105 4500 	add.w	r5, r5, #2147483648	; 0x80000000
        *sout++ = '-';
 80a14c2:	3601      	adds	r6, #1
 80a14c4:	2300      	movs	r3, #0
    }
    long scale = 1;
 80a14c6:	2401      	movs	r4, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
 80a14c8:	220a      	movs	r2, #10
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a14ca:	b2d9      	uxtb	r1, r3
 80a14cc:	428f      	cmp	r7, r1
 80a14ce:	d902      	bls.n	80a14d6 <_Z4dtoadhPc+0x36>
        scale *= 10;
 80a14d0:	4354      	muls	r4, r2
 80a14d2:	3301      	adds	r3, #1
    if (negative) {
        val = -val;
        *sout++ = '-';
    }
    long scale = 1;
    for (uint8_t i=0; i<prec; i++)
 80a14d4:	e7f9      	b.n	80a14ca <_Z4dtoadhPc+0x2a>
        scale *= 10;
    val *= scale;   // capture all the significant digits
 80a14d6:	4620      	mov	r0, r4
 80a14d8:	f000 fee2 	bl	80a22a0 <__aeabi_i2d>
 80a14dc:	4642      	mov	r2, r8
 80a14de:	462b      	mov	r3, r5
 80a14e0:	f000 ff44 	bl	80a236c <__aeabi_dmul>
 80a14e4:	4682      	mov	sl, r0
 80a14e6:	468b      	mov	fp, r1
    uint64_t fixed = uint64_t(val);
 80a14e8:	f001 fcc0 	bl	80a2e6c <__aeabi_d2ulz>
 80a14ec:	4680      	mov	r8, r0
 80a14ee:	4689      	mov	r9, r1
    if ((val-fixed)>=0.5)    // round last digit
 80a14f0:	f000 ff06 	bl	80a2300 <__aeabi_ul2d>
 80a14f4:	4602      	mov	r2, r0
 80a14f6:	460b      	mov	r3, r1
 80a14f8:	4650      	mov	r0, sl
 80a14fa:	4659      	mov	r1, fp
 80a14fc:	f000 fd82 	bl	80a2004 <__aeabi_dsub>
 80a1500:	2200      	movs	r2, #0
 80a1502:	4b17      	ldr	r3, [pc, #92]	; (80a1560 <_Z4dtoadhPc+0xc0>)
 80a1504:	f001 f9b8 	bl	80a2878 <__aeabi_dcmpge>
 80a1508:	b118      	cbz	r0, 80a1512 <_Z4dtoadhPc+0x72>
        fixed++;
 80a150a:	f118 0801 	adds.w	r8, r8, #1
 80a150e:	f149 0900 	adc.w	r9, r9, #0

    unsigned long first = (unsigned long)(fixed / scale);
 80a1512:	17e5      	asrs	r5, r4, #31
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
 80a1514:	4622      	mov	r2, r4
 80a1516:	462b      	mov	r3, r5
 80a1518:	4640      	mov	r0, r8
 80a151a:	4649      	mov	r1, r9
 80a151c:	f001 fc8e 	bl	80a2e3c <__aeabi_uldivmod>
 80a1520:	2301      	movs	r3, #1
 80a1522:	220a      	movs	r2, #10
 80a1524:	4631      	mov	r1, r6
 80a1526:	f000 fa98 	bl	80a1a5a <ultoa>
    if (prec) {
 80a152a:	b1af      	cbz	r7, 80a1558 <_Z4dtoadhPc+0xb8>
        sout += strlen(sout);
 80a152c:	4630      	mov	r0, r6
 80a152e:	f001 fea6 	bl	80a327e <strlen>
        *sout++ = '.';
 80a1532:	232e      	movs	r3, #46	; 0x2e
 80a1534:	5433      	strb	r3, [r6, r0]
        ultoa(second, sout, 10, prec);
 80a1536:	3001      	adds	r0, #1
 80a1538:	4406      	add	r6, r0
 80a153a:	4622      	mov	r2, r4
 80a153c:	462b      	mov	r3, r5
 80a153e:	4640      	mov	r0, r8
 80a1540:	4649      	mov	r1, r9
 80a1542:	f001 fc7b 	bl	80a2e3c <__aeabi_uldivmod>
 80a1546:	463b      	mov	r3, r7
 80a1548:	4610      	mov	r0, r2
 80a154a:	4631      	mov	r1, r6
 80a154c:	220a      	movs	r2, #10
    }
}
 80a154e:	b001      	add	sp, #4
 80a1550:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}

    ultoa(first, sout, 10, 1);
    if (prec) {
        sout += strlen(sout);
        *sout++ = '.';
        ultoa(second, sout, 10, prec);
 80a1554:	f000 ba81 	b.w	80a1a5a <ultoa>
    }
}
 80a1558:	b001      	add	sp, #4
 80a155a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a155e:	bf00      	nop
 80a1560:	3fe00000 	.word	0x3fe00000

080a1564 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 80a1564:	b510      	push	{r4, lr}
 80a1566:	4604      	mov	r4, r0
{
	free(buffer);
 80a1568:	6800      	ldr	r0, [r0, #0]
 80a156a:	f7ff fb25 	bl	80a0bb8 <free>
}
 80a156e:	4620      	mov	r0, r4
 80a1570:	bd10      	pop	{r4, pc}

080a1572 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 80a1572:	b510      	push	{r4, lr}
 80a1574:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 80a1576:	6800      	ldr	r0, [r0, #0]
 80a1578:	b108      	cbz	r0, 80a157e <_ZN6String10invalidateEv+0xc>
 80a157a:	f7ff fb1d 	bl	80a0bb8 <free>
	buffer = NULL;
 80a157e:	2300      	movs	r3, #0
 80a1580:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 80a1582:	60a3      	str	r3, [r4, #8]
 80a1584:	6063      	str	r3, [r4, #4]
 80a1586:	bd10      	pop	{r4, pc}

080a1588 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 80a1588:	b538      	push	{r3, r4, r5, lr}
 80a158a:	4604      	mov	r4, r0
 80a158c:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 80a158e:	6800      	ldr	r0, [r0, #0]
 80a1590:	3101      	adds	r1, #1
 80a1592:	f7ff fb19 	bl	80a0bc8 <realloc>
	if (newbuffer) {
 80a1596:	b110      	cbz	r0, 80a159e <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 80a1598:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 80a159c:	2001      	movs	r0, #1
	}
	return 0;
}
 80a159e:	bd38      	pop	{r3, r4, r5, pc}

080a15a0 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a15a0:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 80a15a2:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 80a15a4:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 80a15a6:	b113      	cbz	r3, 80a15ae <_ZN6String7reserveEj+0xe>
 80a15a8:	6843      	ldr	r3, [r0, #4]
 80a15aa:	428b      	cmp	r3, r1
 80a15ac:	d207      	bcs.n	80a15be <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 80a15ae:	4620      	mov	r0, r4
 80a15b0:	f7ff ffea 	bl	80a1588 <_ZN6String12changeBufferEj>
 80a15b4:	b120      	cbz	r0, 80a15c0 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 80a15b6:	68a3      	ldr	r3, [r4, #8]
 80a15b8:	b90b      	cbnz	r3, 80a15be <_ZN6String7reserveEj+0x1e>
 80a15ba:	6822      	ldr	r2, [r4, #0]
 80a15bc:	7013      	strb	r3, [r2, #0]
 80a15be:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 80a15c0:	bd10      	pop	{r4, pc}

080a15c2 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a15c2:	b570      	push	{r4, r5, r6, lr}
 80a15c4:	460e      	mov	r6, r1
	if (!reserve(length)) {
 80a15c6:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 80a15c8:	4604      	mov	r4, r0
 80a15ca:	4615      	mov	r5, r2
	if (!reserve(length)) {
 80a15cc:	f7ff ffe8 	bl	80a15a0 <_ZN6String7reserveEj>
 80a15d0:	b918      	cbnz	r0, 80a15da <_ZN6String4copyEPKcj+0x18>
		invalidate();
 80a15d2:	4620      	mov	r0, r4
 80a15d4:	f7ff ffcd 	bl	80a1572 <_ZN6String10invalidateEv>
		return *this;
 80a15d8:	e009      	b.n	80a15ee <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 80a15da:	462a      	mov	r2, r5
 80a15dc:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 80a15de:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 80a15e0:	6820      	ldr	r0, [r4, #0]
 80a15e2:	f001 fded 	bl	80a31c0 <memcpy>
	buffer[len] = 0;
 80a15e6:	6822      	ldr	r2, [r4, #0]
 80a15e8:	68a3      	ldr	r3, [r4, #8]
 80a15ea:	2100      	movs	r1, #0
 80a15ec:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 80a15ee:	4620      	mov	r0, r4
 80a15f0:	bd70      	pop	{r4, r5, r6, pc}

080a15f2 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a15f2:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a15f4:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 80a15f6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a15f8:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a15fa:	6043      	str	r3, [r0, #4]
	len = 0;
 80a15fc:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a15fe:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 80a1600:	460d      	mov	r5, r1
 80a1602:	b139      	cbz	r1, 80a1614 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 80a1604:	4608      	mov	r0, r1
 80a1606:	f001 fe3a 	bl	80a327e <strlen>
 80a160a:	4629      	mov	r1, r5
 80a160c:	4602      	mov	r2, r0
 80a160e:	4620      	mov	r0, r4
 80a1610:	f7ff ffd7 	bl	80a15c2 <_ZN6String4copyEPKcj>
}
 80a1614:	4620      	mov	r0, r4
 80a1616:	bd38      	pop	{r3, r4, r5, pc}

080a1618 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 80a1618:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 80a161a:	b510      	push	{r4, lr}
 80a161c:	460b      	mov	r3, r1
 80a161e:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 80a1620:	d007      	beq.n	80a1632 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 80a1622:	6809      	ldr	r1, [r1, #0]
 80a1624:	b119      	cbz	r1, 80a162e <_ZN6StringaSERKS_+0x16>
 80a1626:	689a      	ldr	r2, [r3, #8]
 80a1628:	f7ff ffcb 	bl	80a15c2 <_ZN6String4copyEPKcj>
 80a162c:	e001      	b.n	80a1632 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 80a162e:	f7ff ffa0 	bl	80a1572 <_ZN6String10invalidateEv>

	return *this;
}
 80a1632:	4620      	mov	r0, r4
 80a1634:	bd10      	pop	{r4, pc}

080a1636 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 80a1636:	b510      	push	{r4, lr}
 80a1638:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a163a:	2300      	movs	r3, #0
 80a163c:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a163e:	6043      	str	r3, [r0, #4]
	len = 0;
 80a1640:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a1642:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 80a1644:	f7ff ffe8 	bl	80a1618 <_ZN6StringaSERKS_>
}
 80a1648:	4620      	mov	r0, r4
 80a164a:	bd10      	pop	{r4, pc}

080a164c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 80a164c:	b538      	push	{r3, r4, r5, lr}
 80a164e:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 80a1650:	460c      	mov	r4, r1
 80a1652:	b141      	cbz	r1, 80a1666 <_ZN6StringaSEPKc+0x1a>
 80a1654:	4608      	mov	r0, r1
 80a1656:	f001 fe12 	bl	80a327e <strlen>
 80a165a:	4621      	mov	r1, r4
 80a165c:	4602      	mov	r2, r0
 80a165e:	4628      	mov	r0, r5
 80a1660:	f7ff ffaf 	bl	80a15c2 <_ZN6String4copyEPKcj>
 80a1664:	e001      	b.n	80a166a <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 80a1666:	f7ff ff84 	bl	80a1572 <_ZN6String10invalidateEv>

	return *this;
}
 80a166a:	4628      	mov	r0, r5
 80a166c:	bd38      	pop	{r3, r4, r5, pc}

080a166e <_ZN6StringC1Efi>:
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a166e:	b530      	push	{r4, r5, lr}
 80a1670:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1672:	2300      	movs	r3, #0
	char buf[33];
	ultoa(value, buf, base);
	*this = buf;
}

String::String(float value, int decimalPlaces)
 80a1674:	b08b      	sub	sp, #44	; 0x2c
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a1676:	6003      	str	r3, [r0, #0]
	capacity = 0;
 80a1678:	6043      	str	r3, [r0, #4]
	len = 0;
 80a167a:	6083      	str	r3, [r0, #8]
	flags = 0;
 80a167c:	7303      	strb	r3, [r0, #12]

String::String(float value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a167e:	b2d5      	uxtb	r5, r2
 80a1680:	4608      	mov	r0, r1
 80a1682:	f000 fe1f 	bl	80a22c4 <__aeabi_f2d>
 80a1686:	ab01      	add	r3, sp, #4
 80a1688:	462a      	mov	r2, r5
 80a168a:	f7ff ff09 	bl	80a14a0 <_Z4dtoadhPc>
        *this = buf;
 80a168e:	a901      	add	r1, sp, #4
 80a1690:	4620      	mov	r0, r4
 80a1692:	f7ff ffdb 	bl	80a164c <_ZN6StringaSEPKc>
}
 80a1696:	4620      	mov	r0, r4
 80a1698:	b00b      	add	sp, #44	; 0x2c
 80a169a:	bd30      	pop	{r4, r5, pc}

080a169c <_ZN6StringC1Edi>:

String::String(double value, int decimalPlaces)
 80a169c:	b510      	push	{r4, lr}
 80a169e:	4604      	mov	r4, r0
 80a16a0:	b08a      	sub	sp, #40	; 0x28
 80a16a2:	4619      	mov	r1, r3
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16a4:	2300      	movs	r3, #0
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}

String::String(double value, int decimalPlaces)
 80a16a6:	4610      	mov	r0, r2
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 80a16a8:	6023      	str	r3, [r4, #0]
	capacity = 0;
 80a16aa:	6063      	str	r3, [r4, #4]
	len = 0;
 80a16ac:	60a3      	str	r3, [r4, #8]
	flags = 0;
 80a16ae:	7323      	strb	r3, [r4, #12]

String::String(double value, int decimalPlaces)
{
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
 80a16b0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
 80a16b4:	ab01      	add	r3, sp, #4
 80a16b6:	f7ff fef3 	bl	80a14a0 <_Z4dtoadhPc>
        *this = buf;
 80a16ba:	a901      	add	r1, sp, #4
 80a16bc:	4620      	mov	r0, r4
 80a16be:	f7ff ffc5 	bl	80a164c <_ZN6StringaSEPKc>
}
 80a16c2:	4620      	mov	r0, r4
 80a16c4:	b00a      	add	sp, #40	; 0x28
 80a16c6:	bd10      	pop	{r4, pc}

080a16c8 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
 80a16c8:	b570      	push	{r4, r5, r6, lr}
 80a16ca:	4604      	mov	r4, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
 80a16cc:	460e      	mov	r6, r1
 80a16ce:	b909      	cbnz	r1, 80a16d4 <_ZN6String6concatEPKcj+0xc>
 80a16d0:	2000      	movs	r0, #0
 80a16d2:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
 80a16d4:	b16a      	cbz	r2, 80a16f2 <_ZN6String6concatEPKcj+0x2a>
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
 80a16d6:	6883      	ldr	r3, [r0, #8]
 80a16d8:	18d5      	adds	r5, r2, r3
	if (!cstr) return 0;
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
 80a16da:	4629      	mov	r1, r5
 80a16dc:	f7ff ff60 	bl	80a15a0 <_ZN6String7reserveEj>
 80a16e0:	2800      	cmp	r0, #0
 80a16e2:	d0f5      	beq.n	80a16d0 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
 80a16e4:	6820      	ldr	r0, [r4, #0]
 80a16e6:	68a3      	ldr	r3, [r4, #8]
 80a16e8:	4631      	mov	r1, r6
 80a16ea:	4418      	add	r0, r3
 80a16ec:	f001 fda4 	bl	80a3238 <strcpy>
	len = newlen;
 80a16f0:	60a5      	str	r5, [r4, #8]

unsigned char String::concat(const char *cstr, unsigned int length)
{
	unsigned int newlen = len + length;
	if (!cstr) return 0;
	if (length == 0) return 1;
 80a16f2:	2001      	movs	r0, #1
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
 80a16f4:	bd70      	pop	{r4, r5, r6, pc}

080a16f6 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a16f6:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a16f8:	688a      	ldr	r2, [r1, #8]
 80a16fa:	6809      	ldr	r1, [r1, #0]
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
 80a16fc:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
 80a16fe:	f7ff ffe3 	bl	80a16c8 <_ZN6String6concatEPKcj>
 80a1702:	b910      	cbnz	r0, 80a170a <_ZplRK15StringSumHelperRK6String+0x14>
 80a1704:	4620      	mov	r0, r4
 80a1706:	f7ff ff34 	bl	80a1572 <_ZN6String10invalidateEv>
	return a;
}
 80a170a:	4620      	mov	r0, r4
 80a170c:	bd10      	pop	{r4, pc}

080a170e <_ZplRK15StringSumHelperPKc>:

StringSumHelper & operator + (const StringSumHelper &lhs, const char *cstr)
{
 80a170e:	b538      	push	{r3, r4, r5, lr}
 80a1710:	4604      	mov	r4, r0
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!cstr || !a.concat(cstr, strlen(cstr))) a.invalidate();
 80a1712:	460d      	mov	r5, r1
 80a1714:	b141      	cbz	r1, 80a1728 <_ZplRK15StringSumHelperPKc+0x1a>
 80a1716:	4608      	mov	r0, r1
 80a1718:	f001 fdb1 	bl	80a327e <strlen>
 80a171c:	4629      	mov	r1, r5
 80a171e:	4602      	mov	r2, r0
 80a1720:	4620      	mov	r0, r4
 80a1722:	f7ff ffd1 	bl	80a16c8 <_ZN6String6concatEPKcj>
 80a1726:	b910      	cbnz	r0, 80a172e <_ZplRK15StringSumHelperPKc+0x20>
 80a1728:	4620      	mov	r0, r4
 80a172a:	f7ff ff22 	bl	80a1572 <_ZN6String10invalidateEv>
	return a;
}
 80a172e:	4620      	mov	r0, r4
 80a1730:	bd38      	pop	{r3, r4, r5, pc}
	...

080a1734 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 80a1734:	b510      	push	{r4, lr}
 80a1736:	4604      	mov	r4, r0
 80a1738:	4608      	mov	r0, r1
 80a173a:	4611      	mov	r1, r2
 80a173c:	461a      	mov	r2, r3
    system_sleep(sleepMode, seconds, flags.value(), NULL);
 80a173e:	2300      	movs	r3, #0
 80a1740:	f7ff f9b6 	bl	80a0ab0 <system_sleep>
    System.sleepResult_ = SleepResult();
 80a1744:	4b07      	ldr	r3, [pc, #28]	; (80a1764 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x30>)
 80a1746:	2200      	movs	r2, #0
 80a1748:	701a      	strb	r2, [r3, #0]
 80a174a:	f64f 729c 	movw	r2, #65436	; 0xff9c
 80a174e:	805a      	strh	r2, [r3, #2]
 80a1750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80a1754:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 80a1756:	681a      	ldr	r2, [r3, #0]
 80a1758:	889b      	ldrh	r3, [r3, #4]
 80a175a:	6022      	str	r2, [r4, #0]
 80a175c:	80a3      	strh	r3, [r4, #4]
}
 80a175e:	4620      	mov	r0, r4
 80a1760:	bd10      	pop	{r4, pc}
 80a1762:	bf00      	nop
 80a1764:	20000460 	.word	0x20000460

080a1768 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a1768:	f64f 739c 	movw	r3, #65436	; 0xff9c
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
}
 80a176c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80a176e:	4c0d      	ldr	r4, [pc, #52]	; (80a17a4 <_GLOBAL__sub_I_System+0x3c>)
 80a1770:	2500      	movs	r5, #0
 80a1772:	8063      	strh	r3, [r4, #2]
 80a1774:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a1778:	4628      	mov	r0, r5
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80a177a:	80a3      	strh	r3, [r4, #4]
 80a177c:	7025      	strb	r5, [r4, #0]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80a177e:	f7ff f987 	bl	80a0a90 <set_system_mode>
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 80a1782:	a802      	add	r0, sp, #8
 80a1784:	f840 5d04 	str.w	r5, [r0, #-4]!
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 80a1788:	462a      	mov	r2, r5
 80a178a:	4629      	mov	r1, r5
 80a178c:	f7ff f846 	bl	80a081c <HAL_Core_Get_Last_Reset_Info>
        return reason;
 80a1790:	9b01      	ldr	r3, [sp, #4]
class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
        if (resetReason() == RESET_REASON_POWER_MANAGEMENT) {
 80a1792:	2b1e      	cmp	r3, #30
 80a1794:	d104      	bne.n	80a17a0 <_GLOBAL__sub_I_System+0x38>
            // Woken up from standby mode
            sleepResult_ = SleepResult(WAKEUP_REASON_PIN_OR_RTC, SYSTEM_ERROR_NONE, WKP);
 80a1796:	2303      	movs	r3, #3
 80a1798:	7023      	strb	r3, [r4, #0]
 80a179a:	2311      	movs	r3, #17
 80a179c:	8065      	strh	r5, [r4, #2]
 80a179e:	80a3      	strh	r3, [r4, #4]
 80a17a0:	b003      	add	sp, #12
 80a17a2:	bd30      	pop	{r4, r5, pc}
 80a17a4:	20000460 	.word	0x20000460

080a17a8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80a17a8:	4b02      	ldr	r3, [pc, #8]	; (80a17b4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80a17aa:	681a      	ldr	r2, [r3, #0]
 80a17ac:	4b02      	ldr	r3, [pc, #8]	; (80a17b8 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80a17ae:	601a      	str	r2, [r3, #0]
 80a17b0:	4770      	bx	lr
 80a17b2:	bf00      	nop
 80a17b4:	20000318 	.word	0x20000318
 80a17b8:	20000468 	.word	0x20000468

080a17bc <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80a17bc:	4770      	bx	lr

080a17be <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a17be:	7441      	strb	r1, [r0, #17]
 80a17c0:	4770      	bx	lr

080a17c2 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80a17c2:	7c00      	ldrb	r0, [r0, #16]
 80a17c4:	f7ff b914 	b.w	80a09f0 <HAL_USART_Available_Data_For_Write>

080a17c8 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80a17c8:	7c00      	ldrb	r0, [r0, #16]
 80a17ca:	f7ff b8e9 	b.w	80a09a0 <HAL_USART_Available_Data>

080a17ce <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80a17ce:	7c00      	ldrb	r0, [r0, #16]
 80a17d0:	f7ff b8f6 	b.w	80a09c0 <HAL_USART_Peek_Data>

080a17d4 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80a17d4:	7c00      	ldrb	r0, [r0, #16]
 80a17d6:	f7ff b8eb 	b.w	80a09b0 <HAL_USART_Read_Data>

080a17da <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80a17da:	7c00      	ldrb	r0, [r0, #16]
 80a17dc:	f7ff b8f8 	b.w	80a09d0 <HAL_USART_Flush_Data>

080a17e0 <_ZN11USARTSerialD0Ev>:
 80a17e0:	b510      	push	{r4, lr}
 80a17e2:	4604      	mov	r4, r0
 80a17e4:	f7fe fc5b 	bl	80a009e <_ZdlPv>
 80a17e8:	4620      	mov	r0, r4
 80a17ea:	bd10      	pop	{r4, pc}

080a17ec <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 80a17ec:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17ee:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 80a17f0:	4604      	mov	r4, r0
 80a17f2:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 80a17f4:	b925      	cbnz	r5, 80a1800 <_ZN11USARTSerial5writeEh+0x14>
 80a17f6:	7c00      	ldrb	r0, [r0, #16]
 80a17f8:	f7ff f8fa 	bl	80a09f0 <HAL_USART_Available_Data_For_Write>
 80a17fc:	2800      	cmp	r0, #0
 80a17fe:	dd05      	ble.n	80a180c <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1800:	4631      	mov	r1, r6
 80a1802:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 80a1804:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 80a1808:	f7ff b8c2 	b.w	80a0990 <HAL_USART_Write_Data>
  }
  return 0;
}
 80a180c:	4628      	mov	r0, r5
 80a180e:	bd70      	pop	{r4, r5, r6, pc}

080a1810 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1810:	b510      	push	{r4, lr}
 80a1812:	4604      	mov	r4, r0
 80a1814:	4608      	mov	r0, r1
 80a1816:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80a1818:	2200      	movs	r2, #0
 80a181a:	6062      	str	r2, [r4, #4]
 80a181c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80a1820:	60a2      	str	r2, [r4, #8]
 80a1822:	4a05      	ldr	r2, [pc, #20]	; (80a1838 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 80a1824:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 80a1826:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 80a1828:	2201      	movs	r2, #1
 80a182a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 80a182c:	461a      	mov	r2, r3
 80a182e:	f7ff f8a7 	bl	80a0980 <HAL_USART_Init>
}
 80a1832:	4620      	mov	r0, r4
 80a1834:	bd10      	pop	{r4, pc}
 80a1836:	bf00      	nop
 80a1838:	080a355c 	.word	0x080a355c

080a183c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 80a183c:	7c00      	ldrb	r0, [r0, #16]
 80a183e:	f7ff b8cf 	b.w	80a09e0 <HAL_USART_Is_Enabled>
	...

080a1844 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 80a1844:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 80a1846:	4d0c      	ldr	r5, [pc, #48]	; (80a1878 <_Z22__fetch_global_Serial1v+0x34>)
 80a1848:	6829      	ldr	r1, [r5, #0]
 80a184a:	f011 0401 	ands.w	r4, r1, #1
 80a184e:	d111      	bne.n	80a1874 <_Z22__fetch_global_Serial1v+0x30>
 80a1850:	4628      	mov	r0, r5
 80a1852:	f7fe fc26 	bl	80a00a2 <__cxa_guard_acquire>
 80a1856:	b168      	cbz	r0, 80a1874 <_Z22__fetch_global_Serial1v+0x30>
 80a1858:	4a08      	ldr	r2, [pc, #32]	; (80a187c <_Z22__fetch_global_Serial1v+0x38>)
 80a185a:	4621      	mov	r1, r4
 80a185c:	4b08      	ldr	r3, [pc, #32]	; (80a1880 <_Z22__fetch_global_Serial1v+0x3c>)
 80a185e:	4809      	ldr	r0, [pc, #36]	; (80a1884 <_Z22__fetch_global_Serial1v+0x40>)
 80a1860:	f7ff ffd6 	bl	80a1810 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80a1864:	4628      	mov	r0, r5
 80a1866:	f7fe fc21 	bl	80a00ac <__cxa_guard_release>
 80a186a:	4a07      	ldr	r2, [pc, #28]	; (80a1888 <_Z22__fetch_global_Serial1v+0x44>)
 80a186c:	4907      	ldr	r1, [pc, #28]	; (80a188c <_Z22__fetch_global_Serial1v+0x48>)
 80a186e:	4805      	ldr	r0, [pc, #20]	; (80a1884 <_Z22__fetch_global_Serial1v+0x40>)
 80a1870:	f000 fa74 	bl	80a1d5c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80a1874:	4803      	ldr	r0, [pc, #12]	; (80a1884 <_Z22__fetch_global_Serial1v+0x40>)
 80a1876:	bd38      	pop	{r3, r4, r5, pc}
 80a1878:	20000504 	.word	0x20000504
 80a187c:	20000508 	.word	0x20000508
 80a1880:	20000480 	.word	0x20000480
 80a1884:	2000046c 	.word	0x2000046c
 80a1888:	20000380 	.word	0x20000380
 80a188c:	080a17bd 	.word	0x080a17bd

080a1890 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80a1890:	7441      	strb	r1, [r0, #17]
 80a1892:	4770      	bx	lr

080a1894 <_ZN9USBSerialD1Ev>:
#include "spark_wiring_platform.h"
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"

class USBSerial : public Stream
 80a1894:	4770      	bx	lr

080a1896 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80a1896:	2100      	movs	r1, #0
 80a1898:	7c00      	ldrb	r0, [r0, #16]
 80a189a:	f7ff b8d1 	b.w	80a0a40 <HAL_USB_USART_Receive_Data>

080a189e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80a189e:	2101      	movs	r1, #1
 80a18a0:	7c00      	ldrb	r0, [r0, #16]
 80a18a2:	f7ff b8cd 	b.w	80a0a40 <HAL_USB_USART_Receive_Data>

080a18a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80a18a6:	7c00      	ldrb	r0, [r0, #16]
 80a18a8:	f7ff b8c2 	b.w	80a0a30 <HAL_USB_USART_Available_Data_For_Write>

080a18ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80a18ac:	7c00      	ldrb	r0, [r0, #16]
 80a18ae:	f7ff b8b7 	b.w	80a0a20 <HAL_USB_USART_Available_Data>

080a18b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80a18b2:	b538      	push	{r3, r4, r5, lr}
 80a18b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a18b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 80a18b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80a18ba:	f7ff f8b9 	bl	80a0a30 <HAL_USB_USART_Available_Data_For_Write>
 80a18be:	2800      	cmp	r0, #0
 80a18c0:	dc01      	bgt.n	80a18c6 <_ZN9USBSerial5writeEh+0x14>
 80a18c2:	7c60      	ldrb	r0, [r4, #17]
 80a18c4:	b120      	cbz	r0, 80a18d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 80a18c6:	4629      	mov	r1, r5
 80a18c8:	7c20      	ldrb	r0, [r4, #16]
 80a18ca:	f7ff f8c1 	bl	80a0a50 <HAL_USB_USART_Send_Data>
    return 1;
 80a18ce:	2001      	movs	r0, #1
  }
  return 0;
}
 80a18d0:	bd38      	pop	{r3, r4, r5, pc}

080a18d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 80a18d2:	7c00      	ldrb	r0, [r0, #16]
 80a18d4:	f7ff b8c4 	b.w	80a0a60 <HAL_USB_USART_Flush_Data>

080a18d8 <_ZN9USBSerialD0Ev>:
 80a18d8:	b510      	push	{r4, lr}
 80a18da:	4604      	mov	r4, r0
 80a18dc:	f7fe fbdf 	bl	80a009e <_ZdlPv>
 80a18e0:	4620      	mov	r0, r4
 80a18e2:	bd10      	pop	{r4, pc}

080a18e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 80a18e4:	b510      	push	{r4, lr}
 80a18e6:	4604      	mov	r4, r0
 80a18e8:	2300      	movs	r3, #0
 80a18ea:	6063      	str	r3, [r4, #4]
 80a18ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80a18f0:	60a3      	str	r3, [r4, #8]
 80a18f2:	4b05      	ldr	r3, [pc, #20]	; (80a1908 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 80a18f4:	4608      	mov	r0, r1
 80a18f6:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 80a18f8:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 80a18fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 80a18fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 80a18fe:	4611      	mov	r1, r2
 80a1900:	f7ff f87e 	bl	80a0a00 <HAL_USB_USART_Init>
}
 80a1904:	4620      	mov	r0, r4
 80a1906:	bd10      	pop	{r4, pc}
 80a1908:	080a358c 	.word	0x080a358c

080a190c <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
 80a190c:	2200      	movs	r2, #0
 80a190e:	7c00      	ldrb	r0, [r0, #16]
 80a1910:	f7ff b87e 	b.w	80a0a10 <HAL_USB_USART_Begin>

080a1914 <_ZN9USBSerial11isConnectedEv>:
bool USBSerial::isEnabled() {
  return HAL_USB_USART_Is_Enabled(_serial);
}

bool USBSerial::isConnected() {
  return HAL_USB_USART_Is_Connected(_serial);
 80a1914:	7c00      	ldrb	r0, [r0, #16]
 80a1916:	f7ff b8ab 	b.w	80a0a70 <HAL_USB_USART_Is_Connected>
	...

080a191c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 80a191c:	b510      	push	{r4, lr}
 80a191e:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1920:	2214      	movs	r2, #20
 80a1922:	2100      	movs	r1, #0
 80a1924:	f001 fc57 	bl	80a31d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a1928:	4b05      	ldr	r3, [pc, #20]	; (80a1940 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a192a:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 80a192c:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 80a192e:	4b05      	ldr	r3, [pc, #20]	; (80a1944 <_Z19acquireSerialBufferv+0x28>)
 80a1930:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a1932:	f240 1301 	movw	r3, #257	; 0x101
 80a1936:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a1938:	2381      	movs	r3, #129	; 0x81
 80a193a:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a193c:	bd10      	pop	{r4, pc}
 80a193e:	bf00      	nop
 80a1940:	20000611 	.word	0x20000611
 80a1944:	20000590 	.word	0x20000590

080a1948 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 80a1948:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a194a:	4d0e      	ldr	r5, [pc, #56]	; (80a1984 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 80a194c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 80a194e:	a801      	add	r0, sp, #4
 80a1950:	f7ff ffe4 	bl	80a191c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 80a1954:	6829      	ldr	r1, [r5, #0]
 80a1956:	f011 0401 	ands.w	r4, r1, #1
 80a195a:	d110      	bne.n	80a197e <_Z16_fetch_usbserialv+0x36>
 80a195c:	4628      	mov	r0, r5
 80a195e:	f7fe fba0 	bl	80a00a2 <__cxa_guard_acquire>
 80a1962:	b160      	cbz	r0, 80a197e <_Z16_fetch_usbserialv+0x36>
 80a1964:	aa01      	add	r2, sp, #4
 80a1966:	4621      	mov	r1, r4
 80a1968:	4807      	ldr	r0, [pc, #28]	; (80a1988 <_Z16_fetch_usbserialv+0x40>)
 80a196a:	f7ff ffbb 	bl	80a18e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a196e:	4628      	mov	r0, r5
 80a1970:	f7fe fb9c 	bl	80a00ac <__cxa_guard_release>
 80a1974:	4a05      	ldr	r2, [pc, #20]	; (80a198c <_Z16_fetch_usbserialv+0x44>)
 80a1976:	4906      	ldr	r1, [pc, #24]	; (80a1990 <_Z16_fetch_usbserialv+0x48>)
 80a1978:	4803      	ldr	r0, [pc, #12]	; (80a1988 <_Z16_fetch_usbserialv+0x40>)
 80a197a:	f000 f9ef 	bl	80a1d5c <__aeabi_atexit>
	return _usbserial;
}
 80a197e:	4802      	ldr	r0, [pc, #8]	; (80a1988 <_Z16_fetch_usbserialv+0x40>)
 80a1980:	b007      	add	sp, #28
 80a1982:	bd30      	pop	{r4, r5, pc}
 80a1984:	2000058c 	.word	0x2000058c
 80a1988:	20000714 	.word	0x20000714
 80a198c:	20000380 	.word	0x20000380
 80a1990:	080a1895 	.word	0x080a1895

080a1994 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80a1994:	b510      	push	{r4, lr}
 80a1996:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80a1998:	2214      	movs	r2, #20
 80a199a:	2100      	movs	r1, #0
 80a199c:	f001 fc1b 	bl	80a31d6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a19a0:	4b05      	ldr	r3, [pc, #20]	; (80a19b8 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80a19a2:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80a19a4:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80a19a6:	4b05      	ldr	r3, [pc, #20]	; (80a19bc <_Z23acquireUSBSerial1Bufferv+0x28>)
 80a19a8:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80a19aa:	f240 1301 	movw	r3, #257	; 0x101
 80a19ae:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80a19b0:	2381      	movs	r3, #129	; 0x81
 80a19b2:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80a19b4:	bd10      	pop	{r4, pc}
 80a19b6:	bf00      	nop
 80a19b8:	200007c4 	.word	0x200007c4
 80a19bc:	2000072c 	.word	0x2000072c

080a19c0 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80a19c0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a19c2:	4c0e      	ldr	r4, [pc, #56]	; (80a19fc <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80a19c4:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80a19c6:	a801      	add	r0, sp, #4
 80a19c8:	f7ff ffe4 	bl	80a1994 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80a19cc:	6823      	ldr	r3, [r4, #0]
 80a19ce:	07db      	lsls	r3, r3, #31
 80a19d0:	d410      	bmi.n	80a19f4 <_Z17_fetch_usbserial1v+0x34>
 80a19d2:	4620      	mov	r0, r4
 80a19d4:	f7fe fb65 	bl	80a00a2 <__cxa_guard_acquire>
 80a19d8:	b160      	cbz	r0, 80a19f4 <_Z17_fetch_usbserial1v+0x34>
 80a19da:	aa01      	add	r2, sp, #4
 80a19dc:	2101      	movs	r1, #1
 80a19de:	4808      	ldr	r0, [pc, #32]	; (80a1a00 <_Z17_fetch_usbserial1v+0x40>)
 80a19e0:	f7ff ff80 	bl	80a18e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80a19e4:	4620      	mov	r0, r4
 80a19e6:	f7fe fb61 	bl	80a00ac <__cxa_guard_release>
 80a19ea:	4a06      	ldr	r2, [pc, #24]	; (80a1a04 <_Z17_fetch_usbserial1v+0x44>)
 80a19ec:	4906      	ldr	r1, [pc, #24]	; (80a1a08 <_Z17_fetch_usbserial1v+0x48>)
 80a19ee:	4804      	ldr	r0, [pc, #16]	; (80a1a00 <_Z17_fetch_usbserial1v+0x40>)
 80a19f0:	f000 f9b4 	bl	80a1d5c <__aeabi_atexit>
  return _usbserial1;
}
 80a19f4:	4802      	ldr	r0, [pc, #8]	; (80a1a00 <_Z17_fetch_usbserial1v+0x40>)
 80a19f6:	b006      	add	sp, #24
 80a19f8:	bd10      	pop	{r4, pc}
 80a19fa:	bf00      	nop
 80a19fc:	20000728 	.word	0x20000728
 80a1a00:	200007b0 	.word	0x200007b0
 80a1a04:	20000380 	.word	0x20000380
 80a1a08:	080a1895 	.word	0x080a1895

080a1a0c <_ZN5spark9WiFiClassD1Ev>:
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
    ~WiFiClass() {}
 80a1a0c:	4770      	bx	lr

080a1a0e <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
 80a1a0e:	2200      	movs	r2, #0
 80a1a10:	4611      	mov	r1, r2
 80a1a12:	4610      	mov	r0, r2
 80a1a14:	f7ff b8b8 	b.w	80a0b88 <network_ready>

080a1a18 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
    void setIPAddressSource(IPAddressSource source) {
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() {}
 80a1a18:	4803      	ldr	r0, [pc, #12]	; (80a1a28 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
 80a1a1a:	4b04      	ldr	r3, [pc, #16]	; (80a1a2c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x14>)
one second timeout is reached). If the aforementioned "bug" is ever fixed by
TI, no changes need to be made to this function, as it would be implemented
the same way.
*****************************************************************************/

    WiFiClass WiFi;
 80a1a1c:	4a04      	ldr	r2, [pc, #16]	; (80a1a30 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x18>)
 80a1a1e:	4905      	ldr	r1, [pc, #20]	; (80a1a34 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x1c>)
 80a1a20:	6003      	str	r3, [r0, #0]
 80a1a22:	f000 b99b 	b.w	80a1d5c <__aeabi_atexit>
 80a1a26:	bf00      	nop
 80a1a28:	200008c8 	.word	0x200008c8
 80a1a2c:	080a35bc 	.word	0x080a35bc
 80a1a30:	20000380 	.word	0x20000380
 80a1a34:	080a1a0d 	.word	0x080a1a0d

080a1a38 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
 80a1a38:	b510      	push	{r4, lr}
 80a1a3a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
 80a1a3c:	f001 fc1f 	bl	80a327e <strlen>
 80a1a40:	3801      	subs	r0, #1
 80a1a42:	1823      	adds	r3, r4, r0
 80a1a44:	4620      	mov	r0, r4
	while(i<j){
 80a1a46:	4298      	cmp	r0, r3
 80a1a48:	d206      	bcs.n	80a1a58 <_Z11str_reversePc+0x20>
		c = *i;
 80a1a4a:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
 80a1a4c:	7819      	ldrb	r1, [r3, #0]
 80a1a4e:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
 80a1a52:	f803 2901 	strb.w	r2, [r3], #-1
__attribute__((weak)) void str_reverse(char* buffer){
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
	while(i<j){
 80a1a56:	e7f6      	b.n	80a1a46 <_Z11str_reversePc+0xe>
 80a1a58:	bd10      	pop	{r4, pc}

080a1a5a <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
 80a1a5a:	b570      	push	{r4, r5, r6, lr}
 80a1a5c:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
 80a1a5e:	1e91      	subs	r1, r2, #2
 80a1a60:	2922      	cmp	r1, #34	; 0x22
 80a1a62:	d820      	bhi.n	80a1aa6 <ultoa+0x4c>
 80a1a64:	4625      	mov	r5, r4
 80a1a66:	4629      	mov	r1, r5
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1a68:	b910      	cbnz	r0, 80a1a70 <ultoa+0x16>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a6a:	4423      	add	r3, r4
            *ptr++ = '0';
 80a1a6c:	2230      	movs	r2, #48	; 0x30
 80a1a6e:	e00e      	b.n	80a1a8e <ultoa+0x34>
	div_t result;
	while(a){
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
 80a1a70:	fbb0 f6f2 	udiv	r6, r0, r2
            result.rem = a%radix;
 80a1a74:	fb02 0016 	mls	r0, r2, r6, r0
            *ptr = result.rem;
 80a1a78:	b2c1      	uxtb	r1, r0
            if(result.rem<10){
 80a1a7a:	2809      	cmp	r0, #9
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
            result.rem = a%radix;
            *ptr = result.rem;
 80a1a7c:	f805 1b01 	strb.w	r1, [r5], #1
            if(result.rem<10){
                *ptr += '0';
 80a1a80:	bf94      	ite	ls
 80a1a82:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
 80a1a84:	3157      	addhi	r1, #87	; 0x57
 80a1a86:	f805 1c01 	strb.w	r1, [r5, #-1]
            }
            ++ptr;
            a = result.quot;
 80a1a8a:	4630      	mov	r0, r6
		return NULL;
	}
	char* ptr=buffer;

	div_t result;
	while(a){
 80a1a8c:	e7eb      	b.n	80a1a66 <ultoa+0xc>
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a8e:	4299      	cmp	r1, r3
 80a1a90:	d202      	bcs.n	80a1a98 <ultoa+0x3e>
            *ptr++ = '0';
 80a1a92:	f801 2b01 	strb.w	r2, [r1], #1
                *ptr += 'a'-10;
            }
            ++ptr;
            a = result.quot;
	}
        while (ptr < buffer+pad)
 80a1a96:	e7fa      	b.n	80a1a8e <ultoa+0x34>
            *ptr++ = '0';

	*ptr = '\0';
 80a1a98:	2300      	movs	r3, #0
	str_reverse(buffer);
 80a1a9a:	4620      	mov	r0, r4
            a = result.quot;
	}
        while (ptr < buffer+pad)
            *ptr++ = '0';

	*ptr = '\0';
 80a1a9c:	700b      	strb	r3, [r1, #0]
	str_reverse(buffer);
 80a1a9e:	f7ff ffcb 	bl	80a1a38 <_Z11str_reversePc>
	return buffer;
 80a1aa2:	4620      	mov	r0, r4
 80a1aa4:	bd70      	pop	{r4, r5, r6, pc}
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
	if(radix<2 || radix>36){
		return NULL;
 80a1aa6:	2000      	movs	r0, #0
            *ptr++ = '0';

	*ptr = '\0';
	str_reverse(buffer);
	return buffer;
}
 80a1aa8:	bd70      	pop	{r4, r5, r6, pc}
	...

080a1aac <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 80a1aac:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 80a1aae:	4b14      	ldr	r3, [pc, #80]	; (80a1b00 <serialEventRun+0x54>)
 80a1ab0:	b133      	cbz	r3, 80a1ac0 <serialEventRun+0x14>
 80a1ab2:	f7ff ff49 	bl	80a1948 <_Z16_fetch_usbserialv>
 80a1ab6:	6803      	ldr	r3, [r0, #0]
 80a1ab8:	691b      	ldr	r3, [r3, #16]
 80a1aba:	4798      	blx	r3
 80a1abc:	2800      	cmp	r0, #0
 80a1abe:	dc16      	bgt.n	80a1aee <serialEventRun+0x42>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 80a1ac0:	4b10      	ldr	r3, [pc, #64]	; (80a1b04 <serialEventRun+0x58>)
 80a1ac2:	b133      	cbz	r3, 80a1ad2 <serialEventRun+0x26>
 80a1ac4:	f7ff febe 	bl	80a1844 <_Z22__fetch_global_Serial1v>
 80a1ac8:	6803      	ldr	r3, [r0, #0]
 80a1aca:	691b      	ldr	r3, [r3, #16]
 80a1acc:	4798      	blx	r3
 80a1ace:	2800      	cmp	r0, #0
 80a1ad0:	dc10      	bgt.n	80a1af4 <serialEventRun+0x48>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 80a1ad2:	4b0d      	ldr	r3, [pc, #52]	; (80a1b08 <serialEventRun+0x5c>)
 80a1ad4:	b10b      	cbz	r3, 80a1ada <serialEventRun+0x2e>
 80a1ad6:	f3af 8000 	nop.w
#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 80a1ada:	4b0c      	ldr	r3, [pc, #48]	; (80a1b0c <serialEventRun+0x60>)
 80a1adc:	b17b      	cbz	r3, 80a1afe <serialEventRun+0x52>
 80a1ade:	f7ff ff6f 	bl	80a19c0 <_Z17_fetch_usbserial1v>
 80a1ae2:	6803      	ldr	r3, [r0, #0]
 80a1ae4:	691b      	ldr	r3, [r3, #16]
 80a1ae6:	4798      	blx	r3
 80a1ae8:	2800      	cmp	r0, #0
 80a1aea:	dc06      	bgt.n	80a1afa <serialEventRun+0x4e>
 80a1aec:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 80a1aee:	f3af 8000 	nop.w
 80a1af2:	e7e5      	b.n	80a1ac0 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80a1af4:	f3af 8000 	nop.w
 80a1af8:	e7eb      	b.n	80a1ad2 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80a1afa:	f3af 8000 	nop.w
 80a1afe:	bd08      	pop	{r3, pc}
	...

080a1b10 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80a1b10:	b508      	push	{r3, lr}
	serialEventRun();
 80a1b12:	f7ff ffcb 	bl	80a1aac <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80a1b16:	f7fe fe99 	bl	80a084c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80a1b1a:	4b01      	ldr	r3, [pc, #4]	; (80a1b20 <_post_loop+0x10>)
 80a1b1c:	6018      	str	r0, [r3, #0]
 80a1b1e:	bd08      	pop	{r3, pc}
 80a1b20:	200008d4 	.word	0x200008d4

080a1b24 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80a1b24:	4802      	ldr	r0, [pc, #8]	; (80a1b30 <_Z33system_initialize_user_backup_ramv+0xc>)
 80a1b26:	4a03      	ldr	r2, [pc, #12]	; (80a1b34 <_Z33system_initialize_user_backup_ramv+0x10>)
 80a1b28:	4903      	ldr	r1, [pc, #12]	; (80a1b38 <_Z33system_initialize_user_backup_ramv+0x14>)
 80a1b2a:	1a12      	subs	r2, r2, r0
 80a1b2c:	f001 bb48 	b.w	80a31c0 <memcpy>
 80a1b30:	40024000 	.word	0x40024000
 80a1b34:	40024004 	.word	0x40024004
 80a1b38:	080a3668 	.word	0x080a3668

080a1b3c <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80a1b3c:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b3e:	2300      	movs	r3, #0
 80a1b40:	9300      	str	r3, [sp, #0]
 80a1b42:	461a      	mov	r2, r3
 80a1b44:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b48:	f7fe ffd4 	bl	80a0af4 <system_ctrl_set_result>
}
 80a1b4c:	b003      	add	sp, #12
 80a1b4e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080a1b54 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80a1b54:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80a1b56:	8843      	ldrh	r3, [r0, #2]
 80a1b58:	2b0a      	cmp	r3, #10
 80a1b5a:	d008      	beq.n	80a1b6e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80a1b5c:	2b50      	cmp	r3, #80	; 0x50
 80a1b5e:	d109      	bne.n	80a1b74 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80a1b60:	4b09      	ldr	r3, [pc, #36]	; (80a1b88 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80a1b62:	681b      	ldr	r3, [r3, #0]
 80a1b64:	b13b      	cbz	r3, 80a1b76 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80a1b66:	b003      	add	sp, #12
 80a1b68:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80a1b6c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80a1b6e:	f7ff ffe5 	bl	80a1b3c <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80a1b72:	e006      	b.n	80a1b82 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80a1b74:	2300      	movs	r3, #0
 80a1b76:	9300      	str	r3, [sp, #0]
 80a1b78:	461a      	mov	r2, r3
 80a1b7a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80a1b7e:	f7fe ffb9 	bl	80a0af4 <system_ctrl_set_result>
        break;
    }
}
 80a1b82:	b003      	add	sp, #12
 80a1b84:	f85d fb04 	ldr.w	pc, [sp], #4
 80a1b88:	200008cc 	.word	0x200008cc

080a1b8c <module_user_init_hook>:

void module_user_init_hook()
{
 80a1b8c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 80a1b8e:	4c10      	ldr	r4, [pc, #64]	; (80a1bd0 <module_user_init_hook+0x44>)
 80a1b90:	4d10      	ldr	r5, [pc, #64]	; (80a1bd4 <module_user_init_hook+0x48>)
 80a1b92:	6823      	ldr	r3, [r4, #0]
 80a1b94:	42ab      	cmp	r3, r5
 80a1b96:	4b10      	ldr	r3, [pc, #64]	; (80a1bd8 <module_user_init_hook+0x4c>)
 80a1b98:	bf0c      	ite	eq
 80a1b9a:	2201      	moveq	r2, #1
 80a1b9c:	2200      	movne	r2, #0
 80a1b9e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 80a1ba0:	d002      	beq.n	80a1ba8 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 80a1ba2:	f7ff ffbf 	bl	80a1b24 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 80a1ba6:	6025      	str	r5, [r4, #0]
#endif

    // todo - add a RNG define for that capability
#if defined(STM32F2XX)
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    srand(HAL_RNG_GetRandomNumber());
 80a1ba8:	f7fe fe40 	bl	80a082c <HAL_RNG_GetRandomNumber>
 80a1bac:	f001 fb1c 	bl	80a31e8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 80a1bb0:	4b0a      	ldr	r3, [pc, #40]	; (80a1bdc <module_user_init_hook+0x50>)
 80a1bb2:	b11b      	cbz	r3, 80a1bbc <module_user_init_hook+0x30>
        uint32_t seed = HAL_RNG_GetRandomNumber();
 80a1bb4:	f7fe fe3a 	bl	80a082c <HAL_RNG_GetRandomNumber>
        random_seed_from_cloud(seed);
 80a1bb8:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 80a1bbc:	2100      	movs	r1, #0
 80a1bbe:	4807      	ldr	r0, [pc, #28]	; (80a1bdc <module_user_init_hook+0x50>)
 80a1bc0:	f7fe ffca 	bl	80a0b58 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 80a1bc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 80a1bc8:	2100      	movs	r1, #0
 80a1bca:	4805      	ldr	r0, [pc, #20]	; (80a1be0 <module_user_init_hook+0x54>)
 80a1bcc:	f7fe bf88 	b.w	80a0ae0 <system_ctrl_set_app_request_handler>
 80a1bd0:	40024000 	.word	0x40024000
 80a1bd4:	9a271c1e 	.word	0x9a271c1e
 80a1bd8:	200008d0 	.word	0x200008d0
 80a1bdc:	00000000 	.word	0x00000000
 80a1be0:	080a1b55 	.word	0x080a1b55

080a1be4 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 80a1be4:	b510      	push	{r4, lr}
 80a1be6:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 80a1be8:	480f      	ldr	r0, [pc, #60]	; (80a1c28 <pinAvailable+0x44>)
 80a1bea:	f7ff fc55 	bl	80a1498 <_ZN8SPIClass9isEnabledEv>
 80a1bee:	b128      	cbz	r0, 80a1bfc <pinAvailable+0x18>
 80a1bf0:	f1a4 030d 	sub.w	r3, r4, #13
 80a1bf4:	2b02      	cmp	r3, #2
 80a1bf6:	d801      	bhi.n	80a1bfc <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80a1bf8:	2000      	movs	r0, #0
 80a1bfa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80a1bfc:	f000 f854 	bl	80a1ca8 <_Z19__fetch_global_Wirev>
 80a1c00:	f7ff fb06 	bl	80a1210 <_ZN7TwoWire9isEnabledEv>
 80a1c04:	b108      	cbz	r0, 80a1c0a <pinAvailable+0x26>
 80a1c06:	2c01      	cmp	r4, #1
 80a1c08:	d9f6      	bls.n	80a1bf8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80a1c0a:	f7ff fe1b 	bl	80a1844 <_Z22__fetch_global_Serial1v>
 80a1c0e:	f7ff fe15 	bl	80a183c <_ZN11USARTSerial9isEnabledEv>
 80a1c12:	b118      	cbz	r0, 80a1c1c <pinAvailable+0x38>
 80a1c14:	f1a4 0312 	sub.w	r3, r4, #18
 80a1c18:	2b01      	cmp	r3, #1
 80a1c1a:	d9ed      	bls.n	80a1bf8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80a1c1c:	2c17      	cmp	r4, #23
 80a1c1e:	bf8c      	ite	hi
 80a1c20:	2000      	movhi	r0, #0
 80a1c22:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80a1c24:	bd10      	pop	{r4, pc}
 80a1c26:	bf00      	nop
 80a1c28:	20000908 	.word	0x20000908

080a1c2c <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c2c:	2817      	cmp	r0, #23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80a1c2e:	b538      	push	{r3, r4, r5, lr}
 80a1c30:	4604      	mov	r4, r0
 80a1c32:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80a1c34:	d80a      	bhi.n	80a1c4c <pinMode+0x20>
 80a1c36:	29ff      	cmp	r1, #255	; 0xff
 80a1c38:	d008      	beq.n	80a1c4c <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c3a:	f7ff ffd3 	bl	80a1be4 <pinAvailable>
 80a1c3e:	b128      	cbz	r0, 80a1c4c <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c40:	4629      	mov	r1, r5
 80a1c42:	4620      	mov	r0, r4
}
 80a1c44:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80a1c48:	f7fe be18 	b.w	80a087c <HAL_Pin_Mode>
 80a1c4c:	bd38      	pop	{r3, r4, r5, pc}

080a1c4e <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80a1c4e:	b510      	push	{r4, lr}
 80a1c50:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80a1c52:	f7fe fe1b 	bl	80a088c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 80a1c56:	3804      	subs	r0, #4
 80a1c58:	b2c0      	uxtb	r0, r0
 80a1c5a:	2801      	cmp	r0, #1
 80a1c5c:	d908      	bls.n	80a1c70 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 80a1c5e:	4620      	mov	r0, r4
 80a1c60:	f7ff ffc0 	bl	80a1be4 <pinAvailable>
 80a1c64:	b120      	cbz	r0, 80a1c70 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c66:	4620      	mov	r0, r4
}
 80a1c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 80a1c6c:	f7fe be16 	b.w	80a089c <HAL_GPIO_Read>
}
 80a1c70:	2000      	movs	r0, #0
 80a1c72:	bd10      	pop	{r4, pc}

080a1c74 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 80a1c74:	b510      	push	{r4, lr}
 80a1c76:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 80a1c78:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 80a1c7a:	bf9c      	itt	ls
 80a1c7c:	340a      	addls	r4, #10
 80a1c7e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80a1c80:	4620      	mov	r0, r4
 80a1c82:	f7ff ffaf 	bl	80a1be4 <pinAvailable>
 80a1c86:	b150      	cbz	r0, 80a1c9e <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 80a1c88:	2103      	movs	r1, #3
 80a1c8a:	4620      	mov	r0, r4
 80a1c8c:	f7fe fdee 	bl	80a086c <HAL_Validate_Pin_Function>
 80a1c90:	2803      	cmp	r0, #3
 80a1c92:	d104      	bne.n	80a1c9e <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1c94:	4620      	mov	r0, r4
}
 80a1c96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 80a1c9a:	f7fe be17 	b.w	80a08cc <HAL_ADC_Read>
}
 80a1c9e:	2000      	movs	r0, #0
 80a1ca0:	bd10      	pop	{r4, pc}

080a1ca2 <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 80a1ca2:	f7fe be1b 	b.w	80a08dc <HAL_Pulse_In>
	...

080a1ca8 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 80a1ca8:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 80a1caa:	4d0b      	ldr	r5, [pc, #44]	; (80a1cd8 <_Z19__fetch_global_Wirev+0x30>)
 80a1cac:	6829      	ldr	r1, [r5, #0]
 80a1cae:	f011 0401 	ands.w	r4, r1, #1
 80a1cb2:	d10f      	bne.n	80a1cd4 <_Z19__fetch_global_Wirev+0x2c>
 80a1cb4:	4628      	mov	r0, r5
 80a1cb6:	f7fe f9f4 	bl	80a00a2 <__cxa_guard_acquire>
 80a1cba:	b158      	cbz	r0, 80a1cd4 <_Z19__fetch_global_Wirev+0x2c>
 80a1cbc:	4621      	mov	r1, r4
 80a1cbe:	4807      	ldr	r0, [pc, #28]	; (80a1cdc <_Z19__fetch_global_Wirev+0x34>)
 80a1cc0:	f7ff fa94 	bl	80a11ec <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80a1cc4:	4628      	mov	r0, r5
 80a1cc6:	f7fe f9f1 	bl	80a00ac <__cxa_guard_release>
 80a1cca:	4a05      	ldr	r2, [pc, #20]	; (80a1ce0 <_Z19__fetch_global_Wirev+0x38>)
 80a1ccc:	4905      	ldr	r1, [pc, #20]	; (80a1ce4 <_Z19__fetch_global_Wirev+0x3c>)
 80a1cce:	4803      	ldr	r0, [pc, #12]	; (80a1cdc <_Z19__fetch_global_Wirev+0x34>)
 80a1cd0:	f000 f844 	bl	80a1d5c <__aeabi_atexit>
	return wire;
}
 80a1cd4:	4801      	ldr	r0, [pc, #4]	; (80a1cdc <_Z19__fetch_global_Wirev+0x34>)
 80a1cd6:	bd38      	pop	{r3, r4, r5, pc}
 80a1cd8:	200008d8 	.word	0x200008d8
 80a1cdc:	200008dc 	.word	0x200008dc
 80a1ce0:	20000380 	.word	0x20000380
 80a1ce4:	080a1195 	.word	0x080a1195

080a1ce8 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

const IPAddress INADDR_NONE(0, 0, 0, 0);
 80a1ce8:	b513      	push	{r0, r1, r4, lr}
 80a1cea:	4c08      	ldr	r4, [pc, #32]	; (80a1d0c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 80a1cec:	2300      	movs	r3, #0
 80a1cee:	461a      	mov	r2, r3
 80a1cf0:	4619      	mov	r1, r3
 80a1cf2:	9300      	str	r3, [sp, #0]
 80a1cf4:	4620      	mov	r0, r4
 80a1cf6:	f7ff fb1f 	bl	80a1338 <_ZN9IPAddressC1Ehhhh>
 80a1cfa:	4620      	mov	r0, r4
 80a1cfc:	4a04      	ldr	r2, [pc, #16]	; (80a1d10 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80a1cfe:	4905      	ldr	r1, [pc, #20]	; (80a1d14 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80a1d00:	b002      	add	sp, #8
 80a1d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80a1d06:	f000 b829 	b.w	80a1d5c <__aeabi_atexit>
 80a1d0a:	bf00      	nop
 80a1d0c:	200008f0 	.word	0x200008f0
 80a1d10:	20000380 	.word	0x20000380
 80a1d14:	080a12dd 	.word	0x080a12dd

080a1d18 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d18:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d1a:	4c0c      	ldr	r4, [pc, #48]	; (80a1d4c <_GLOBAL__sub_I_SPI+0x34>)
 80a1d1c:	4e0c      	ldr	r6, [pc, #48]	; (80a1d50 <_GLOBAL__sub_I_SPI+0x38>)
 80a1d1e:	4d0d      	ldr	r5, [pc, #52]	; (80a1d54 <_GLOBAL__sub_I_SPI+0x3c>)
 80a1d20:	2100      	movs	r1, #0
 80a1d22:	4620      	mov	r0, r4
 80a1d24:	f7ff fba4 	bl	80a1470 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1d28:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d2a:	4c0b      	ldr	r4, [pc, #44]	; (80a1d58 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80a1d2c:	4632      	mov	r2, r6
 80a1d2e:	4629      	mov	r1, r5
 80a1d30:	f000 f814 	bl	80a1d5c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80a1d34:	2101      	movs	r1, #1
 80a1d36:	4620      	mov	r0, r4
 80a1d38:	f7ff fb9a 	bl	80a1470 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80a1d3c:	4632      	mov	r2, r6
 80a1d3e:	4629      	mov	r1, r5
 80a1d40:	4620      	mov	r0, r4
 80a1d42:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80a1d46:	f000 b809 	b.w	80a1d5c <__aeabi_atexit>
 80a1d4a:	bf00      	nop
 80a1d4c:	20000908 	.word	0x20000908
 80a1d50:	20000380 	.word	0x20000380
 80a1d54:	080a1461 	.word	0x080a1461
 80a1d58:	20000918 	.word	0x20000918

080a1d5c <__aeabi_atexit>:
 80a1d5c:	460b      	mov	r3, r1
 80a1d5e:	4601      	mov	r1, r0
 80a1d60:	4618      	mov	r0, r3
 80a1d62:	f001 ba1f 	b.w	80a31a4 <__cxa_atexit>

080a1d66 <_ZSt25__throw_bad_function_callv>:
 80a1d66:	b508      	push	{r3, lr}
 80a1d68:	f7fe ff36 	bl	80a0bd8 <abort>

080a1d6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80a1d6c:	4b24      	ldr	r3, [pc, #144]	; (80a1e00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80a1d6e:	681a      	ldr	r2, [r3, #0]
 80a1d70:	07d0      	lsls	r0, r2, #31
 80a1d72:	bf5c      	itt	pl
 80a1d74:	2201      	movpl	r2, #1
 80a1d76:	601a      	strpl	r2, [r3, #0]
 80a1d78:	4b22      	ldr	r3, [pc, #136]	; (80a1e04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80a1d7a:	681a      	ldr	r2, [r3, #0]
 80a1d7c:	07d1      	lsls	r1, r2, #31
 80a1d7e:	bf5c      	itt	pl
 80a1d80:	2201      	movpl	r2, #1
 80a1d82:	601a      	strpl	r2, [r3, #0]
 80a1d84:	4b20      	ldr	r3, [pc, #128]	; (80a1e08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80a1d86:	681a      	ldr	r2, [r3, #0]
 80a1d88:	07d2      	lsls	r2, r2, #31
 80a1d8a:	bf5c      	itt	pl
 80a1d8c:	2201      	movpl	r2, #1
 80a1d8e:	601a      	strpl	r2, [r3, #0]
 80a1d90:	4b1e      	ldr	r3, [pc, #120]	; (80a1e0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80a1d92:	681a      	ldr	r2, [r3, #0]
 80a1d94:	07d0      	lsls	r0, r2, #31
 80a1d96:	bf5c      	itt	pl
 80a1d98:	2201      	movpl	r2, #1
 80a1d9a:	601a      	strpl	r2, [r3, #0]
 80a1d9c:	4b1c      	ldr	r3, [pc, #112]	; (80a1e10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80a1d9e:	681a      	ldr	r2, [r3, #0]
 80a1da0:	07d1      	lsls	r1, r2, #31
 80a1da2:	bf5c      	itt	pl
 80a1da4:	2201      	movpl	r2, #1
 80a1da6:	601a      	strpl	r2, [r3, #0]
 80a1da8:	4b1a      	ldr	r3, [pc, #104]	; (80a1e14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80a1daa:	681a      	ldr	r2, [r3, #0]
 80a1dac:	07d2      	lsls	r2, r2, #31
 80a1dae:	bf5c      	itt	pl
 80a1db0:	2201      	movpl	r2, #1
 80a1db2:	601a      	strpl	r2, [r3, #0]
 80a1db4:	4b18      	ldr	r3, [pc, #96]	; (80a1e18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80a1db6:	681a      	ldr	r2, [r3, #0]
 80a1db8:	07d0      	lsls	r0, r2, #31
 80a1dba:	bf5c      	itt	pl
 80a1dbc:	2201      	movpl	r2, #1
 80a1dbe:	601a      	strpl	r2, [r3, #0]
 80a1dc0:	4b16      	ldr	r3, [pc, #88]	; (80a1e1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80a1dc2:	681a      	ldr	r2, [r3, #0]
 80a1dc4:	07d1      	lsls	r1, r2, #31
 80a1dc6:	bf5c      	itt	pl
 80a1dc8:	2201      	movpl	r2, #1
 80a1dca:	601a      	strpl	r2, [r3, #0]
 80a1dcc:	4b14      	ldr	r3, [pc, #80]	; (80a1e20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80a1dce:	681a      	ldr	r2, [r3, #0]
 80a1dd0:	07d2      	lsls	r2, r2, #31
 80a1dd2:	bf5c      	itt	pl
 80a1dd4:	2201      	movpl	r2, #1
 80a1dd6:	601a      	strpl	r2, [r3, #0]
 80a1dd8:	4b12      	ldr	r3, [pc, #72]	; (80a1e24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 80a1dda:	681a      	ldr	r2, [r3, #0]
 80a1ddc:	07d0      	lsls	r0, r2, #31
 80a1dde:	bf5c      	itt	pl
 80a1de0:	2201      	movpl	r2, #1
 80a1de2:	601a      	strpl	r2, [r3, #0]
 80a1de4:	4b10      	ldr	r3, [pc, #64]	; (80a1e28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 80a1de6:	681a      	ldr	r2, [r3, #0]
 80a1de8:	07d1      	lsls	r1, r2, #31
 80a1dea:	bf5c      	itt	pl
 80a1dec:	2201      	movpl	r2, #1
 80a1dee:	601a      	strpl	r2, [r3, #0]
 80a1df0:	4b0e      	ldr	r3, [pc, #56]	; (80a1e2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 80a1df2:	681a      	ldr	r2, [r3, #0]
 80a1df4:	07d2      	lsls	r2, r2, #31
 80a1df6:	bf5c      	itt	pl
 80a1df8:	2201      	movpl	r2, #1
 80a1dfa:	601a      	strpl	r2, [r3, #0]
 80a1dfc:	4770      	bx	lr
 80a1dfe:	bf00      	nop
 80a1e00:	20000954 	.word	0x20000954
 80a1e04:	20000950 	.word	0x20000950
 80a1e08:	2000094c 	.word	0x2000094c
 80a1e0c:	20000948 	.word	0x20000948
 80a1e10:	20000944 	.word	0x20000944
 80a1e14:	20000940 	.word	0x20000940
 80a1e18:	2000093c 	.word	0x2000093c
 80a1e1c:	20000938 	.word	0x20000938
 80a1e20:	20000934 	.word	0x20000934
 80a1e24:	20000930 	.word	0x20000930
 80a1e28:	2000092c 	.word	0x2000092c
 80a1e2c:	20000928 	.word	0x20000928

080a1e30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1e30:	4b18      	ldr	r3, [pc, #96]	; (80a1e94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1e32:	681a      	ldr	r2, [r3, #0]
 80a1e34:	07d1      	lsls	r1, r2, #31
 80a1e36:	bf5c      	itt	pl
 80a1e38:	2201      	movpl	r2, #1
 80a1e3a:	601a      	strpl	r2, [r3, #0]
 80a1e3c:	4b16      	ldr	r3, [pc, #88]	; (80a1e98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1e3e:	681a      	ldr	r2, [r3, #0]
 80a1e40:	07d2      	lsls	r2, r2, #31
 80a1e42:	bf5c      	itt	pl
 80a1e44:	2201      	movpl	r2, #1
 80a1e46:	601a      	strpl	r2, [r3, #0]
 80a1e48:	4b14      	ldr	r3, [pc, #80]	; (80a1e9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1e4a:	681a      	ldr	r2, [r3, #0]
 80a1e4c:	07d0      	lsls	r0, r2, #31
 80a1e4e:	bf5c      	itt	pl
 80a1e50:	2201      	movpl	r2, #1
 80a1e52:	601a      	strpl	r2, [r3, #0]
 80a1e54:	4b12      	ldr	r3, [pc, #72]	; (80a1ea0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1e56:	681a      	ldr	r2, [r3, #0]
 80a1e58:	07d1      	lsls	r1, r2, #31
 80a1e5a:	bf5c      	itt	pl
 80a1e5c:	2201      	movpl	r2, #1
 80a1e5e:	601a      	strpl	r2, [r3, #0]
 80a1e60:	4b10      	ldr	r3, [pc, #64]	; (80a1ea4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1e62:	681a      	ldr	r2, [r3, #0]
 80a1e64:	07d2      	lsls	r2, r2, #31
 80a1e66:	bf5c      	itt	pl
 80a1e68:	2201      	movpl	r2, #1
 80a1e6a:	601a      	strpl	r2, [r3, #0]
 80a1e6c:	4b0e      	ldr	r3, [pc, #56]	; (80a1ea8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1e6e:	681a      	ldr	r2, [r3, #0]
 80a1e70:	07d0      	lsls	r0, r2, #31
 80a1e72:	bf5c      	itt	pl
 80a1e74:	2201      	movpl	r2, #1
 80a1e76:	601a      	strpl	r2, [r3, #0]
 80a1e78:	4b0c      	ldr	r3, [pc, #48]	; (80a1eac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1e7a:	681a      	ldr	r2, [r3, #0]
 80a1e7c:	07d1      	lsls	r1, r2, #31
 80a1e7e:	bf5c      	itt	pl
 80a1e80:	2201      	movpl	r2, #1
 80a1e82:	601a      	strpl	r2, [r3, #0]
 80a1e84:	4b0a      	ldr	r3, [pc, #40]	; (80a1eb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1e86:	681a      	ldr	r2, [r3, #0]
 80a1e88:	07d2      	lsls	r2, r2, #31
 80a1e8a:	bf5c      	itt	pl
 80a1e8c:	2201      	movpl	r2, #1
 80a1e8e:	601a      	strpl	r2, [r3, #0]
 80a1e90:	4770      	bx	lr
 80a1e92:	bf00      	nop
 80a1e94:	20000974 	.word	0x20000974
 80a1e98:	20000970 	.word	0x20000970
 80a1e9c:	2000096c 	.word	0x2000096c
 80a1ea0:	20000968 	.word	0x20000968
 80a1ea4:	20000964 	.word	0x20000964
 80a1ea8:	20000960 	.word	0x20000960
 80a1eac:	2000095c 	.word	0x2000095c
 80a1eb0:	20000958 	.word	0x20000958

080a1eb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80a1eb4:	4b18      	ldr	r3, [pc, #96]	; (80a1f18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80a1eb6:	681a      	ldr	r2, [r3, #0]
 80a1eb8:	07d1      	lsls	r1, r2, #31
 80a1eba:	bf5c      	itt	pl
 80a1ebc:	2201      	movpl	r2, #1
 80a1ebe:	601a      	strpl	r2, [r3, #0]
 80a1ec0:	4b16      	ldr	r3, [pc, #88]	; (80a1f1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80a1ec2:	681a      	ldr	r2, [r3, #0]
 80a1ec4:	07d2      	lsls	r2, r2, #31
 80a1ec6:	bf5c      	itt	pl
 80a1ec8:	2201      	movpl	r2, #1
 80a1eca:	601a      	strpl	r2, [r3, #0]
 80a1ecc:	4b14      	ldr	r3, [pc, #80]	; (80a1f20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80a1ece:	681a      	ldr	r2, [r3, #0]
 80a1ed0:	07d0      	lsls	r0, r2, #31
 80a1ed2:	bf5c      	itt	pl
 80a1ed4:	2201      	movpl	r2, #1
 80a1ed6:	601a      	strpl	r2, [r3, #0]
 80a1ed8:	4b12      	ldr	r3, [pc, #72]	; (80a1f24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 80a1eda:	681a      	ldr	r2, [r3, #0]
 80a1edc:	07d1      	lsls	r1, r2, #31
 80a1ede:	bf5c      	itt	pl
 80a1ee0:	2201      	movpl	r2, #1
 80a1ee2:	601a      	strpl	r2, [r3, #0]
 80a1ee4:	4b10      	ldr	r3, [pc, #64]	; (80a1f28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 80a1ee6:	681a      	ldr	r2, [r3, #0]
 80a1ee8:	07d2      	lsls	r2, r2, #31
 80a1eea:	bf5c      	itt	pl
 80a1eec:	2201      	movpl	r2, #1
 80a1eee:	601a      	strpl	r2, [r3, #0]
 80a1ef0:	4b0e      	ldr	r3, [pc, #56]	; (80a1f2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80a1ef2:	681a      	ldr	r2, [r3, #0]
 80a1ef4:	07d0      	lsls	r0, r2, #31
 80a1ef6:	bf5c      	itt	pl
 80a1ef8:	2201      	movpl	r2, #1
 80a1efa:	601a      	strpl	r2, [r3, #0]
 80a1efc:	4b0c      	ldr	r3, [pc, #48]	; (80a1f30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80a1efe:	681a      	ldr	r2, [r3, #0]
 80a1f00:	07d1      	lsls	r1, r2, #31
 80a1f02:	bf5c      	itt	pl
 80a1f04:	2201      	movpl	r2, #1
 80a1f06:	601a      	strpl	r2, [r3, #0]
 80a1f08:	4b0a      	ldr	r3, [pc, #40]	; (80a1f34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80a1f0a:	681a      	ldr	r2, [r3, #0]
 80a1f0c:	07d2      	lsls	r2, r2, #31
 80a1f0e:	bf5c      	itt	pl
 80a1f10:	2201      	movpl	r2, #1
 80a1f12:	601a      	strpl	r2, [r3, #0]
 80a1f14:	4770      	bx	lr
 80a1f16:	bf00      	nop
 80a1f18:	20000994 	.word	0x20000994
 80a1f1c:	20000990 	.word	0x20000990
 80a1f20:	2000098c 	.word	0x2000098c
 80a1f24:	20000988 	.word	0x20000988
 80a1f28:	20000984 	.word	0x20000984
 80a1f2c:	20000980 	.word	0x20000980
 80a1f30:	2000097c 	.word	0x2000097c
 80a1f34:	20000978 	.word	0x20000978

080a1f38 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 80a1f38:	4b24      	ldr	r3, [pc, #144]	; (80a1fcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 80a1f3a:	681a      	ldr	r2, [r3, #0]
 80a1f3c:	07d0      	lsls	r0, r2, #31
 80a1f3e:	bf5c      	itt	pl
 80a1f40:	2201      	movpl	r2, #1
 80a1f42:	601a      	strpl	r2, [r3, #0]
 80a1f44:	4b22      	ldr	r3, [pc, #136]	; (80a1fd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 80a1f46:	681a      	ldr	r2, [r3, #0]
 80a1f48:	07d1      	lsls	r1, r2, #31
 80a1f4a:	bf5c      	itt	pl
 80a1f4c:	2201      	movpl	r2, #1
 80a1f4e:	601a      	strpl	r2, [r3, #0]
 80a1f50:	4b20      	ldr	r3, [pc, #128]	; (80a1fd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 80a1f52:	681a      	ldr	r2, [r3, #0]
 80a1f54:	07d2      	lsls	r2, r2, #31
 80a1f56:	bf5c      	itt	pl
 80a1f58:	2201      	movpl	r2, #1
 80a1f5a:	601a      	strpl	r2, [r3, #0]
 80a1f5c:	4b1e      	ldr	r3, [pc, #120]	; (80a1fd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 80a1f5e:	681a      	ldr	r2, [r3, #0]
 80a1f60:	07d0      	lsls	r0, r2, #31
 80a1f62:	bf5c      	itt	pl
 80a1f64:	2201      	movpl	r2, #1
 80a1f66:	601a      	strpl	r2, [r3, #0]
 80a1f68:	4b1c      	ldr	r3, [pc, #112]	; (80a1fdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80a1f6a:	681a      	ldr	r2, [r3, #0]
 80a1f6c:	07d1      	lsls	r1, r2, #31
 80a1f6e:	bf5c      	itt	pl
 80a1f70:	2201      	movpl	r2, #1
 80a1f72:	601a      	strpl	r2, [r3, #0]
 80a1f74:	4b1a      	ldr	r3, [pc, #104]	; (80a1fe0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80a1f76:	681a      	ldr	r2, [r3, #0]
 80a1f78:	07d2      	lsls	r2, r2, #31
 80a1f7a:	bf5c      	itt	pl
 80a1f7c:	2201      	movpl	r2, #1
 80a1f7e:	601a      	strpl	r2, [r3, #0]
 80a1f80:	4b18      	ldr	r3, [pc, #96]	; (80a1fe4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80a1f82:	681a      	ldr	r2, [r3, #0]
 80a1f84:	07d0      	lsls	r0, r2, #31
 80a1f86:	bf5c      	itt	pl
 80a1f88:	2201      	movpl	r2, #1
 80a1f8a:	601a      	strpl	r2, [r3, #0]
 80a1f8c:	4b16      	ldr	r3, [pc, #88]	; (80a1fe8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80a1f8e:	681a      	ldr	r2, [r3, #0]
 80a1f90:	07d1      	lsls	r1, r2, #31
 80a1f92:	bf5c      	itt	pl
 80a1f94:	2201      	movpl	r2, #1
 80a1f96:	601a      	strpl	r2, [r3, #0]
 80a1f98:	4b14      	ldr	r3, [pc, #80]	; (80a1fec <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80a1f9a:	681a      	ldr	r2, [r3, #0]
 80a1f9c:	07d2      	lsls	r2, r2, #31
 80a1f9e:	bf5c      	itt	pl
 80a1fa0:	2201      	movpl	r2, #1
 80a1fa2:	601a      	strpl	r2, [r3, #0]
 80a1fa4:	4b12      	ldr	r3, [pc, #72]	; (80a1ff0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80a1fa6:	681a      	ldr	r2, [r3, #0]
 80a1fa8:	07d0      	lsls	r0, r2, #31
 80a1faa:	bf5c      	itt	pl
 80a1fac:	2201      	movpl	r2, #1
 80a1fae:	601a      	strpl	r2, [r3, #0]
 80a1fb0:	4b10      	ldr	r3, [pc, #64]	; (80a1ff4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80a1fb2:	681a      	ldr	r2, [r3, #0]
 80a1fb4:	07d1      	lsls	r1, r2, #31
 80a1fb6:	bf5c      	itt	pl
 80a1fb8:	2201      	movpl	r2, #1
 80a1fba:	601a      	strpl	r2, [r3, #0]
 80a1fbc:	4b0e      	ldr	r3, [pc, #56]	; (80a1ff8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80a1fbe:	681a      	ldr	r2, [r3, #0]
 80a1fc0:	07d2      	lsls	r2, r2, #31
 80a1fc2:	bf5c      	itt	pl
 80a1fc4:	2201      	movpl	r2, #1
 80a1fc6:	601a      	strpl	r2, [r3, #0]
 80a1fc8:	4770      	bx	lr
 80a1fca:	bf00      	nop
 80a1fcc:	200009c4 	.word	0x200009c4
 80a1fd0:	200009c0 	.word	0x200009c0
 80a1fd4:	200009bc 	.word	0x200009bc
 80a1fd8:	200009b8 	.word	0x200009b8
 80a1fdc:	200009b4 	.word	0x200009b4
 80a1fe0:	200009b0 	.word	0x200009b0
 80a1fe4:	200009ac 	.word	0x200009ac
 80a1fe8:	200009a8 	.word	0x200009a8
 80a1fec:	200009a4 	.word	0x200009a4
 80a1ff0:	200009a0 	.word	0x200009a0
 80a1ff4:	2000099c 	.word	0x2000099c
 80a1ff8:	20000998 	.word	0x20000998

080a1ffc <__aeabi_drsub>:
 80a1ffc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80a2000:	e002      	b.n	80a2008 <__adddf3>
 80a2002:	bf00      	nop

080a2004 <__aeabi_dsub>:
 80a2004:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080a2008 <__adddf3>:
 80a2008:	b530      	push	{r4, r5, lr}
 80a200a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80a200e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80a2012:	ea94 0f05 	teq	r4, r5
 80a2016:	bf08      	it	eq
 80a2018:	ea90 0f02 	teqeq	r0, r2
 80a201c:	bf1f      	itttt	ne
 80a201e:	ea54 0c00 	orrsne.w	ip, r4, r0
 80a2022:	ea55 0c02 	orrsne.w	ip, r5, r2
 80a2026:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80a202a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a202e:	f000 80e2 	beq.w	80a21f6 <__adddf3+0x1ee>
 80a2032:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80a2036:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80a203a:	bfb8      	it	lt
 80a203c:	426d      	neglt	r5, r5
 80a203e:	dd0c      	ble.n	80a205a <__adddf3+0x52>
 80a2040:	442c      	add	r4, r5
 80a2042:	ea80 0202 	eor.w	r2, r0, r2
 80a2046:	ea81 0303 	eor.w	r3, r1, r3
 80a204a:	ea82 0000 	eor.w	r0, r2, r0
 80a204e:	ea83 0101 	eor.w	r1, r3, r1
 80a2052:	ea80 0202 	eor.w	r2, r0, r2
 80a2056:	ea81 0303 	eor.w	r3, r1, r3
 80a205a:	2d36      	cmp	r5, #54	; 0x36
 80a205c:	bf88      	it	hi
 80a205e:	bd30      	pophi	{r4, r5, pc}
 80a2060:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a2064:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a2068:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80a206c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80a2070:	d002      	beq.n	80a2078 <__adddf3+0x70>
 80a2072:	4240      	negs	r0, r0
 80a2074:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2078:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80a207c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a2080:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80a2084:	d002      	beq.n	80a208c <__adddf3+0x84>
 80a2086:	4252      	negs	r2, r2
 80a2088:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80a208c:	ea94 0f05 	teq	r4, r5
 80a2090:	f000 80a7 	beq.w	80a21e2 <__adddf3+0x1da>
 80a2094:	f1a4 0401 	sub.w	r4, r4, #1
 80a2098:	f1d5 0e20 	rsbs	lr, r5, #32
 80a209c:	db0d      	blt.n	80a20ba <__adddf3+0xb2>
 80a209e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80a20a2:	fa22 f205 	lsr.w	r2, r2, r5
 80a20a6:	1880      	adds	r0, r0, r2
 80a20a8:	f141 0100 	adc.w	r1, r1, #0
 80a20ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80a20b0:	1880      	adds	r0, r0, r2
 80a20b2:	fa43 f305 	asr.w	r3, r3, r5
 80a20b6:	4159      	adcs	r1, r3
 80a20b8:	e00e      	b.n	80a20d8 <__adddf3+0xd0>
 80a20ba:	f1a5 0520 	sub.w	r5, r5, #32
 80a20be:	f10e 0e20 	add.w	lr, lr, #32
 80a20c2:	2a01      	cmp	r2, #1
 80a20c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80a20c8:	bf28      	it	cs
 80a20ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80a20ce:	fa43 f305 	asr.w	r3, r3, r5
 80a20d2:	18c0      	adds	r0, r0, r3
 80a20d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80a20d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a20dc:	d507      	bpl.n	80a20ee <__adddf3+0xe6>
 80a20de:	f04f 0e00 	mov.w	lr, #0
 80a20e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80a20e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80a20ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80a20ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80a20f2:	d31b      	bcc.n	80a212c <__adddf3+0x124>
 80a20f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80a20f8:	d30c      	bcc.n	80a2114 <__adddf3+0x10c>
 80a20fa:	0849      	lsrs	r1, r1, #1
 80a20fc:	ea5f 0030 	movs.w	r0, r0, rrx
 80a2100:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80a2104:	f104 0401 	add.w	r4, r4, #1
 80a2108:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80a210c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80a2110:	f080 809a 	bcs.w	80a2248 <__adddf3+0x240>
 80a2114:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2118:	bf08      	it	eq
 80a211a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a211e:	f150 0000 	adcs.w	r0, r0, #0
 80a2122:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2126:	ea41 0105 	orr.w	r1, r1, r5
 80a212a:	bd30      	pop	{r4, r5, pc}
 80a212c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80a2130:	4140      	adcs	r0, r0
 80a2132:	eb41 0101 	adc.w	r1, r1, r1
 80a2136:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a213a:	f1a4 0401 	sub.w	r4, r4, #1
 80a213e:	d1e9      	bne.n	80a2114 <__adddf3+0x10c>
 80a2140:	f091 0f00 	teq	r1, #0
 80a2144:	bf04      	itt	eq
 80a2146:	4601      	moveq	r1, r0
 80a2148:	2000      	moveq	r0, #0
 80a214a:	fab1 f381 	clz	r3, r1
 80a214e:	bf08      	it	eq
 80a2150:	3320      	addeq	r3, #32
 80a2152:	f1a3 030b 	sub.w	r3, r3, #11
 80a2156:	f1b3 0220 	subs.w	r2, r3, #32
 80a215a:	da0c      	bge.n	80a2176 <__adddf3+0x16e>
 80a215c:	320c      	adds	r2, #12
 80a215e:	dd08      	ble.n	80a2172 <__adddf3+0x16a>
 80a2160:	f102 0c14 	add.w	ip, r2, #20
 80a2164:	f1c2 020c 	rsb	r2, r2, #12
 80a2168:	fa01 f00c 	lsl.w	r0, r1, ip
 80a216c:	fa21 f102 	lsr.w	r1, r1, r2
 80a2170:	e00c      	b.n	80a218c <__adddf3+0x184>
 80a2172:	f102 0214 	add.w	r2, r2, #20
 80a2176:	bfd8      	it	le
 80a2178:	f1c2 0c20 	rsble	ip, r2, #32
 80a217c:	fa01 f102 	lsl.w	r1, r1, r2
 80a2180:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a2184:	bfdc      	itt	le
 80a2186:	ea41 010c 	orrle.w	r1, r1, ip
 80a218a:	4090      	lslle	r0, r2
 80a218c:	1ae4      	subs	r4, r4, r3
 80a218e:	bfa2      	ittt	ge
 80a2190:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80a2194:	4329      	orrge	r1, r5
 80a2196:	bd30      	popge	{r4, r5, pc}
 80a2198:	ea6f 0404 	mvn.w	r4, r4
 80a219c:	3c1f      	subs	r4, #31
 80a219e:	da1c      	bge.n	80a21da <__adddf3+0x1d2>
 80a21a0:	340c      	adds	r4, #12
 80a21a2:	dc0e      	bgt.n	80a21c2 <__adddf3+0x1ba>
 80a21a4:	f104 0414 	add.w	r4, r4, #20
 80a21a8:	f1c4 0220 	rsb	r2, r4, #32
 80a21ac:	fa20 f004 	lsr.w	r0, r0, r4
 80a21b0:	fa01 f302 	lsl.w	r3, r1, r2
 80a21b4:	ea40 0003 	orr.w	r0, r0, r3
 80a21b8:	fa21 f304 	lsr.w	r3, r1, r4
 80a21bc:	ea45 0103 	orr.w	r1, r5, r3
 80a21c0:	bd30      	pop	{r4, r5, pc}
 80a21c2:	f1c4 040c 	rsb	r4, r4, #12
 80a21c6:	f1c4 0220 	rsb	r2, r4, #32
 80a21ca:	fa20 f002 	lsr.w	r0, r0, r2
 80a21ce:	fa01 f304 	lsl.w	r3, r1, r4
 80a21d2:	ea40 0003 	orr.w	r0, r0, r3
 80a21d6:	4629      	mov	r1, r5
 80a21d8:	bd30      	pop	{r4, r5, pc}
 80a21da:	fa21 f004 	lsr.w	r0, r1, r4
 80a21de:	4629      	mov	r1, r5
 80a21e0:	bd30      	pop	{r4, r5, pc}
 80a21e2:	f094 0f00 	teq	r4, #0
 80a21e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80a21ea:	bf06      	itte	eq
 80a21ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80a21f0:	3401      	addeq	r4, #1
 80a21f2:	3d01      	subne	r5, #1
 80a21f4:	e74e      	b.n	80a2094 <__adddf3+0x8c>
 80a21f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a21fa:	bf18      	it	ne
 80a21fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80a2200:	d029      	beq.n	80a2256 <__adddf3+0x24e>
 80a2202:	ea94 0f05 	teq	r4, r5
 80a2206:	bf08      	it	eq
 80a2208:	ea90 0f02 	teqeq	r0, r2
 80a220c:	d005      	beq.n	80a221a <__adddf3+0x212>
 80a220e:	ea54 0c00 	orrs.w	ip, r4, r0
 80a2212:	bf04      	itt	eq
 80a2214:	4619      	moveq	r1, r3
 80a2216:	4610      	moveq	r0, r2
 80a2218:	bd30      	pop	{r4, r5, pc}
 80a221a:	ea91 0f03 	teq	r1, r3
 80a221e:	bf1e      	ittt	ne
 80a2220:	2100      	movne	r1, #0
 80a2222:	2000      	movne	r0, #0
 80a2224:	bd30      	popne	{r4, r5, pc}
 80a2226:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80a222a:	d105      	bne.n	80a2238 <__adddf3+0x230>
 80a222c:	0040      	lsls	r0, r0, #1
 80a222e:	4149      	adcs	r1, r1
 80a2230:	bf28      	it	cs
 80a2232:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80a2236:	bd30      	pop	{r4, r5, pc}
 80a2238:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80a223c:	bf3c      	itt	cc
 80a223e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80a2242:	bd30      	popcc	{r4, r5, pc}
 80a2244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a2248:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80a224c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a2250:	f04f 0000 	mov.w	r0, #0
 80a2254:	bd30      	pop	{r4, r5, pc}
 80a2256:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80a225a:	bf1a      	itte	ne
 80a225c:	4619      	movne	r1, r3
 80a225e:	4610      	movne	r0, r2
 80a2260:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80a2264:	bf1c      	itt	ne
 80a2266:	460b      	movne	r3, r1
 80a2268:	4602      	movne	r2, r0
 80a226a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a226e:	bf06      	itte	eq
 80a2270:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80a2274:	ea91 0f03 	teqeq	r1, r3
 80a2278:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80a227c:	bd30      	pop	{r4, r5, pc}
 80a227e:	bf00      	nop

080a2280 <__aeabi_ui2d>:
 80a2280:	f090 0f00 	teq	r0, #0
 80a2284:	bf04      	itt	eq
 80a2286:	2100      	moveq	r1, #0
 80a2288:	4770      	bxeq	lr
 80a228a:	b530      	push	{r4, r5, lr}
 80a228c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a2290:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a2294:	f04f 0500 	mov.w	r5, #0
 80a2298:	f04f 0100 	mov.w	r1, #0
 80a229c:	e750      	b.n	80a2140 <__adddf3+0x138>
 80a229e:	bf00      	nop

080a22a0 <__aeabi_i2d>:
 80a22a0:	f090 0f00 	teq	r0, #0
 80a22a4:	bf04      	itt	eq
 80a22a6:	2100      	moveq	r1, #0
 80a22a8:	4770      	bxeq	lr
 80a22aa:	b530      	push	{r4, r5, lr}
 80a22ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a22b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a22b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80a22b8:	bf48      	it	mi
 80a22ba:	4240      	negmi	r0, r0
 80a22bc:	f04f 0100 	mov.w	r1, #0
 80a22c0:	e73e      	b.n	80a2140 <__adddf3+0x138>
 80a22c2:	bf00      	nop

080a22c4 <__aeabi_f2d>:
 80a22c4:	0042      	lsls	r2, r0, #1
 80a22c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80a22ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80a22ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80a22d2:	bf1f      	itttt	ne
 80a22d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80a22d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a22dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80a22e0:	4770      	bxne	lr
 80a22e2:	f092 0f00 	teq	r2, #0
 80a22e6:	bf14      	ite	ne
 80a22e8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80a22ec:	4770      	bxeq	lr
 80a22ee:	b530      	push	{r4, r5, lr}
 80a22f0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80a22f4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80a22f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a22fc:	e720      	b.n	80a2140 <__adddf3+0x138>
 80a22fe:	bf00      	nop

080a2300 <__aeabi_ul2d>:
 80a2300:	ea50 0201 	orrs.w	r2, r0, r1
 80a2304:	bf08      	it	eq
 80a2306:	4770      	bxeq	lr
 80a2308:	b530      	push	{r4, r5, lr}
 80a230a:	f04f 0500 	mov.w	r5, #0
 80a230e:	e00a      	b.n	80a2326 <__aeabi_l2d+0x16>

080a2310 <__aeabi_l2d>:
 80a2310:	ea50 0201 	orrs.w	r2, r0, r1
 80a2314:	bf08      	it	eq
 80a2316:	4770      	bxeq	lr
 80a2318:	b530      	push	{r4, r5, lr}
 80a231a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80a231e:	d502      	bpl.n	80a2326 <__aeabi_l2d+0x16>
 80a2320:	4240      	negs	r0, r0
 80a2322:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2326:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80a232a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80a232e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80a2332:	f43f aedc 	beq.w	80a20ee <__adddf3+0xe6>
 80a2336:	f04f 0203 	mov.w	r2, #3
 80a233a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a233e:	bf18      	it	ne
 80a2340:	3203      	addne	r2, #3
 80a2342:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80a2346:	bf18      	it	ne
 80a2348:	3203      	addne	r2, #3
 80a234a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80a234e:	f1c2 0320 	rsb	r3, r2, #32
 80a2352:	fa00 fc03 	lsl.w	ip, r0, r3
 80a2356:	fa20 f002 	lsr.w	r0, r0, r2
 80a235a:	fa01 fe03 	lsl.w	lr, r1, r3
 80a235e:	ea40 000e 	orr.w	r0, r0, lr
 80a2362:	fa21 f102 	lsr.w	r1, r1, r2
 80a2366:	4414      	add	r4, r2
 80a2368:	e6c1      	b.n	80a20ee <__adddf3+0xe6>
 80a236a:	bf00      	nop

080a236c <__aeabi_dmul>:
 80a236c:	b570      	push	{r4, r5, r6, lr}
 80a236e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2372:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a2376:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a237a:	bf1d      	ittte	ne
 80a237c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a2380:	ea94 0f0c 	teqne	r4, ip
 80a2384:	ea95 0f0c 	teqne	r5, ip
 80a2388:	f000 f8de 	bleq	80a2548 <__aeabi_dmul+0x1dc>
 80a238c:	442c      	add	r4, r5
 80a238e:	ea81 0603 	eor.w	r6, r1, r3
 80a2392:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80a2396:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80a239a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80a239e:	bf18      	it	ne
 80a23a0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80a23a4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a23a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80a23ac:	d038      	beq.n	80a2420 <__aeabi_dmul+0xb4>
 80a23ae:	fba0 ce02 	umull	ip, lr, r0, r2
 80a23b2:	f04f 0500 	mov.w	r5, #0
 80a23b6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80a23ba:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80a23be:	fbe0 e503 	umlal	lr, r5, r0, r3
 80a23c2:	f04f 0600 	mov.w	r6, #0
 80a23c6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80a23ca:	f09c 0f00 	teq	ip, #0
 80a23ce:	bf18      	it	ne
 80a23d0:	f04e 0e01 	orrne.w	lr, lr, #1
 80a23d4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80a23d8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80a23dc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80a23e0:	d204      	bcs.n	80a23ec <__aeabi_dmul+0x80>
 80a23e2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80a23e6:	416d      	adcs	r5, r5
 80a23e8:	eb46 0606 	adc.w	r6, r6, r6
 80a23ec:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80a23f0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80a23f4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80a23f8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80a23fc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80a2400:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a2404:	bf88      	it	hi
 80a2406:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a240a:	d81e      	bhi.n	80a244a <__aeabi_dmul+0xde>
 80a240c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80a2410:	bf08      	it	eq
 80a2412:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80a2416:	f150 0000 	adcs.w	r0, r0, #0
 80a241a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a241e:	bd70      	pop	{r4, r5, r6, pc}
 80a2420:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80a2424:	ea46 0101 	orr.w	r1, r6, r1
 80a2428:	ea40 0002 	orr.w	r0, r0, r2
 80a242c:	ea81 0103 	eor.w	r1, r1, r3
 80a2430:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80a2434:	bfc2      	ittt	gt
 80a2436:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a243a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a243e:	bd70      	popgt	{r4, r5, r6, pc}
 80a2440:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2444:	f04f 0e00 	mov.w	lr, #0
 80a2448:	3c01      	subs	r4, #1
 80a244a:	f300 80ab 	bgt.w	80a25a4 <__aeabi_dmul+0x238>
 80a244e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80a2452:	bfde      	ittt	le
 80a2454:	2000      	movle	r0, #0
 80a2456:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80a245a:	bd70      	pople	{r4, r5, r6, pc}
 80a245c:	f1c4 0400 	rsb	r4, r4, #0
 80a2460:	3c20      	subs	r4, #32
 80a2462:	da35      	bge.n	80a24d0 <__aeabi_dmul+0x164>
 80a2464:	340c      	adds	r4, #12
 80a2466:	dc1b      	bgt.n	80a24a0 <__aeabi_dmul+0x134>
 80a2468:	f104 0414 	add.w	r4, r4, #20
 80a246c:	f1c4 0520 	rsb	r5, r4, #32
 80a2470:	fa00 f305 	lsl.w	r3, r0, r5
 80a2474:	fa20 f004 	lsr.w	r0, r0, r4
 80a2478:	fa01 f205 	lsl.w	r2, r1, r5
 80a247c:	ea40 0002 	orr.w	r0, r0, r2
 80a2480:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80a2484:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80a2488:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a248c:	fa21 f604 	lsr.w	r6, r1, r4
 80a2490:	eb42 0106 	adc.w	r1, r2, r6
 80a2494:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2498:	bf08      	it	eq
 80a249a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a249e:	bd70      	pop	{r4, r5, r6, pc}
 80a24a0:	f1c4 040c 	rsb	r4, r4, #12
 80a24a4:	f1c4 0520 	rsb	r5, r4, #32
 80a24a8:	fa00 f304 	lsl.w	r3, r0, r4
 80a24ac:	fa20 f005 	lsr.w	r0, r0, r5
 80a24b0:	fa01 f204 	lsl.w	r2, r1, r4
 80a24b4:	ea40 0002 	orr.w	r0, r0, r2
 80a24b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a24bc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80a24c0:	f141 0100 	adc.w	r1, r1, #0
 80a24c4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a24c8:	bf08      	it	eq
 80a24ca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a24ce:	bd70      	pop	{r4, r5, r6, pc}
 80a24d0:	f1c4 0520 	rsb	r5, r4, #32
 80a24d4:	fa00 f205 	lsl.w	r2, r0, r5
 80a24d8:	ea4e 0e02 	orr.w	lr, lr, r2
 80a24dc:	fa20 f304 	lsr.w	r3, r0, r4
 80a24e0:	fa01 f205 	lsl.w	r2, r1, r5
 80a24e4:	ea43 0302 	orr.w	r3, r3, r2
 80a24e8:	fa21 f004 	lsr.w	r0, r1, r4
 80a24ec:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a24f0:	fa21 f204 	lsr.w	r2, r1, r4
 80a24f4:	ea20 0002 	bic.w	r0, r0, r2
 80a24f8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80a24fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80a2500:	bf08      	it	eq
 80a2502:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80a2506:	bd70      	pop	{r4, r5, r6, pc}
 80a2508:	f094 0f00 	teq	r4, #0
 80a250c:	d10f      	bne.n	80a252e <__aeabi_dmul+0x1c2>
 80a250e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80a2512:	0040      	lsls	r0, r0, #1
 80a2514:	eb41 0101 	adc.w	r1, r1, r1
 80a2518:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a251c:	bf08      	it	eq
 80a251e:	3c01      	subeq	r4, #1
 80a2520:	d0f7      	beq.n	80a2512 <__aeabi_dmul+0x1a6>
 80a2522:	ea41 0106 	orr.w	r1, r1, r6
 80a2526:	f095 0f00 	teq	r5, #0
 80a252a:	bf18      	it	ne
 80a252c:	4770      	bxne	lr
 80a252e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80a2532:	0052      	lsls	r2, r2, #1
 80a2534:	eb43 0303 	adc.w	r3, r3, r3
 80a2538:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80a253c:	bf08      	it	eq
 80a253e:	3d01      	subeq	r5, #1
 80a2540:	d0f7      	beq.n	80a2532 <__aeabi_dmul+0x1c6>
 80a2542:	ea43 0306 	orr.w	r3, r3, r6
 80a2546:	4770      	bx	lr
 80a2548:	ea94 0f0c 	teq	r4, ip
 80a254c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2550:	bf18      	it	ne
 80a2552:	ea95 0f0c 	teqne	r5, ip
 80a2556:	d00c      	beq.n	80a2572 <__aeabi_dmul+0x206>
 80a2558:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a255c:	bf18      	it	ne
 80a255e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2562:	d1d1      	bne.n	80a2508 <__aeabi_dmul+0x19c>
 80a2564:	ea81 0103 	eor.w	r1, r1, r3
 80a2568:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a256c:	f04f 0000 	mov.w	r0, #0
 80a2570:	bd70      	pop	{r4, r5, r6, pc}
 80a2572:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2576:	bf06      	itte	eq
 80a2578:	4610      	moveq	r0, r2
 80a257a:	4619      	moveq	r1, r3
 80a257c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a2580:	d019      	beq.n	80a25b6 <__aeabi_dmul+0x24a>
 80a2582:	ea94 0f0c 	teq	r4, ip
 80a2586:	d102      	bne.n	80a258e <__aeabi_dmul+0x222>
 80a2588:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80a258c:	d113      	bne.n	80a25b6 <__aeabi_dmul+0x24a>
 80a258e:	ea95 0f0c 	teq	r5, ip
 80a2592:	d105      	bne.n	80a25a0 <__aeabi_dmul+0x234>
 80a2594:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80a2598:	bf1c      	itt	ne
 80a259a:	4610      	movne	r0, r2
 80a259c:	4619      	movne	r1, r3
 80a259e:	d10a      	bne.n	80a25b6 <__aeabi_dmul+0x24a>
 80a25a0:	ea81 0103 	eor.w	r1, r1, r3
 80a25a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80a25a8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a25ac:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80a25b0:	f04f 0000 	mov.w	r0, #0
 80a25b4:	bd70      	pop	{r4, r5, r6, pc}
 80a25b6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80a25ba:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80a25be:	bd70      	pop	{r4, r5, r6, pc}

080a25c0 <__aeabi_ddiv>:
 80a25c0:	b570      	push	{r4, r5, r6, lr}
 80a25c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a25c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80a25ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80a25ce:	bf1d      	ittte	ne
 80a25d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80a25d4:	ea94 0f0c 	teqne	r4, ip
 80a25d8:	ea95 0f0c 	teqne	r5, ip
 80a25dc:	f000 f8a7 	bleq	80a272e <__aeabi_ddiv+0x16e>
 80a25e0:	eba4 0405 	sub.w	r4, r4, r5
 80a25e4:	ea81 0e03 	eor.w	lr, r1, r3
 80a25e8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a25ec:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80a25f0:	f000 8088 	beq.w	80a2704 <__aeabi_ddiv+0x144>
 80a25f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80a25f8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80a25fc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80a2600:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80a2604:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80a2608:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80a260c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80a2610:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80a2614:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80a2618:	429d      	cmp	r5, r3
 80a261a:	bf08      	it	eq
 80a261c:	4296      	cmpeq	r6, r2
 80a261e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80a2622:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80a2626:	d202      	bcs.n	80a262e <__aeabi_ddiv+0x6e>
 80a2628:	085b      	lsrs	r3, r3, #1
 80a262a:	ea4f 0232 	mov.w	r2, r2, rrx
 80a262e:	1ab6      	subs	r6, r6, r2
 80a2630:	eb65 0503 	sbc.w	r5, r5, r3
 80a2634:	085b      	lsrs	r3, r3, #1
 80a2636:	ea4f 0232 	mov.w	r2, r2, rrx
 80a263a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80a263e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80a2642:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2646:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a264a:	bf22      	ittt	cs
 80a264c:	1ab6      	subcs	r6, r6, r2
 80a264e:	4675      	movcs	r5, lr
 80a2650:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2654:	085b      	lsrs	r3, r3, #1
 80a2656:	ea4f 0232 	mov.w	r2, r2, rrx
 80a265a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a265e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2662:	bf22      	ittt	cs
 80a2664:	1ab6      	subcs	r6, r6, r2
 80a2666:	4675      	movcs	r5, lr
 80a2668:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a266c:	085b      	lsrs	r3, r3, #1
 80a266e:	ea4f 0232 	mov.w	r2, r2, rrx
 80a2672:	ebb6 0e02 	subs.w	lr, r6, r2
 80a2676:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a267a:	bf22      	ittt	cs
 80a267c:	1ab6      	subcs	r6, r6, r2
 80a267e:	4675      	movcs	r5, lr
 80a2680:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2684:	085b      	lsrs	r3, r3, #1
 80a2686:	ea4f 0232 	mov.w	r2, r2, rrx
 80a268a:	ebb6 0e02 	subs.w	lr, r6, r2
 80a268e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80a2692:	bf22      	ittt	cs
 80a2694:	1ab6      	subcs	r6, r6, r2
 80a2696:	4675      	movcs	r5, lr
 80a2698:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a269c:	ea55 0e06 	orrs.w	lr, r5, r6
 80a26a0:	d018      	beq.n	80a26d4 <__aeabi_ddiv+0x114>
 80a26a2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80a26a6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80a26aa:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80a26ae:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80a26b2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80a26b6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80a26ba:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80a26be:	d1c0      	bne.n	80a2642 <__aeabi_ddiv+0x82>
 80a26c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a26c4:	d10b      	bne.n	80a26de <__aeabi_ddiv+0x11e>
 80a26c6:	ea41 0100 	orr.w	r1, r1, r0
 80a26ca:	f04f 0000 	mov.w	r0, #0
 80a26ce:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80a26d2:	e7b6      	b.n	80a2642 <__aeabi_ddiv+0x82>
 80a26d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80a26d8:	bf04      	itt	eq
 80a26da:	4301      	orreq	r1, r0
 80a26dc:	2000      	moveq	r0, #0
 80a26de:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80a26e2:	bf88      	it	hi
 80a26e4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80a26e8:	f63f aeaf 	bhi.w	80a244a <__aeabi_dmul+0xde>
 80a26ec:	ebb5 0c03 	subs.w	ip, r5, r3
 80a26f0:	bf04      	itt	eq
 80a26f2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80a26f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80a26fa:	f150 0000 	adcs.w	r0, r0, #0
 80a26fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80a2702:	bd70      	pop	{r4, r5, r6, pc}
 80a2704:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80a2708:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80a270c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80a2710:	bfc2      	ittt	gt
 80a2712:	ebd4 050c 	rsbsgt	r5, r4, ip
 80a2716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80a271a:	bd70      	popgt	{r4, r5, r6, pc}
 80a271c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2720:	f04f 0e00 	mov.w	lr, #0
 80a2724:	3c01      	subs	r4, #1
 80a2726:	e690      	b.n	80a244a <__aeabi_dmul+0xde>
 80a2728:	ea45 0e06 	orr.w	lr, r5, r6
 80a272c:	e68d      	b.n	80a244a <__aeabi_dmul+0xde>
 80a272e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80a2732:	ea94 0f0c 	teq	r4, ip
 80a2736:	bf08      	it	eq
 80a2738:	ea95 0f0c 	teqeq	r5, ip
 80a273c:	f43f af3b 	beq.w	80a25b6 <__aeabi_dmul+0x24a>
 80a2740:	ea94 0f0c 	teq	r4, ip
 80a2744:	d10a      	bne.n	80a275c <__aeabi_ddiv+0x19c>
 80a2746:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80a274a:	f47f af34 	bne.w	80a25b6 <__aeabi_dmul+0x24a>
 80a274e:	ea95 0f0c 	teq	r5, ip
 80a2752:	f47f af25 	bne.w	80a25a0 <__aeabi_dmul+0x234>
 80a2756:	4610      	mov	r0, r2
 80a2758:	4619      	mov	r1, r3
 80a275a:	e72c      	b.n	80a25b6 <__aeabi_dmul+0x24a>
 80a275c:	ea95 0f0c 	teq	r5, ip
 80a2760:	d106      	bne.n	80a2770 <__aeabi_ddiv+0x1b0>
 80a2762:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80a2766:	f43f aefd 	beq.w	80a2564 <__aeabi_dmul+0x1f8>
 80a276a:	4610      	mov	r0, r2
 80a276c:	4619      	mov	r1, r3
 80a276e:	e722      	b.n	80a25b6 <__aeabi_dmul+0x24a>
 80a2770:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80a2774:	bf18      	it	ne
 80a2776:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80a277a:	f47f aec5 	bne.w	80a2508 <__aeabi_dmul+0x19c>
 80a277e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80a2782:	f47f af0d 	bne.w	80a25a0 <__aeabi_dmul+0x234>
 80a2786:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80a278a:	f47f aeeb 	bne.w	80a2564 <__aeabi_dmul+0x1f8>
 80a278e:	e712      	b.n	80a25b6 <__aeabi_dmul+0x24a>

080a2790 <__gedf2>:
 80a2790:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80a2794:	e006      	b.n	80a27a4 <__cmpdf2+0x4>
 80a2796:	bf00      	nop

080a2798 <__ledf2>:
 80a2798:	f04f 0c01 	mov.w	ip, #1
 80a279c:	e002      	b.n	80a27a4 <__cmpdf2+0x4>
 80a279e:	bf00      	nop

080a27a0 <__cmpdf2>:
 80a27a0:	f04f 0c01 	mov.w	ip, #1
 80a27a4:	f84d cd04 	str.w	ip, [sp, #-4]!
 80a27a8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a27ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a27b0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a27b4:	bf18      	it	ne
 80a27b6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80a27ba:	d01b      	beq.n	80a27f4 <__cmpdf2+0x54>
 80a27bc:	b001      	add	sp, #4
 80a27be:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80a27c2:	bf0c      	ite	eq
 80a27c4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80a27c8:	ea91 0f03 	teqne	r1, r3
 80a27cc:	bf02      	ittt	eq
 80a27ce:	ea90 0f02 	teqeq	r0, r2
 80a27d2:	2000      	moveq	r0, #0
 80a27d4:	4770      	bxeq	lr
 80a27d6:	f110 0f00 	cmn.w	r0, #0
 80a27da:	ea91 0f03 	teq	r1, r3
 80a27de:	bf58      	it	pl
 80a27e0:	4299      	cmppl	r1, r3
 80a27e2:	bf08      	it	eq
 80a27e4:	4290      	cmpeq	r0, r2
 80a27e6:	bf2c      	ite	cs
 80a27e8:	17d8      	asrcs	r0, r3, #31
 80a27ea:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80a27ee:	f040 0001 	orr.w	r0, r0, #1
 80a27f2:	4770      	bx	lr
 80a27f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80a27f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a27fc:	d102      	bne.n	80a2804 <__cmpdf2+0x64>
 80a27fe:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80a2802:	d107      	bne.n	80a2814 <__cmpdf2+0x74>
 80a2804:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80a2808:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80a280c:	d1d6      	bne.n	80a27bc <__cmpdf2+0x1c>
 80a280e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80a2812:	d0d3      	beq.n	80a27bc <__cmpdf2+0x1c>
 80a2814:	f85d 0b04 	ldr.w	r0, [sp], #4
 80a2818:	4770      	bx	lr
 80a281a:	bf00      	nop

080a281c <__aeabi_cdrcmple>:
 80a281c:	4684      	mov	ip, r0
 80a281e:	4610      	mov	r0, r2
 80a2820:	4662      	mov	r2, ip
 80a2822:	468c      	mov	ip, r1
 80a2824:	4619      	mov	r1, r3
 80a2826:	4663      	mov	r3, ip
 80a2828:	e000      	b.n	80a282c <__aeabi_cdcmpeq>
 80a282a:	bf00      	nop

080a282c <__aeabi_cdcmpeq>:
 80a282c:	b501      	push	{r0, lr}
 80a282e:	f7ff ffb7 	bl	80a27a0 <__cmpdf2>
 80a2832:	2800      	cmp	r0, #0
 80a2834:	bf48      	it	mi
 80a2836:	f110 0f00 	cmnmi.w	r0, #0
 80a283a:	bd01      	pop	{r0, pc}

080a283c <__aeabi_dcmpeq>:
 80a283c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2840:	f7ff fff4 	bl	80a282c <__aeabi_cdcmpeq>
 80a2844:	bf0c      	ite	eq
 80a2846:	2001      	moveq	r0, #1
 80a2848:	2000      	movne	r0, #0
 80a284a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a284e:	bf00      	nop

080a2850 <__aeabi_dcmplt>:
 80a2850:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2854:	f7ff ffea 	bl	80a282c <__aeabi_cdcmpeq>
 80a2858:	bf34      	ite	cc
 80a285a:	2001      	movcc	r0, #1
 80a285c:	2000      	movcs	r0, #0
 80a285e:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2862:	bf00      	nop

080a2864 <__aeabi_dcmple>:
 80a2864:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2868:	f7ff ffe0 	bl	80a282c <__aeabi_cdcmpeq>
 80a286c:	bf94      	ite	ls
 80a286e:	2001      	movls	r0, #1
 80a2870:	2000      	movhi	r0, #0
 80a2872:	f85d fb08 	ldr.w	pc, [sp], #8
 80a2876:	bf00      	nop

080a2878 <__aeabi_dcmpge>:
 80a2878:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a287c:	f7ff ffce 	bl	80a281c <__aeabi_cdrcmple>
 80a2880:	bf94      	ite	ls
 80a2882:	2001      	movls	r0, #1
 80a2884:	2000      	movhi	r0, #0
 80a2886:	f85d fb08 	ldr.w	pc, [sp], #8
 80a288a:	bf00      	nop

080a288c <__aeabi_dcmpgt>:
 80a288c:	f84d ed08 	str.w	lr, [sp, #-8]!
 80a2890:	f7ff ffc4 	bl	80a281c <__aeabi_cdrcmple>
 80a2894:	bf34      	ite	cc
 80a2896:	2001      	movcc	r0, #1
 80a2898:	2000      	movcs	r0, #0
 80a289a:	f85d fb08 	ldr.w	pc, [sp], #8
 80a289e:	bf00      	nop

080a28a0 <__aeabi_d2uiz>:
 80a28a0:	004a      	lsls	r2, r1, #1
 80a28a2:	d211      	bcs.n	80a28c8 <__aeabi_d2uiz+0x28>
 80a28a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80a28a8:	d211      	bcs.n	80a28ce <__aeabi_d2uiz+0x2e>
 80a28aa:	d50d      	bpl.n	80a28c8 <__aeabi_d2uiz+0x28>
 80a28ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80a28b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80a28b4:	d40e      	bmi.n	80a28d4 <__aeabi_d2uiz+0x34>
 80a28b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a28ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80a28be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80a28c2:	fa23 f002 	lsr.w	r0, r3, r2
 80a28c6:	4770      	bx	lr
 80a28c8:	f04f 0000 	mov.w	r0, #0
 80a28cc:	4770      	bx	lr
 80a28ce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80a28d2:	d102      	bne.n	80a28da <__aeabi_d2uiz+0x3a>
 80a28d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80a28d8:	4770      	bx	lr
 80a28da:	f04f 0000 	mov.w	r0, #0
 80a28de:	4770      	bx	lr

080a28e0 <__aeabi_d2f>:
 80a28e0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80a28e4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80a28e8:	bf24      	itt	cs
 80a28ea:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80a28ee:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80a28f2:	d90d      	bls.n	80a2910 <__aeabi_d2f+0x30>
 80a28f4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a28f8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80a28fc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80a2900:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80a2904:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80a2908:	bf08      	it	eq
 80a290a:	f020 0001 	biceq.w	r0, r0, #1
 80a290e:	4770      	bx	lr
 80a2910:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80a2914:	d121      	bne.n	80a295a <__aeabi_d2f+0x7a>
 80a2916:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80a291a:	bfbc      	itt	lt
 80a291c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80a2920:	4770      	bxlt	lr
 80a2922:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80a2926:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80a292a:	f1c2 0218 	rsb	r2, r2, #24
 80a292e:	f1c2 0c20 	rsb	ip, r2, #32
 80a2932:	fa10 f30c 	lsls.w	r3, r0, ip
 80a2936:	fa20 f002 	lsr.w	r0, r0, r2
 80a293a:	bf18      	it	ne
 80a293c:	f040 0001 	orrne.w	r0, r0, #1
 80a2940:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80a2944:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80a2948:	fa03 fc0c 	lsl.w	ip, r3, ip
 80a294c:	ea40 000c 	orr.w	r0, r0, ip
 80a2950:	fa23 f302 	lsr.w	r3, r3, r2
 80a2954:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80a2958:	e7cc      	b.n	80a28f4 <__aeabi_d2f+0x14>
 80a295a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80a295e:	d107      	bne.n	80a2970 <__aeabi_d2f+0x90>
 80a2960:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80a2964:	bf1e      	ittt	ne
 80a2966:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80a296a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80a296e:	4770      	bxne	lr
 80a2970:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80a2974:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2978:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a297c:	4770      	bx	lr
 80a297e:	bf00      	nop

080a2980 <__aeabi_frsub>:
 80a2980:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80a2984:	e002      	b.n	80a298c <__addsf3>
 80a2986:	bf00      	nop

080a2988 <__aeabi_fsub>:
 80a2988:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080a298c <__addsf3>:
 80a298c:	0042      	lsls	r2, r0, #1
 80a298e:	bf1f      	itttt	ne
 80a2990:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80a2994:	ea92 0f03 	teqne	r2, r3
 80a2998:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80a299c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a29a0:	d06a      	beq.n	80a2a78 <__addsf3+0xec>
 80a29a2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80a29a6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80a29aa:	bfc1      	itttt	gt
 80a29ac:	18d2      	addgt	r2, r2, r3
 80a29ae:	4041      	eorgt	r1, r0
 80a29b0:	4048      	eorgt	r0, r1
 80a29b2:	4041      	eorgt	r1, r0
 80a29b4:	bfb8      	it	lt
 80a29b6:	425b      	neglt	r3, r3
 80a29b8:	2b19      	cmp	r3, #25
 80a29ba:	bf88      	it	hi
 80a29bc:	4770      	bxhi	lr
 80a29be:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80a29c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a29c6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80a29ca:	bf18      	it	ne
 80a29cc:	4240      	negne	r0, r0
 80a29ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80a29d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80a29d6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80a29da:	bf18      	it	ne
 80a29dc:	4249      	negne	r1, r1
 80a29de:	ea92 0f03 	teq	r2, r3
 80a29e2:	d03f      	beq.n	80a2a64 <__addsf3+0xd8>
 80a29e4:	f1a2 0201 	sub.w	r2, r2, #1
 80a29e8:	fa41 fc03 	asr.w	ip, r1, r3
 80a29ec:	eb10 000c 	adds.w	r0, r0, ip
 80a29f0:	f1c3 0320 	rsb	r3, r3, #32
 80a29f4:	fa01 f103 	lsl.w	r1, r1, r3
 80a29f8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a29fc:	d502      	bpl.n	80a2a04 <__addsf3+0x78>
 80a29fe:	4249      	negs	r1, r1
 80a2a00:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80a2a04:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80a2a08:	d313      	bcc.n	80a2a32 <__addsf3+0xa6>
 80a2a0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80a2a0e:	d306      	bcc.n	80a2a1e <__addsf3+0x92>
 80a2a10:	0840      	lsrs	r0, r0, #1
 80a2a12:	ea4f 0131 	mov.w	r1, r1, rrx
 80a2a16:	f102 0201 	add.w	r2, r2, #1
 80a2a1a:	2afe      	cmp	r2, #254	; 0xfe
 80a2a1c:	d251      	bcs.n	80a2ac2 <__addsf3+0x136>
 80a2a1e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80a2a22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2a26:	bf08      	it	eq
 80a2a28:	f020 0001 	biceq.w	r0, r0, #1
 80a2a2c:	ea40 0003 	orr.w	r0, r0, r3
 80a2a30:	4770      	bx	lr
 80a2a32:	0049      	lsls	r1, r1, #1
 80a2a34:	eb40 0000 	adc.w	r0, r0, r0
 80a2a38:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 80a2a3c:	f1a2 0201 	sub.w	r2, r2, #1
 80a2a40:	d1ed      	bne.n	80a2a1e <__addsf3+0x92>
 80a2a42:	fab0 fc80 	clz	ip, r0
 80a2a46:	f1ac 0c08 	sub.w	ip, ip, #8
 80a2a4a:	ebb2 020c 	subs.w	r2, r2, ip
 80a2a4e:	fa00 f00c 	lsl.w	r0, r0, ip
 80a2a52:	bfaa      	itet	ge
 80a2a54:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80a2a58:	4252      	neglt	r2, r2
 80a2a5a:	4318      	orrge	r0, r3
 80a2a5c:	bfbc      	itt	lt
 80a2a5e:	40d0      	lsrlt	r0, r2
 80a2a60:	4318      	orrlt	r0, r3
 80a2a62:	4770      	bx	lr
 80a2a64:	f092 0f00 	teq	r2, #0
 80a2a68:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 80a2a6c:	bf06      	itte	eq
 80a2a6e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 80a2a72:	3201      	addeq	r2, #1
 80a2a74:	3b01      	subne	r3, #1
 80a2a76:	e7b5      	b.n	80a29e4 <__addsf3+0x58>
 80a2a78:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80a2a7c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80a2a80:	bf18      	it	ne
 80a2a82:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80a2a86:	d021      	beq.n	80a2acc <__addsf3+0x140>
 80a2a88:	ea92 0f03 	teq	r2, r3
 80a2a8c:	d004      	beq.n	80a2a98 <__addsf3+0x10c>
 80a2a8e:	f092 0f00 	teq	r2, #0
 80a2a92:	bf08      	it	eq
 80a2a94:	4608      	moveq	r0, r1
 80a2a96:	4770      	bx	lr
 80a2a98:	ea90 0f01 	teq	r0, r1
 80a2a9c:	bf1c      	itt	ne
 80a2a9e:	2000      	movne	r0, #0
 80a2aa0:	4770      	bxne	lr
 80a2aa2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80a2aa6:	d104      	bne.n	80a2ab2 <__addsf3+0x126>
 80a2aa8:	0040      	lsls	r0, r0, #1
 80a2aaa:	bf28      	it	cs
 80a2aac:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80a2ab0:	4770      	bx	lr
 80a2ab2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80a2ab6:	bf3c      	itt	cc
 80a2ab8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80a2abc:	4770      	bxcc	lr
 80a2abe:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80a2ac2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80a2ac6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2aca:	4770      	bx	lr
 80a2acc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80a2ad0:	bf16      	itet	ne
 80a2ad2:	4608      	movne	r0, r1
 80a2ad4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80a2ad8:	4601      	movne	r1, r0
 80a2ada:	0242      	lsls	r2, r0, #9
 80a2adc:	bf06      	itte	eq
 80a2ade:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80a2ae2:	ea90 0f01 	teqeq	r0, r1
 80a2ae6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80a2aea:	4770      	bx	lr

080a2aec <__aeabi_ui2f>:
 80a2aec:	f04f 0300 	mov.w	r3, #0
 80a2af0:	e004      	b.n	80a2afc <__aeabi_i2f+0x8>
 80a2af2:	bf00      	nop

080a2af4 <__aeabi_i2f>:
 80a2af4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80a2af8:	bf48      	it	mi
 80a2afa:	4240      	negmi	r0, r0
 80a2afc:	ea5f 0c00 	movs.w	ip, r0
 80a2b00:	bf08      	it	eq
 80a2b02:	4770      	bxeq	lr
 80a2b04:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80a2b08:	4601      	mov	r1, r0
 80a2b0a:	f04f 0000 	mov.w	r0, #0
 80a2b0e:	e01c      	b.n	80a2b4a <__aeabi_l2f+0x2a>

080a2b10 <__aeabi_ul2f>:
 80a2b10:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b14:	bf08      	it	eq
 80a2b16:	4770      	bxeq	lr
 80a2b18:	f04f 0300 	mov.w	r3, #0
 80a2b1c:	e00a      	b.n	80a2b34 <__aeabi_l2f+0x14>
 80a2b1e:	bf00      	nop

080a2b20 <__aeabi_l2f>:
 80a2b20:	ea50 0201 	orrs.w	r2, r0, r1
 80a2b24:	bf08      	it	eq
 80a2b26:	4770      	bxeq	lr
 80a2b28:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80a2b2c:	d502      	bpl.n	80a2b34 <__aeabi_l2f+0x14>
 80a2b2e:	4240      	negs	r0, r0
 80a2b30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80a2b34:	ea5f 0c01 	movs.w	ip, r1
 80a2b38:	bf02      	ittt	eq
 80a2b3a:	4684      	moveq	ip, r0
 80a2b3c:	4601      	moveq	r1, r0
 80a2b3e:	2000      	moveq	r0, #0
 80a2b40:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 80a2b44:	bf08      	it	eq
 80a2b46:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 80a2b4a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 80a2b4e:	fabc f28c 	clz	r2, ip
 80a2b52:	3a08      	subs	r2, #8
 80a2b54:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 80a2b58:	db10      	blt.n	80a2b7c <__aeabi_l2f+0x5c>
 80a2b5a:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2b5e:	4463      	add	r3, ip
 80a2b60:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2b64:	f1c2 0220 	rsb	r2, r2, #32
 80a2b68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80a2b6c:	fa20 f202 	lsr.w	r2, r0, r2
 80a2b70:	eb43 0002 	adc.w	r0, r3, r2
 80a2b74:	bf08      	it	eq
 80a2b76:	f020 0001 	biceq.w	r0, r0, #1
 80a2b7a:	4770      	bx	lr
 80a2b7c:	f102 0220 	add.w	r2, r2, #32
 80a2b80:	fa01 fc02 	lsl.w	ip, r1, r2
 80a2b84:	f1c2 0220 	rsb	r2, r2, #32
 80a2b88:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80a2b8c:	fa21 f202 	lsr.w	r2, r1, r2
 80a2b90:	eb43 0002 	adc.w	r0, r3, r2
 80a2b94:	bf08      	it	eq
 80a2b96:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2b9a:	4770      	bx	lr

080a2b9c <__aeabi_fmul>:
 80a2b9c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2ba0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2ba4:	bf1e      	ittt	ne
 80a2ba6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2baa:	ea92 0f0c 	teqne	r2, ip
 80a2bae:	ea93 0f0c 	teqne	r3, ip
 80a2bb2:	d06f      	beq.n	80a2c94 <__aeabi_fmul+0xf8>
 80a2bb4:	441a      	add	r2, r3
 80a2bb6:	ea80 0c01 	eor.w	ip, r0, r1
 80a2bba:	0240      	lsls	r0, r0, #9
 80a2bbc:	bf18      	it	ne
 80a2bbe:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80a2bc2:	d01e      	beq.n	80a2c02 <__aeabi_fmul+0x66>
 80a2bc4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80a2bc8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80a2bcc:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80a2bd0:	fba0 3101 	umull	r3, r1, r0, r1
 80a2bd4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2bd8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80a2bdc:	bf3e      	ittt	cc
 80a2bde:	0049      	lslcc	r1, r1, #1
 80a2be0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80a2be4:	005b      	lslcc	r3, r3, #1
 80a2be6:	ea40 0001 	orr.w	r0, r0, r1
 80a2bea:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80a2bee:	2afd      	cmp	r2, #253	; 0xfd
 80a2bf0:	d81d      	bhi.n	80a2c2e <__aeabi_fmul+0x92>
 80a2bf2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80a2bf6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2bfa:	bf08      	it	eq
 80a2bfc:	f020 0001 	biceq.w	r0, r0, #1
 80a2c00:	4770      	bx	lr
 80a2c02:	f090 0f00 	teq	r0, #0
 80a2c06:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2c0a:	bf08      	it	eq
 80a2c0c:	0249      	lsleq	r1, r1, #9
 80a2c0e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2c12:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80a2c16:	3a7f      	subs	r2, #127	; 0x7f
 80a2c18:	bfc2      	ittt	gt
 80a2c1a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2c1e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2c22:	4770      	bxgt	lr
 80a2c24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2c28:	f04f 0300 	mov.w	r3, #0
 80a2c2c:	3a01      	subs	r2, #1
 80a2c2e:	dc5d      	bgt.n	80a2cec <__aeabi_fmul+0x150>
 80a2c30:	f112 0f19 	cmn.w	r2, #25
 80a2c34:	bfdc      	itt	le
 80a2c36:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80a2c3a:	4770      	bxle	lr
 80a2c3c:	f1c2 0200 	rsb	r2, r2, #0
 80a2c40:	0041      	lsls	r1, r0, #1
 80a2c42:	fa21 f102 	lsr.w	r1, r1, r2
 80a2c46:	f1c2 0220 	rsb	r2, r2, #32
 80a2c4a:	fa00 fc02 	lsl.w	ip, r0, r2
 80a2c4e:	ea5f 0031 	movs.w	r0, r1, rrx
 80a2c52:	f140 0000 	adc.w	r0, r0, #0
 80a2c56:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80a2c5a:	bf08      	it	eq
 80a2c5c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80a2c60:	4770      	bx	lr
 80a2c62:	f092 0f00 	teq	r2, #0
 80a2c66:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2c6a:	bf02      	ittt	eq
 80a2c6c:	0040      	lsleq	r0, r0, #1
 80a2c6e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2c72:	3a01      	subeq	r2, #1
 80a2c74:	d0f9      	beq.n	80a2c6a <__aeabi_fmul+0xce>
 80a2c76:	ea40 000c 	orr.w	r0, r0, ip
 80a2c7a:	f093 0f00 	teq	r3, #0
 80a2c7e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2c82:	bf02      	ittt	eq
 80a2c84:	0049      	lsleq	r1, r1, #1
 80a2c86:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2c8a:	3b01      	subeq	r3, #1
 80a2c8c:	d0f9      	beq.n	80a2c82 <__aeabi_fmul+0xe6>
 80a2c8e:	ea41 010c 	orr.w	r1, r1, ip
 80a2c92:	e78f      	b.n	80a2bb4 <__aeabi_fmul+0x18>
 80a2c94:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2c98:	ea92 0f0c 	teq	r2, ip
 80a2c9c:	bf18      	it	ne
 80a2c9e:	ea93 0f0c 	teqne	r3, ip
 80a2ca2:	d00a      	beq.n	80a2cba <__aeabi_fmul+0x11e>
 80a2ca4:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2ca8:	bf18      	it	ne
 80a2caa:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2cae:	d1d8      	bne.n	80a2c62 <__aeabi_fmul+0xc6>
 80a2cb0:	ea80 0001 	eor.w	r0, r0, r1
 80a2cb4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2cb8:	4770      	bx	lr
 80a2cba:	f090 0f00 	teq	r0, #0
 80a2cbe:	bf17      	itett	ne
 80a2cc0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80a2cc4:	4608      	moveq	r0, r1
 80a2cc6:	f091 0f00 	teqne	r1, #0
 80a2cca:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80a2cce:	d014      	beq.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2cd0:	ea92 0f0c 	teq	r2, ip
 80a2cd4:	d101      	bne.n	80a2cda <__aeabi_fmul+0x13e>
 80a2cd6:	0242      	lsls	r2, r0, #9
 80a2cd8:	d10f      	bne.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2cda:	ea93 0f0c 	teq	r3, ip
 80a2cde:	d103      	bne.n	80a2ce8 <__aeabi_fmul+0x14c>
 80a2ce0:	024b      	lsls	r3, r1, #9
 80a2ce2:	bf18      	it	ne
 80a2ce4:	4608      	movne	r0, r1
 80a2ce6:	d108      	bne.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2ce8:	ea80 0001 	eor.w	r0, r0, r1
 80a2cec:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80a2cf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2cf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2cf8:	4770      	bx	lr
 80a2cfa:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80a2cfe:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80a2d02:	4770      	bx	lr

080a2d04 <__aeabi_fdiv>:
 80a2d04:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80a2d08:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80a2d0c:	bf1e      	ittt	ne
 80a2d0e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80a2d12:	ea92 0f0c 	teqne	r2, ip
 80a2d16:	ea93 0f0c 	teqne	r3, ip
 80a2d1a:	d069      	beq.n	80a2df0 <__aeabi_fdiv+0xec>
 80a2d1c:	eba2 0203 	sub.w	r2, r2, r3
 80a2d20:	ea80 0c01 	eor.w	ip, r0, r1
 80a2d24:	0249      	lsls	r1, r1, #9
 80a2d26:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80a2d2a:	d037      	beq.n	80a2d9c <__aeabi_fdiv+0x98>
 80a2d2c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80a2d30:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80a2d34:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80a2d38:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80a2d3c:	428b      	cmp	r3, r1
 80a2d3e:	bf38      	it	cc
 80a2d40:	005b      	lslcc	r3, r3, #1
 80a2d42:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80a2d46:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80a2d4a:	428b      	cmp	r3, r1
 80a2d4c:	bf24      	itt	cs
 80a2d4e:	1a5b      	subcs	r3, r3, r1
 80a2d50:	ea40 000c 	orrcs.w	r0, r0, ip
 80a2d54:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80a2d58:	bf24      	itt	cs
 80a2d5a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80a2d5e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80a2d62:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80a2d66:	bf24      	itt	cs
 80a2d68:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80a2d6c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80a2d70:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80a2d74:	bf24      	itt	cs
 80a2d76:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80a2d7a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80a2d7e:	011b      	lsls	r3, r3, #4
 80a2d80:	bf18      	it	ne
 80a2d82:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80a2d86:	d1e0      	bne.n	80a2d4a <__aeabi_fdiv+0x46>
 80a2d88:	2afd      	cmp	r2, #253	; 0xfd
 80a2d8a:	f63f af50 	bhi.w	80a2c2e <__aeabi_fmul+0x92>
 80a2d8e:	428b      	cmp	r3, r1
 80a2d90:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80a2d94:	bf08      	it	eq
 80a2d96:	f020 0001 	biceq.w	r0, r0, #1
 80a2d9a:	4770      	bx	lr
 80a2d9c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80a2da0:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80a2da4:	327f      	adds	r2, #127	; 0x7f
 80a2da6:	bfc2      	ittt	gt
 80a2da8:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80a2dac:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80a2db0:	4770      	bxgt	lr
 80a2db2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80a2db6:	f04f 0300 	mov.w	r3, #0
 80a2dba:	3a01      	subs	r2, #1
 80a2dbc:	e737      	b.n	80a2c2e <__aeabi_fmul+0x92>
 80a2dbe:	f092 0f00 	teq	r2, #0
 80a2dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80a2dc6:	bf02      	ittt	eq
 80a2dc8:	0040      	lsleq	r0, r0, #1
 80a2dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80a2dce:	3a01      	subeq	r2, #1
 80a2dd0:	d0f9      	beq.n	80a2dc6 <__aeabi_fdiv+0xc2>
 80a2dd2:	ea40 000c 	orr.w	r0, r0, ip
 80a2dd6:	f093 0f00 	teq	r3, #0
 80a2dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80a2dde:	bf02      	ittt	eq
 80a2de0:	0049      	lsleq	r1, r1, #1
 80a2de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80a2de6:	3b01      	subeq	r3, #1
 80a2de8:	d0f9      	beq.n	80a2dde <__aeabi_fdiv+0xda>
 80a2dea:	ea41 010c 	orr.w	r1, r1, ip
 80a2dee:	e795      	b.n	80a2d1c <__aeabi_fdiv+0x18>
 80a2df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80a2df4:	ea92 0f0c 	teq	r2, ip
 80a2df8:	d108      	bne.n	80a2e0c <__aeabi_fdiv+0x108>
 80a2dfa:	0242      	lsls	r2, r0, #9
 80a2dfc:	f47f af7d 	bne.w	80a2cfa <__aeabi_fmul+0x15e>
 80a2e00:	ea93 0f0c 	teq	r3, ip
 80a2e04:	f47f af70 	bne.w	80a2ce8 <__aeabi_fmul+0x14c>
 80a2e08:	4608      	mov	r0, r1
 80a2e0a:	e776      	b.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2e0c:	ea93 0f0c 	teq	r3, ip
 80a2e10:	d104      	bne.n	80a2e1c <__aeabi_fdiv+0x118>
 80a2e12:	024b      	lsls	r3, r1, #9
 80a2e14:	f43f af4c 	beq.w	80a2cb0 <__aeabi_fmul+0x114>
 80a2e18:	4608      	mov	r0, r1
 80a2e1a:	e76e      	b.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2e1c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80a2e20:	bf18      	it	ne
 80a2e22:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80a2e26:	d1ca      	bne.n	80a2dbe <__aeabi_fdiv+0xba>
 80a2e28:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80a2e2c:	f47f af5c 	bne.w	80a2ce8 <__aeabi_fmul+0x14c>
 80a2e30:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 80a2e34:	f47f af3c 	bne.w	80a2cb0 <__aeabi_fmul+0x114>
 80a2e38:	e75f      	b.n	80a2cfa <__aeabi_fmul+0x15e>
 80a2e3a:	bf00      	nop

080a2e3c <__aeabi_uldivmod>:
 80a2e3c:	b953      	cbnz	r3, 80a2e54 <__aeabi_uldivmod+0x18>
 80a2e3e:	b94a      	cbnz	r2, 80a2e54 <__aeabi_uldivmod+0x18>
 80a2e40:	2900      	cmp	r1, #0
 80a2e42:	bf08      	it	eq
 80a2e44:	2800      	cmpeq	r0, #0
 80a2e46:	bf1c      	itt	ne
 80a2e48:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80a2e4c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80a2e50:	f000 b9a6 	b.w	80a31a0 <__aeabi_idiv0>
 80a2e54:	f1ad 0c08 	sub.w	ip, sp, #8
 80a2e58:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80a2e5c:	f000 f82a 	bl	80a2eb4 <__udivmoddi4>
 80a2e60:	f8dd e004 	ldr.w	lr, [sp, #4]
 80a2e64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80a2e68:	b004      	add	sp, #16
 80a2e6a:	4770      	bx	lr

080a2e6c <__aeabi_d2ulz>:
 80a2e6c:	b5d0      	push	{r4, r6, r7, lr}
 80a2e6e:	2200      	movs	r2, #0
 80a2e70:	4b0e      	ldr	r3, [pc, #56]	; (80a2eac <__aeabi_d2ulz+0x40>)
 80a2e72:	4606      	mov	r6, r0
 80a2e74:	460f      	mov	r7, r1
 80a2e76:	f7ff fa79 	bl	80a236c <__aeabi_dmul>
 80a2e7a:	f7ff fd11 	bl	80a28a0 <__aeabi_d2uiz>
 80a2e7e:	4604      	mov	r4, r0
 80a2e80:	f7ff f9fe 	bl	80a2280 <__aeabi_ui2d>
 80a2e84:	2200      	movs	r2, #0
 80a2e86:	4b0a      	ldr	r3, [pc, #40]	; (80a2eb0 <__aeabi_d2ulz+0x44>)
 80a2e88:	f7ff fa70 	bl	80a236c <__aeabi_dmul>
 80a2e8c:	4602      	mov	r2, r0
 80a2e8e:	460b      	mov	r3, r1
 80a2e90:	4630      	mov	r0, r6
 80a2e92:	4639      	mov	r1, r7
 80a2e94:	f7ff f8b6 	bl	80a2004 <__aeabi_dsub>
 80a2e98:	f7ff fd02 	bl	80a28a0 <__aeabi_d2uiz>
 80a2e9c:	4623      	mov	r3, r4
 80a2e9e:	2200      	movs	r2, #0
 80a2ea0:	ea42 0200 	orr.w	r2, r2, r0
 80a2ea4:	4610      	mov	r0, r2
 80a2ea6:	4619      	mov	r1, r3
 80a2ea8:	bdd0      	pop	{r4, r6, r7, pc}
 80a2eaa:	bf00      	nop
 80a2eac:	3df00000 	.word	0x3df00000
 80a2eb0:	41f00000 	.word	0x41f00000

080a2eb4 <__udivmoddi4>:
 80a2eb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80a2eb8:	468c      	mov	ip, r1
 80a2eba:	460c      	mov	r4, r1
 80a2ebc:	4605      	mov	r5, r0
 80a2ebe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80a2ec0:	2b00      	cmp	r3, #0
 80a2ec2:	d14f      	bne.n	80a2f64 <__udivmoddi4+0xb0>
 80a2ec4:	428a      	cmp	r2, r1
 80a2ec6:	4617      	mov	r7, r2
 80a2ec8:	d96b      	bls.n	80a2fa2 <__udivmoddi4+0xee>
 80a2eca:	fab2 fe82 	clz	lr, r2
 80a2ece:	f1be 0f00 	cmp.w	lr, #0
 80a2ed2:	d00b      	beq.n	80a2eec <__udivmoddi4+0x38>
 80a2ed4:	f1ce 0520 	rsb	r5, lr, #32
 80a2ed8:	fa20 f505 	lsr.w	r5, r0, r5
 80a2edc:	fa01 f30e 	lsl.w	r3, r1, lr
 80a2ee0:	ea45 0c03 	orr.w	ip, r5, r3
 80a2ee4:	fa02 f70e 	lsl.w	r7, r2, lr
 80a2ee8:	fa00 f50e 	lsl.w	r5, r0, lr
 80a2eec:	0c39      	lsrs	r1, r7, #16
 80a2eee:	fbbc f0f1 	udiv	r0, ip, r1
 80a2ef2:	b2ba      	uxth	r2, r7
 80a2ef4:	fb01 c310 	mls	r3, r1, r0, ip
 80a2ef8:	fb00 f802 	mul.w	r8, r0, r2
 80a2efc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a2f00:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 80a2f04:	45a0      	cmp	r8, r4
 80a2f06:	d909      	bls.n	80a2f1c <__udivmoddi4+0x68>
 80a2f08:	19e4      	adds	r4, r4, r7
 80a2f0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80a2f0e:	f080 8128 	bcs.w	80a3162 <__udivmoddi4+0x2ae>
 80a2f12:	45a0      	cmp	r8, r4
 80a2f14:	f240 8125 	bls.w	80a3162 <__udivmoddi4+0x2ae>
 80a2f18:	3802      	subs	r0, #2
 80a2f1a:	443c      	add	r4, r7
 80a2f1c:	ebc8 0404 	rsb	r4, r8, r4
 80a2f20:	fbb4 f3f1 	udiv	r3, r4, r1
 80a2f24:	fb01 4c13 	mls	ip, r1, r3, r4
 80a2f28:	fb03 f202 	mul.w	r2, r3, r2
 80a2f2c:	b2ac      	uxth	r4, r5
 80a2f2e:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 80a2f32:	428a      	cmp	r2, r1
 80a2f34:	d909      	bls.n	80a2f4a <__udivmoddi4+0x96>
 80a2f36:	19c9      	adds	r1, r1, r7
 80a2f38:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 80a2f3c:	f080 810f 	bcs.w	80a315e <__udivmoddi4+0x2aa>
 80a2f40:	428a      	cmp	r2, r1
 80a2f42:	f240 810c 	bls.w	80a315e <__udivmoddi4+0x2aa>
 80a2f46:	3b02      	subs	r3, #2
 80a2f48:	4439      	add	r1, r7
 80a2f4a:	1a8a      	subs	r2, r1, r2
 80a2f4c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80a2f50:	2100      	movs	r1, #0
 80a2f52:	2e00      	cmp	r6, #0
 80a2f54:	d063      	beq.n	80a301e <__udivmoddi4+0x16a>
 80a2f56:	fa22 f20e 	lsr.w	r2, r2, lr
 80a2f5a:	2300      	movs	r3, #0
 80a2f5c:	e886 000c 	stmia.w	r6, {r2, r3}
 80a2f60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f64:	428b      	cmp	r3, r1
 80a2f66:	d907      	bls.n	80a2f78 <__udivmoddi4+0xc4>
 80a2f68:	2e00      	cmp	r6, #0
 80a2f6a:	d056      	beq.n	80a301a <__udivmoddi4+0x166>
 80a2f6c:	2100      	movs	r1, #0
 80a2f6e:	e886 0011 	stmia.w	r6, {r0, r4}
 80a2f72:	4608      	mov	r0, r1
 80a2f74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2f78:	fab3 f183 	clz	r1, r3
 80a2f7c:	2900      	cmp	r1, #0
 80a2f7e:	f040 8093 	bne.w	80a30a8 <__udivmoddi4+0x1f4>
 80a2f82:	42a3      	cmp	r3, r4
 80a2f84:	d302      	bcc.n	80a2f8c <__udivmoddi4+0xd8>
 80a2f86:	4282      	cmp	r2, r0
 80a2f88:	f200 80fe 	bhi.w	80a3188 <__udivmoddi4+0x2d4>
 80a2f8c:	1a85      	subs	r5, r0, r2
 80a2f8e:	eb64 0303 	sbc.w	r3, r4, r3
 80a2f92:	469c      	mov	ip, r3
 80a2f94:	2001      	movs	r0, #1
 80a2f96:	2e00      	cmp	r6, #0
 80a2f98:	d041      	beq.n	80a301e <__udivmoddi4+0x16a>
 80a2f9a:	e886 1020 	stmia.w	r6, {r5, ip}
 80a2f9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a2fa2:	b912      	cbnz	r2, 80a2faa <__udivmoddi4+0xf6>
 80a2fa4:	2701      	movs	r7, #1
 80a2fa6:	fbb7 f7f2 	udiv	r7, r7, r2
 80a2faa:	fab7 fe87 	clz	lr, r7
 80a2fae:	f1be 0f00 	cmp.w	lr, #0
 80a2fb2:	d136      	bne.n	80a3022 <__udivmoddi4+0x16e>
 80a2fb4:	1be4      	subs	r4, r4, r7
 80a2fb6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a2fba:	fa1f f987 	uxth.w	r9, r7
 80a2fbe:	2101      	movs	r1, #1
 80a2fc0:	fbb4 f3f8 	udiv	r3, r4, r8
 80a2fc4:	fb08 4413 	mls	r4, r8, r3, r4
 80a2fc8:	fb09 f203 	mul.w	r2, r9, r3
 80a2fcc:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80a2fd0:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80a2fd4:	42a2      	cmp	r2, r4
 80a2fd6:	d907      	bls.n	80a2fe8 <__udivmoddi4+0x134>
 80a2fd8:	19e4      	adds	r4, r4, r7
 80a2fda:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80a2fde:	d202      	bcs.n	80a2fe6 <__udivmoddi4+0x132>
 80a2fe0:	42a2      	cmp	r2, r4
 80a2fe2:	f200 80d3 	bhi.w	80a318c <__udivmoddi4+0x2d8>
 80a2fe6:	4603      	mov	r3, r0
 80a2fe8:	1aa4      	subs	r4, r4, r2
 80a2fea:	fbb4 f0f8 	udiv	r0, r4, r8
 80a2fee:	fb08 4810 	mls	r8, r8, r0, r4
 80a2ff2:	fb09 f900 	mul.w	r9, r9, r0
 80a2ff6:	b2ac      	uxth	r4, r5
 80a2ff8:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 80a2ffc:	4591      	cmp	r9, r2
 80a2ffe:	d907      	bls.n	80a3010 <__udivmoddi4+0x15c>
 80a3000:	19d2      	adds	r2, r2, r7
 80a3002:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80a3006:	d202      	bcs.n	80a300e <__udivmoddi4+0x15a>
 80a3008:	4591      	cmp	r9, r2
 80a300a:	f200 80ba 	bhi.w	80a3182 <__udivmoddi4+0x2ce>
 80a300e:	4620      	mov	r0, r4
 80a3010:	ebc9 0202 	rsb	r2, r9, r2
 80a3014:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80a3018:	e79b      	b.n	80a2f52 <__udivmoddi4+0x9e>
 80a301a:	4631      	mov	r1, r6
 80a301c:	4630      	mov	r0, r6
 80a301e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a3022:	fa07 f70e 	lsl.w	r7, r7, lr
 80a3026:	f1ce 0c20 	rsb	ip, lr, #32
 80a302a:	fa24 f30c 	lsr.w	r3, r4, ip
 80a302e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80a3032:	fbb3 faf8 	udiv	sl, r3, r8
 80a3036:	fa1f f987 	uxth.w	r9, r7
 80a303a:	fb08 351a 	mls	r5, r8, sl, r3
 80a303e:	fa20 fc0c 	lsr.w	ip, r0, ip
 80a3042:	fa04 f40e 	lsl.w	r4, r4, lr
 80a3046:	fb0a fb09 	mul.w	fp, sl, r9
 80a304a:	ea4c 0c04 	orr.w	ip, ip, r4
 80a304e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80a3052:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 80a3056:	459b      	cmp	fp, r3
 80a3058:	fa00 f50e 	lsl.w	r5, r0, lr
 80a305c:	d90a      	bls.n	80a3074 <__udivmoddi4+0x1c0>
 80a305e:	19db      	adds	r3, r3, r7
 80a3060:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 80a3064:	f080 808b 	bcs.w	80a317e <__udivmoddi4+0x2ca>
 80a3068:	459b      	cmp	fp, r3
 80a306a:	f240 8088 	bls.w	80a317e <__udivmoddi4+0x2ca>
 80a306e:	f1aa 0a02 	sub.w	sl, sl, #2
 80a3072:	443b      	add	r3, r7
 80a3074:	ebcb 0303 	rsb	r3, fp, r3
 80a3078:	fbb3 f0f8 	udiv	r0, r3, r8
 80a307c:	fb08 3310 	mls	r3, r8, r0, r3
 80a3080:	fb00 f409 	mul.w	r4, r0, r9
 80a3084:	fa1f fc8c 	uxth.w	ip, ip
 80a3088:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80a308c:	429c      	cmp	r4, r3
 80a308e:	d907      	bls.n	80a30a0 <__udivmoddi4+0x1ec>
 80a3090:	19db      	adds	r3, r3, r7
 80a3092:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80a3096:	d26e      	bcs.n	80a3176 <__udivmoddi4+0x2c2>
 80a3098:	429c      	cmp	r4, r3
 80a309a:	d96c      	bls.n	80a3176 <__udivmoddi4+0x2c2>
 80a309c:	3802      	subs	r0, #2
 80a309e:	443b      	add	r3, r7
 80a30a0:	1b1c      	subs	r4, r3, r4
 80a30a2:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80a30a6:	e78b      	b.n	80a2fc0 <__udivmoddi4+0x10c>
 80a30a8:	f1c1 0e20 	rsb	lr, r1, #32
 80a30ac:	408b      	lsls	r3, r1
 80a30ae:	fa22 fc0e 	lsr.w	ip, r2, lr
 80a30b2:	ea4c 0c03 	orr.w	ip, ip, r3
 80a30b6:	fa24 f70e 	lsr.w	r7, r4, lr
 80a30ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80a30be:	fbb7 faf9 	udiv	sl, r7, r9
 80a30c2:	fa1f f38c 	uxth.w	r3, ip
 80a30c6:	fb09 771a 	mls	r7, r9, sl, r7
 80a30ca:	fa20 f80e 	lsr.w	r8, r0, lr
 80a30ce:	408c      	lsls	r4, r1
 80a30d0:	fb0a f503 	mul.w	r5, sl, r3
 80a30d4:	ea48 0404 	orr.w	r4, r8, r4
 80a30d8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80a30dc:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80a30e0:	42bd      	cmp	r5, r7
 80a30e2:	fa02 f201 	lsl.w	r2, r2, r1
 80a30e6:	fa00 fb01 	lsl.w	fp, r0, r1
 80a30ea:	d909      	bls.n	80a3100 <__udivmoddi4+0x24c>
 80a30ec:	eb17 070c 	adds.w	r7, r7, ip
 80a30f0:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 80a30f4:	d241      	bcs.n	80a317a <__udivmoddi4+0x2c6>
 80a30f6:	42bd      	cmp	r5, r7
 80a30f8:	d93f      	bls.n	80a317a <__udivmoddi4+0x2c6>
 80a30fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80a30fe:	4467      	add	r7, ip
 80a3100:	1b7f      	subs	r7, r7, r5
 80a3102:	fbb7 f5f9 	udiv	r5, r7, r9
 80a3106:	fb09 7715 	mls	r7, r9, r5, r7
 80a310a:	fb05 f303 	mul.w	r3, r5, r3
 80a310e:	b2a4      	uxth	r4, r4
 80a3110:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 80a3114:	42bb      	cmp	r3, r7
 80a3116:	d908      	bls.n	80a312a <__udivmoddi4+0x276>
 80a3118:	eb17 070c 	adds.w	r7, r7, ip
 80a311c:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 80a3120:	d227      	bcs.n	80a3172 <__udivmoddi4+0x2be>
 80a3122:	42bb      	cmp	r3, r7
 80a3124:	d925      	bls.n	80a3172 <__udivmoddi4+0x2be>
 80a3126:	3d02      	subs	r5, #2
 80a3128:	4467      	add	r7, ip
 80a312a:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 80a312e:	fba0 8902 	umull	r8, r9, r0, r2
 80a3132:	1aff      	subs	r7, r7, r3
 80a3134:	454f      	cmp	r7, r9
 80a3136:	4645      	mov	r5, r8
 80a3138:	464c      	mov	r4, r9
 80a313a:	d314      	bcc.n	80a3166 <__udivmoddi4+0x2b2>
 80a313c:	d029      	beq.n	80a3192 <__udivmoddi4+0x2de>
 80a313e:	b366      	cbz	r6, 80a319a <__udivmoddi4+0x2e6>
 80a3140:	ebbb 0305 	subs.w	r3, fp, r5
 80a3144:	eb67 0704 	sbc.w	r7, r7, r4
 80a3148:	fa07 fe0e 	lsl.w	lr, r7, lr
 80a314c:	40cb      	lsrs	r3, r1
 80a314e:	40cf      	lsrs	r7, r1
 80a3150:	ea4e 0303 	orr.w	r3, lr, r3
 80a3154:	e886 0088 	stmia.w	r6, {r3, r7}
 80a3158:	2100      	movs	r1, #0
 80a315a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80a315e:	4623      	mov	r3, r4
 80a3160:	e6f3      	b.n	80a2f4a <__udivmoddi4+0x96>
 80a3162:	4618      	mov	r0, r3
 80a3164:	e6da      	b.n	80a2f1c <__udivmoddi4+0x68>
 80a3166:	ebb8 0502 	subs.w	r5, r8, r2
 80a316a:	eb69 040c 	sbc.w	r4, r9, ip
 80a316e:	3801      	subs	r0, #1
 80a3170:	e7e5      	b.n	80a313e <__udivmoddi4+0x28a>
 80a3172:	4605      	mov	r5, r0
 80a3174:	e7d9      	b.n	80a312a <__udivmoddi4+0x276>
 80a3176:	4610      	mov	r0, r2
 80a3178:	e792      	b.n	80a30a0 <__udivmoddi4+0x1ec>
 80a317a:	4682      	mov	sl, r0
 80a317c:	e7c0      	b.n	80a3100 <__udivmoddi4+0x24c>
 80a317e:	4692      	mov	sl, r2
 80a3180:	e778      	b.n	80a3074 <__udivmoddi4+0x1c0>
 80a3182:	3802      	subs	r0, #2
 80a3184:	443a      	add	r2, r7
 80a3186:	e743      	b.n	80a3010 <__udivmoddi4+0x15c>
 80a3188:	4608      	mov	r0, r1
 80a318a:	e704      	b.n	80a2f96 <__udivmoddi4+0xe2>
 80a318c:	3b02      	subs	r3, #2
 80a318e:	443c      	add	r4, r7
 80a3190:	e72a      	b.n	80a2fe8 <__udivmoddi4+0x134>
 80a3192:	45c3      	cmp	fp, r8
 80a3194:	d3e7      	bcc.n	80a3166 <__udivmoddi4+0x2b2>
 80a3196:	463c      	mov	r4, r7
 80a3198:	e7d1      	b.n	80a313e <__udivmoddi4+0x28a>
 80a319a:	4631      	mov	r1, r6
 80a319c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080a31a0 <__aeabi_idiv0>:
 80a31a0:	4770      	bx	lr
 80a31a2:	bf00      	nop

080a31a4 <__cxa_atexit>:
 80a31a4:	b510      	push	{r4, lr}
 80a31a6:	4c05      	ldr	r4, [pc, #20]	; (80a31bc <__cxa_atexit+0x18>)
 80a31a8:	4613      	mov	r3, r2
 80a31aa:	b12c      	cbz	r4, 80a31b8 <__cxa_atexit+0x14>
 80a31ac:	460a      	mov	r2, r1
 80a31ae:	4601      	mov	r1, r0
 80a31b0:	2002      	movs	r0, #2
 80a31b2:	f3af 8000 	nop.w
 80a31b6:	bd10      	pop	{r4, pc}
 80a31b8:	4620      	mov	r0, r4
 80a31ba:	bd10      	pop	{r4, pc}
 80a31bc:	00000000 	.word	0x00000000

080a31c0 <memcpy>:
 80a31c0:	b510      	push	{r4, lr}
 80a31c2:	1e43      	subs	r3, r0, #1
 80a31c4:	440a      	add	r2, r1
 80a31c6:	4291      	cmp	r1, r2
 80a31c8:	d004      	beq.n	80a31d4 <memcpy+0x14>
 80a31ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80a31ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80a31d2:	e7f8      	b.n	80a31c6 <memcpy+0x6>
 80a31d4:	bd10      	pop	{r4, pc}

080a31d6 <memset>:
 80a31d6:	4603      	mov	r3, r0
 80a31d8:	4402      	add	r2, r0
 80a31da:	4293      	cmp	r3, r2
 80a31dc:	d002      	beq.n	80a31e4 <memset+0xe>
 80a31de:	f803 1b01 	strb.w	r1, [r3], #1
 80a31e2:	e7fa      	b.n	80a31da <memset+0x4>
 80a31e4:	4770      	bx	lr
	...

080a31e8 <srand>:
 80a31e8:	b538      	push	{r3, r4, r5, lr}
 80a31ea:	4b12      	ldr	r3, [pc, #72]	; (80a3234 <srand+0x4c>)
 80a31ec:	4605      	mov	r5, r0
 80a31ee:	681c      	ldr	r4, [r3, #0]
 80a31f0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a31f2:	b9d3      	cbnz	r3, 80a322a <srand+0x42>
 80a31f4:	2018      	movs	r0, #24
 80a31f6:	f7fd fcd7 	bl	80a0ba8 <malloc>
 80a31fa:	f243 330e 	movw	r3, #13070	; 0x330e
 80a31fe:	63a0      	str	r0, [r4, #56]	; 0x38
 80a3200:	8003      	strh	r3, [r0, #0]
 80a3202:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 80a3206:	8043      	strh	r3, [r0, #2]
 80a3208:	f241 2334 	movw	r3, #4660	; 0x1234
 80a320c:	8083      	strh	r3, [r0, #4]
 80a320e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 80a3212:	80c3      	strh	r3, [r0, #6]
 80a3214:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 80a3218:	8103      	strh	r3, [r0, #8]
 80a321a:	2305      	movs	r3, #5
 80a321c:	8143      	strh	r3, [r0, #10]
 80a321e:	230b      	movs	r3, #11
 80a3220:	8183      	strh	r3, [r0, #12]
 80a3222:	2201      	movs	r2, #1
 80a3224:	2300      	movs	r3, #0
 80a3226:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80a322a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80a322c:	2200      	movs	r2, #0
 80a322e:	611d      	str	r5, [r3, #16]
 80a3230:	615a      	str	r2, [r3, #20]
 80a3232:	bd38      	pop	{r3, r4, r5, pc}
 80a3234:	2000037c 	.word	0x2000037c

080a3238 <strcpy>:
 80a3238:	4603      	mov	r3, r0
 80a323a:	f811 2b01 	ldrb.w	r2, [r1], #1
 80a323e:	f803 2b01 	strb.w	r2, [r3], #1
 80a3242:	2a00      	cmp	r2, #0
 80a3244:	d1f9      	bne.n	80a323a <strcpy+0x2>
 80a3246:	4770      	bx	lr

080a3248 <strdup>:
 80a3248:	4b02      	ldr	r3, [pc, #8]	; (80a3254 <strdup+0xc>)
 80a324a:	4601      	mov	r1, r0
 80a324c:	6818      	ldr	r0, [r3, #0]
 80a324e:	f000 b803 	b.w	80a3258 <_strdup_r>
 80a3252:	bf00      	nop
 80a3254:	2000037c 	.word	0x2000037c

080a3258 <_strdup_r>:
 80a3258:	b570      	push	{r4, r5, r6, lr}
 80a325a:	4606      	mov	r6, r0
 80a325c:	4608      	mov	r0, r1
 80a325e:	460c      	mov	r4, r1
 80a3260:	f000 f80d 	bl	80a327e <strlen>
 80a3264:	1c45      	adds	r5, r0, #1
 80a3266:	4629      	mov	r1, r5
 80a3268:	4630      	mov	r0, r6
 80a326a:	f7fd fcbd 	bl	80a0be8 <_malloc_r>
 80a326e:	4606      	mov	r6, r0
 80a3270:	b118      	cbz	r0, 80a327a <_strdup_r+0x22>
 80a3272:	462a      	mov	r2, r5
 80a3274:	4621      	mov	r1, r4
 80a3276:	f7ff ffa3 	bl	80a31c0 <memcpy>
 80a327a:	4630      	mov	r0, r6
 80a327c:	bd70      	pop	{r4, r5, r6, pc}

080a327e <strlen>:
 80a327e:	4603      	mov	r3, r0
 80a3280:	f813 2b01 	ldrb.w	r2, [r3], #1
 80a3284:	2a00      	cmp	r2, #0
 80a3286:	d1fb      	bne.n	80a3280 <strlen+0x2>
 80a3288:	1a18      	subs	r0, r3, r0
 80a328a:	3801      	subs	r0, #1
 80a328c:	4770      	bx	lr

080a328e <link_code_end>:
	...

080a3290 <dynalib_user>:
 80a3290:	001d 080a 005d 080a 0089 080a 008d 080a     ....]...........
 80a32a0:	0000 0000 227b 2231 203a 0022 2c22 2220     ....{"1": ".", "
 80a32b0:	2232 203a 0022 2c22 2220 2233 203a 0022     2": ".", "3": ".
 80a32c0:	2c22 2220 2234 203a 0022 2c22 2220 2235     ", "4": ".", "5"
 80a32d0:	203a 0022 2c22 2220 2236 203a 0022 2c22     : ".", "6": ".",
 80a32e0:	2220 2237 203a 0022 2c22 2220 226b 203a      "7": ".", "k": 
 80a32f0:	0022 7d22 7400 6968 676e 7053 6165 576b     "."}.thingSpeakW
 80a3300:	6972 6574 685f 0062 7550 6c62 7369 6968     rite_hb.Publishi
 80a3310:	676e 003a 4248 305f 0033 5733 394b 5158     ng:.HB_03.3WK9XQ
 80a3320:	5149 305a 5a53 4537 4253 4700 7465 6974     IQZ0SZ7ESB.Getti
 80a3330:	676e 7420 6d65 6570 6172 7574 6572 6620     ng temperature f
 80a3340:	6572 7571 6e65 7963 002e 6f50 6577 6972     requency..Poweri
 80a3350:	676e 6f20 206e 6573 736e 726f 0073 6547     ng on sensors.Ge
 80a3360:	7474 6e69 2067 6162 7474 7265 2079 6f76     tting battery vo
 80a3370:	746c 6761 2e65 4300 6e6f 6576 7472 6e69     ltage..Convertin
 80a3380:	2067 6574 706d 7265 7461 7275 2e65 7900     g temperature..y
 80a3390:	315f 3030 203a 6625 7900 305f 203a 6625     _100: %f.y_0: %f
 80a33a0:	7300 6f6c 6570 705f 6972 656d 203a 6625     .slope_prime: %f
 80a33b0:	6900 746e 7265 6563 7470 705f 6972 656d     .intercept_prime
 80a33c0:	203a 6625 4300 6e6f 6576 7472 6e69 2067     : %f.Converting 
 80a33d0:	6f6d 7369 7574 6572 002e 0000               moisture....

080a33dc <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 80a33e4:	0c25 080a 0c2b 080a 0c53 080a 0c37 080a     %...+...S...7...
 80a33f4:	0c27 080a                                   '...

080a33f8 <_ZTV7TwoWire>:
	...
 80a3400:	1195 080a 11df 080a 11b7 080a 1197 080a     ................
 80a3410:	11bf 080a 11c7 080a 11cf 080a 11d7 080a     ................

080a3420 <_ZTV9IPAddress>:
	...
 80a3428:	12eb 080a 12dd 080a 12df 080a 6e6c 6600     ............ln.f
 80a3438:	006e 6f63 6564 6400 7465 6961 006c 0a0d     n.code.detail...
 80a3448:	2500 3130 7530 0020 205d 2500 0064 202c     .%010u .] .%d., 
 80a3458:	2800 3a29 0020 5b20 6300 646f 2065 203d     .(): . [.code = 
 80a3468:	2500 0069 6564 6174 6c69 2073 203d 6200     .%i.details = .b
 80a3478:	7561 0064 6553 6972 6c61 5500 4253 6553     aud.Serial.USBSe
 80a3488:	6972 6c61 0031 7974 6570 7000 7261 6d61     rial1.type.param
 80a3498:	6300 646d 6900 0064 6e68 0064 7473 6d72     .cmd.id.hnd.strm
 80a34a8:	6600 6c69 0074 766c 006c 6461 4864 6e61     .filt.lvl.addHan
 80a34b8:	6c64 7265 7200 6d65 766f 4865 6e61 6c64     dler.removeHandl
 80a34c8:	7265 6500 756e 486d 6e61 6c64 7265 0073     er.enumHandlers.
 80a34d8:	534a 4e4f 7453 6572 6d61 6f4c 4867 6e61     JSONStreamLogHan
 80a34e8:	6c64 7265 6100 7070 6e00 6e6f 0065 7274     dler.app.none.tr
 80a34f8:	6361 0065 6e69 6f66 7700 7261 006e 7265     ace.info.warn.er
 80a3508:	6f72 0072 6170 696e 0063 6c61 006c 0000     ror.panic.all...

080a3518 <_ZTV8SPIClass>:
	...
 80a3520:	1461 080a 1463 080a 005a 2b25 3330 3a64     a...c...Z.%+03d:
 80a3530:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
 80a3540:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
 80a3550:	0000 0000                                   ....

080a3554 <_ZTV11USARTSerial>:
	...
 80a355c:	17bd 080a 17e1 080a 17ed 080a 1361 080a     ............a...
 80a356c:	17c9 080a 17d5 080a 17cf 080a 17db 080a     ................
 80a357c:	17bf 080a 17c3 080a                         ........

080a3584 <_ZTV9USBSerial>:
	...
 80a358c:	1895 080a 18d9 080a 18b3 080a 1361 080a     ............a...
 80a359c:	18ad 080a 1897 080a 189f 080a 18d3 080a     ................
 80a35ac:	18a7 080a 1891 080a                         ........

080a35b4 <_ZTVN5spark9WiFiClassE>:
	...
 80a35bc:	1a0f 080a                                   ....

080a35c0 <__sf_fake_stdin>:
	...

080a35e0 <__sf_fake_stdout>:
	...

080a3600 <__sf_fake_stderr>:
	...
 80a3620:	0043                                        C.

080a3622 <link_const_variable_data_end>:
	...

080a3624 <link_constructors_location>:
 80a3624:	080a0331 	.word	0x080a0331
 80a3628:	080a04a5 	.word	0x080a04a5
 80a362c:	080a07e5 	.word	0x080a07e5
 80a3630:	080a1351 	.word	0x080a1351
 80a3634:	080a1445 	.word	0x080a1445
 80a3638:	080a1769 	.word	0x080a1769
 80a363c:	080a17a9 	.word	0x080a17a9
 80a3640:	080a1a19 	.word	0x080a1a19
 80a3644:	080a1ce9 	.word	0x080a1ce9
 80a3648:	080a1d19 	.word	0x080a1d19
 80a364c:	080a1d6d 	.word	0x080a1d6d
 80a3650:	080a1e31 	.word	0x080a1e31
 80a3654:	080a1eb5 	.word	0x080a1eb5
 80a3658:	080a1f39 	.word	0x080a1f39

080a365c <link_constructors_end>:
 80a365c:	00000000 	.word	0x00000000
